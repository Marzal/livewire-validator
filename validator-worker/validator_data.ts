

export const VALIDATOR_APP_HASH = '6a47dca982a4da9f93364d39337870f82390f9be';
export const VALIDATOR_APP_B64 = 'const directives = new WeakMap();
const isDirective = (o)=>{
    return typeof o === "function" && directives.has(o);
};
const isCEPolyfill = typeof window !== "undefined" && window.customElements != null && window.customElements.polyfillWrapFlushCallback !== void 0;
const removeNodes = (container, start, end = null)=>{
    while(start !== end){
        const n = start.nextSibling;
        container.removeChild(start);
        start = n;
    }
};
const noChange = {
};
const nothing = {
};
const marker = `{{lit-${String(Math.random()).slice(2)}}}`;
const nodeMarker = `<!--${marker}-->`;
const markerRegex = new RegExp(`${marker}|${nodeMarker}`);
const boundAttributeSuffix = "$lit$";
class Template {
    constructor(result, element){
        this.parts = [];
        this.element = element;
        const nodesToRemove = [];
        const stack = [];
        const walker = document.createTreeWalker(element.content, 133, null, false);
        let lastPartIndex = 0;
        let index = -1;
        let partIndex = 0;
        const { strings , values: { length  }  } = result;
        while(partIndex < length){
            const node = walker.nextNode();
            if (node === null) {
                walker.currentNode = stack.pop();
                continue;
            }
            index++;
            if (node.nodeType === 1) {
                if (node.hasAttributes()) {
                    const attributes = node.attributes;
                    const { length: length2  } = attributes;
                    let count = 0;
                    for(let i = 0; i < length2; i++){
                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {
                            count++;
                        }
                    }
                    while(count-- > 0){
                        const stringForPart = strings[partIndex];
                        const name = lastAttributeNameRegex.exec(stringForPart)[2];
                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
                        const attributeValue = node.getAttribute(attributeLookupName);
                        node.removeAttribute(attributeLookupName);
                        const statics = attributeValue.split(markerRegex);
                        this.parts.push({
                            type: "attribute",
                            index,
                            name,
                            strings: statics
                        });
                        partIndex += statics.length - 1;
                    }
                }
                if (node.tagName === "TEMPLATE") {
                    stack.push(node);
                    walker.currentNode = node.content;
                }
            } else if (node.nodeType === 3) {
                const data = node.data;
                if (data.indexOf(marker) >= 0) {
                    const parent = node.parentNode;
                    const strings2 = data.split(markerRegex);
                    const lastIndex = strings2.length - 1;
                    for(let i = 0; i < lastIndex; i++){
                        let insert;
                        let s = strings2[i];
                        if (s === "") {
                            insert = createMarker();
                        } else {
                            const match = lastAttributeNameRegex.exec(s);
                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
                                s = s.slice(0, match.index) + match[1] + match[2].slice(0, -boundAttributeSuffix.length) + match[3];
                            }
                            insert = document.createTextNode(s);
                        }
                        parent.insertBefore(insert, node);
                        this.parts.push({
                            type: "node",
                            index: ++index
                        });
                    }
                    if (strings2[lastIndex] === "") {
                        parent.insertBefore(createMarker(), node);
                        nodesToRemove.push(node);
                    } else {
                        node.data = strings2[lastIndex];
                    }
                    partIndex += lastIndex;
                }
            } else if (node.nodeType === 8) {
                if (node.data === marker) {
                    const parent = node.parentNode;
                    if (node.previousSibling === null || index === lastPartIndex) {
                        index++;
                        parent.insertBefore(createMarker(), node);
                    }
                    lastPartIndex = index;
                    this.parts.push({
                        type: "node",
                        index
                    });
                    if (node.nextSibling === null) {
                        node.data = "";
                    } else {
                        nodesToRemove.push(node);
                        index--;
                    }
                    partIndex++;
                } else {
                    let i = -1;
                    while((i = node.data.indexOf(marker, i + 1)) !== -1){
                        this.parts.push({
                            type: "node",
                            index: -1
                        });
                        partIndex++;
                    }
                }
            }
        }
        for (const n of nodesToRemove){
            n.parentNode.removeChild(n);
        }
    }
}
const endsWith = (str, suffix)=>{
    const index = str.length - suffix.length;
    return index >= 0 && str.slice(index) === suffix;
};
const isTemplatePartActive = (part)=>part.index !== -1
;
const createMarker = ()=>document.createComment("")
;
const lastAttributeNameRegex = /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
class TemplateInstance {
    constructor(template, processor, options){
        this.__parts = [];
        this.template = template;
        this.processor = processor;
        this.options = options;
    }
    update(values) {
        let i = 0;
        for (const part of this.__parts){
            if (part !== void 0) {
                part.setValue(values[i]);
            }
            i++;
        }
        for (const part1 of this.__parts){
            if (part1 !== void 0) {
                part1.commit();
            }
        }
    }
    _clone() {
        const fragment = isCEPolyfill ? this.template.element.content.cloneNode(true) : document.importNode(this.template.element.content, true);
        const stack = [];
        const parts2 = this.template.parts;
        const walker = document.createTreeWalker(fragment, 133, null, false);
        let partIndex = 0;
        let nodeIndex = 0;
        let part;
        let node = walker.nextNode();
        while(partIndex < parts2.length){
            part = parts2[partIndex];
            if (!isTemplatePartActive(part)) {
                this.__parts.push(void 0);
                partIndex++;
                continue;
            }
            while(nodeIndex < part.index){
                nodeIndex++;
                if (node.nodeName === "TEMPLATE") {
                    stack.push(node);
                    walker.currentNode = node.content;
                }
                if ((node = walker.nextNode()) === null) {
                    walker.currentNode = stack.pop();
                    node = walker.nextNode();
                }
            }
            if (part.type === "node") {
                const part2 = this.processor.handleTextExpression(this.options);
                part2.insertAfterNode(node.previousSibling);
                this.__parts.push(part2);
            } else {
                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
            }
            partIndex++;
        }
        if (isCEPolyfill) {
            document.adoptNode(fragment);
            customElements.upgrade(fragment);
        }
        return fragment;
    }
}
const policy = window.trustedTypes && trustedTypes.createPolicy("lit-html", {
    createHTML: (s)=>s
});
const commentMarker = ` ${marker} `;
class TemplateResult {
    constructor(strings, values, type, processor){
        this.strings = strings;
        this.values = values;
        this.type = type;
        this.processor = processor;
    }
    getHTML() {
        const l = this.strings.length - 1;
        let html2 = "";
        let isCommentBinding = false;
        for(let i = 0; i < l; i++){
            const s = this.strings[i];
            const commentOpen = s.lastIndexOf("<!--");
            isCommentBinding = (commentOpen > -1 || isCommentBinding) && s.indexOf("-->", commentOpen + 1) === -1;
            const attributeMatch = lastAttributeNameRegex.exec(s);
            if (attributeMatch === null) {
                html2 += s + (isCommentBinding ? commentMarker : nodeMarker);
            } else {
                html2 += s.substr(0, attributeMatch.index) + attributeMatch[1] + attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] + marker;
            }
        }
        html2 += this.strings[l];
        return html2;
    }
    getTemplateElement() {
        const template = document.createElement("template");
        let value = this.getHTML();
        if (policy !== void 0) {
            value = policy.createHTML(value);
        }
        template.innerHTML = value;
        return template;
    }
}
const isPrimitive = (value)=>{
    return value === null || !(typeof value === "object" || typeof value === "function");
};
const isIterable = (value)=>{
    return Array.isArray(value) || !!(value && value[Symbol.iterator]);
};
class AttributeCommitter {
    constructor(element, name, strings){
        this.dirty = true;
        this.element = element;
        this.name = name;
        this.strings = strings;
        this.parts = [];
        for(let i = 0; i < strings.length - 1; i++){
            this.parts[i] = this._createPart();
        }
    }
    _createPart() {
        return new AttributePart(this);
    }
    _getValue() {
        const strings = this.strings;
        const l = strings.length - 1;
        const parts2 = this.parts;
        if (l === 1 && strings[0] === "" && strings[1] === "") {
            const v = parts2[0].value;
            if (typeof v === "symbol") {
                return String(v);
            }
            if (typeof v === "string" || !isIterable(v)) {
                return v;
            }
        }
        let text = "";
        for(let i = 0; i < l; i++){
            text += strings[i];
            const part = parts2[i];
            if (part !== void 0) {
                const v = part.value;
                if (isPrimitive(v) || !isIterable(v)) {
                    text += typeof v === "string" ? v : String(v);
                } else {
                    for (const t of v){
                        text += typeof t === "string" ? t : String(t);
                    }
                }
            }
        }
        text += strings[l];
        return text;
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            this.element.setAttribute(this.name, this._getValue());
        }
    }
}
class AttributePart {
    constructor(committer){
        this.value = void 0;
        this.committer = committer;
    }
    setValue(value) {
        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
            this.value = value;
            if (!isDirective(value)) {
                this.committer.dirty = true;
            }
        }
    }
    commit() {
        while(isDirective(this.value)){
            const directive2 = this.value;
            this.value = noChange;
            directive2(this);
        }
        if (this.value === noChange) {
            return;
        }
        this.committer.commit();
    }
}
class NodePart {
    constructor(options){
        this.value = void 0;
        this.__pendingValue = void 0;
        this.options = options;
    }
    appendInto(container) {
        this.startNode = container.appendChild(createMarker());
        this.endNode = container.appendChild(createMarker());
    }
    insertAfterNode(ref) {
        this.startNode = ref;
        this.endNode = ref.nextSibling;
    }
    appendIntoPart(part) {
        part.__insert(this.startNode = createMarker());
        part.__insert(this.endNode = createMarker());
    }
    insertAfterPart(ref) {
        ref.__insert(this.startNode = createMarker());
        this.endNode = ref.endNode;
        ref.endNode = this.startNode;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        if (this.startNode.parentNode === null) {
            return;
        }
        while(isDirective(this.__pendingValue)){
            const directive2 = this.__pendingValue;
            this.__pendingValue = noChange;
            directive2(this);
        }
        const value = this.__pendingValue;
        if (value === noChange) {
            return;
        }
        if (isPrimitive(value)) {
            if (value !== this.value) {
                this.__commitText(value);
            }
        } else if (value instanceof TemplateResult) {
            this.__commitTemplateResult(value);
        } else if (value instanceof Node) {
            this.__commitNode(value);
        } else if (isIterable(value)) {
            this.__commitIterable(value);
        } else if (value === nothing) {
            this.value = nothing;
            this.clear();
        } else {
            this.__commitText(value);
        }
    }
    __insert(node) {
        this.endNode.parentNode.insertBefore(node, this.endNode);
    }
    __commitNode(value) {
        if (this.value === value) {
            return;
        }
        this.clear();
        this.__insert(value);
        this.value = value;
    }
    __commitText(value) {
        const node = this.startNode.nextSibling;
        value = value == null ? "" : value;
        const valueAsString = typeof value === "string" ? value : String(value);
        if (node === this.endNode.previousSibling && node.nodeType === 3) {
            node.data = valueAsString;
        } else {
            this.__commitNode(document.createTextNode(valueAsString));
        }
        this.value = value;
    }
    __commitTemplateResult(value) {
        const template = this.options.templateFactory(value);
        if (this.value instanceof TemplateInstance && this.value.template === template) {
            this.value.update(value.values);
        } else {
            const instance = new TemplateInstance(template, value.processor, this.options);
            const fragment = instance._clone();
            instance.update(value.values);
            this.__commitNode(fragment);
            this.value = instance;
        }
    }
    __commitIterable(value) {
        if (!Array.isArray(this.value)) {
            this.value = [];
            this.clear();
        }
        const itemParts = this.value;
        let partIndex = 0;
        let itemPart;
        for (const item of value){
            itemPart = itemParts[partIndex];
            if (itemPart === void 0) {
                itemPart = new NodePart(this.options);
                itemParts.push(itemPart);
                if (partIndex === 0) {
                    itemPart.appendIntoPart(this);
                } else {
                    itemPart.insertAfterPart(itemParts[partIndex - 1]);
                }
            }
            itemPart.setValue(item);
            itemPart.commit();
            partIndex++;
        }
        if (partIndex < itemParts.length) {
            itemParts.length = partIndex;
            this.clear(itemPart && itemPart.endNode);
        }
    }
    clear(startNode = this.startNode) {
        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
    }
}
class BooleanAttributePart {
    constructor(element, name, strings){
        this.value = void 0;
        this.__pendingValue = void 0;
        if (strings.length !== 2 || strings[0] !== "" || strings[1] !== "") {
            throw new Error("Boolean attributes can only contain a single expression");
        }
        this.element = element;
        this.name = name;
        this.strings = strings;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while(isDirective(this.__pendingValue)){
            const directive2 = this.__pendingValue;
            this.__pendingValue = noChange;
            directive2(this);
        }
        if (this.__pendingValue === noChange) {
            return;
        }
        const value = !!this.__pendingValue;
        if (this.value !== value) {
            if (value) {
                this.element.setAttribute(this.name, "");
            } else {
                this.element.removeAttribute(this.name);
            }
            this.value = value;
        }
        this.__pendingValue = noChange;
    }
}
class PropertyCommitter extends AttributeCommitter {
    constructor(element, name, strings){
        super(element, name, strings);
        this.single = strings.length === 2 && strings[0] === "" && strings[1] === "";
    }
    _createPart() {
        return new PropertyPart(this);
    }
    _getValue() {
        if (this.single) {
            return this.parts[0].value;
        }
        return super._getValue();
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            this.element[this.name] = this._getValue();
        }
    }
}
class PropertyPart extends AttributePart {
}
let eventOptionsSupported = false;
(()=>{
    try {
        const options = {
            get capture () {
                eventOptionsSupported = true;
                return false;
            }
        };
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
    } catch (_e) {
    }
})();
class EventPart {
    constructor(element, eventName, eventContext){
        this.value = void 0;
        this.__pendingValue = void 0;
        this.element = element;
        this.eventName = eventName;
        this.eventContext = eventContext;
        this.__boundHandleEvent = (e)=>this.handleEvent(e)
        ;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while(isDirective(this.__pendingValue)){
            const directive2 = this.__pendingValue;
            this.__pendingValue = noChange;
            directive2(this);
        }
        if (this.__pendingValue === noChange) {
            return;
        }
        const newListener = this.__pendingValue;
        const oldListener = this.value;
        const shouldRemoveListener = newListener == null || oldListener != null && (newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive);
        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
        if (shouldRemoveListener) {
            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        if (shouldAddListener) {
            this.__options = getOptions(newListener);
            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        this.value = newListener;
        this.__pendingValue = noChange;
    }
    handleEvent(event) {
        if (typeof this.value === "function") {
            this.value.call(this.eventContext || this.element, event);
        } else {
            this.value.handleEvent(event);
        }
    }
}
const getOptions = (o)=>o && (eventOptionsSupported ? {
        capture: o.capture,
        passive: o.passive,
        once: o.once
    } : o.capture)
;
class DefaultTemplateProcessor {
    handleAttributeExpressions(element, name, strings, options) {
        const prefix = name[0];
        if (prefix === ".") {
            const committer2 = new PropertyCommitter(element, name.slice(1), strings);
            return committer2.parts;
        }
        if (prefix === "@") {
            return [
                new EventPart(element, name.slice(1), options.eventContext)
            ];
        }
        if (prefix === "?") {
            return [
                new BooleanAttributePart(element, name.slice(1), strings)
            ];
        }
        const committer = new AttributeCommitter(element, name, strings);
        return committer.parts;
    }
    handleTextExpression(options) {
        return new NodePart(options);
    }
}
const defaultTemplateProcessor = new DefaultTemplateProcessor();
function templateFactory(result) {
    let templateCache = templateCaches.get(result.type);
    if (templateCache === void 0) {
        templateCache = {
            stringsArray: new WeakMap(),
            keyString: new Map()
        };
        templateCaches.set(result.type, templateCache);
    }
    let template = templateCache.stringsArray.get(result.strings);
    if (template !== void 0) {
        return template;
    }
    const key = result.strings.join(marker);
    template = templateCache.keyString.get(key);
    if (template === void 0) {
        template = new Template(result, result.getTemplateElement());
        templateCache.keyString.set(key, template);
    }
    templateCache.stringsArray.set(result.strings, template);
    return template;
}
const templateCaches = new Map();
const parts = new WeakMap();
const render = (result, container, options)=>{
    let part = parts.get(container);
    if (part === void 0) {
        removeNodes(container, container.firstChild);
        parts.set(container, part = new NodePart(Object.assign({
            templateFactory
        }, options)));
        part.appendInto(container);
    }
    part.setValue(result);
    part.commit();
};
if (typeof window !== "undefined") {
    (window["litHtmlVersions"] || (window["litHtmlVersions"] = [])).push("1.4.1");
}
const html = (strings, ...values)=>new TemplateResult(strings, values, "html", defaultTemplateProcessor)
;
var _a;
window.JSCompiler_renameProperty = (prop, _obj)=>prop
;
const defaultConverter = {
    toAttribute (value, type) {
        switch(type){
            case Boolean:
                return value ? "" : null;
            case Object:
            case Array:
                return value == null ? value : JSON.stringify(value);
        }
        return value;
    },
    fromAttribute (value, type) {
        switch(type){
            case Boolean:
                return value !== null;
            case Number:
                return value === null ? null : Number(value);
            case Object:
            case Array:
                return JSON.parse(value);
        }
        return value;
    }
};
const notEqual = (value, old)=>{
    return old !== value && (old === old || value === value);
};
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: defaultConverter,
    reflect: false,
    hasChanged: notEqual
};
const STATE_HAS_UPDATED = 1;
const STATE_UPDATE_REQUESTED = 1 << 2;
const STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
const STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
const finalized = "finalized";
class UpdatingElement extends HTMLElement {
    constructor(){
        super();
        this.initialize();
    }
    static get observedAttributes() {
        this.finalize();
        const attributes = [];
        this._classProperties.forEach((v, p)=>{
            const attr = this._attributeNameForProperty(p, v);
            if (attr !== void 0) {
                this._attributeToPropertyMap.set(attr, p);
                attributes.push(attr);
            }
        });
        return attributes;
    }
    static _ensureClassProperties() {
        if (!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties", this))) {
            this._classProperties = new Map();
            const superProperties = Object.getPrototypeOf(this)._classProperties;
            if (superProperties !== void 0) {
                superProperties.forEach((v, k)=>this._classProperties.set(k, v)
                );
            }
        }
    }
    static createProperty(name, options = defaultPropertyDeclaration) {
        this._ensureClassProperties();
        this._classProperties.set(name, options);
        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
            return;
        }
        const key = typeof name === "symbol" ? Symbol() : `__${name}`;
        const descriptor = this.getPropertyDescriptor(name, key, options);
        if (descriptor !== void 0) {
            Object.defineProperty(this.prototype, name, descriptor);
        }
    }
    static getPropertyDescriptor(name, key, options) {
        return {
            get () {
                return this[key];
            },
            set (value) {
                const oldValue = this[name];
                this[key] = value;
                this.requestUpdateInternal(name, oldValue, options);
            },
            configurable: true,
            enumerable: true
        };
    }
    static getPropertyOptions(name) {
        return this._classProperties && this._classProperties.get(name) || defaultPropertyDeclaration;
    }
    static finalize() {
        const superCtor = Object.getPrototypeOf(this);
        if (!superCtor.hasOwnProperty(finalized)) {
            superCtor.finalize();
        }
        this[finalized] = true;
        this._ensureClassProperties();
        this._attributeToPropertyMap = new Map();
        if (this.hasOwnProperty(JSCompiler_renameProperty("properties", this))) {
            const props = this.properties;
            const propKeys = [
                ...Object.getOwnPropertyNames(props),
                ...typeof Object.getOwnPropertySymbols === "function" ? Object.getOwnPropertySymbols(props) : []
            ];
            for (const p of propKeys){
                this.createProperty(p, props[p]);
            }
        }
    }
    static _attributeNameForProperty(name, options) {
        const attribute = options.attribute;
        return attribute === false ? void 0 : typeof attribute === "string" ? attribute : typeof name === "string" ? name.toLowerCase() : void 0;
    }
    static _valueHasChanged(value, old, hasChanged = notEqual) {
        return hasChanged(value, old);
    }
    static _propertyValueFromAttribute(value, options) {
        const type = options.type;
        const converter = options.converter || defaultConverter;
        const fromAttribute = typeof converter === "function" ? converter : converter.fromAttribute;
        return fromAttribute ? fromAttribute(value, type) : value;
    }
    static _propertyValueToAttribute(value, options) {
        if (options.reflect === void 0) {
            return;
        }
        const type = options.type;
        const converter = options.converter;
        const toAttribute = converter && converter.toAttribute || defaultConverter.toAttribute;
        return toAttribute(value, type);
    }
    initialize() {
        this._updateState = 0;
        this._updatePromise = new Promise((res)=>this._enableUpdatingResolver = res
        );
        this._changedProperties = new Map();
        this._saveInstanceProperties();
        this.requestUpdateInternal();
    }
    _saveInstanceProperties() {
        this.constructor._classProperties.forEach((_v, p)=>{
            if (this.hasOwnProperty(p)) {
                const value = this[p];
                delete this[p];
                if (!this._instanceProperties) {
                    this._instanceProperties = new Map();
                }
                this._instanceProperties.set(p, value);
            }
        });
    }
    _applyInstanceProperties() {
        this._instanceProperties.forEach((v, p)=>this[p] = v
        );
        this._instanceProperties = void 0;
    }
    connectedCallback() {
        this.enableUpdating();
    }
    enableUpdating() {
        if (this._enableUpdatingResolver !== void 0) {
            this._enableUpdatingResolver();
            this._enableUpdatingResolver = void 0;
        }
    }
    disconnectedCallback() {
    }
    attributeChangedCallback(name, old, value) {
        if (old !== value) {
            this._attributeToProperty(name, value);
        }
    }
    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
        const ctor = this.constructor;
        const attr = ctor._attributeNameForProperty(name, options);
        if (attr !== void 0) {
            const attrValue = ctor._propertyValueToAttribute(value, options);
            if (attrValue === void 0) {
                return;
            }
            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;
            if (attrValue == null) {
                this.removeAttribute(attr);
            } else {
                this.setAttribute(attr, attrValue);
            }
            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
        }
    }
    _attributeToProperty(name, value) {
        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
            return;
        }
        const ctor = this.constructor;
        const propName = ctor._attributeToPropertyMap.get(name);
        if (propName !== void 0) {
            const options = ctor.getPropertyOptions(propName);
            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
            this[propName] = ctor._propertyValueFromAttribute(value, options);
            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
        }
    }
    requestUpdateInternal(name, oldValue, options) {
        let shouldRequestUpdate = true;
        if (name !== void 0) {
            const ctor = this.constructor;
            options = options || ctor.getPropertyOptions(name);
            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
                if (!this._changedProperties.has(name)) {
                    this._changedProperties.set(name, oldValue);
                }
                if (options.reflect === true && !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
                    if (this._reflectingProperties === void 0) {
                        this._reflectingProperties = new Map();
                    }
                    this._reflectingProperties.set(name, options);
                }
            } else {
                shouldRequestUpdate = false;
            }
        }
        if (!this._hasRequestedUpdate && shouldRequestUpdate) {
            this._updatePromise = this._enqueueUpdate();
        }
    }
    requestUpdate(name, oldValue) {
        this.requestUpdateInternal(name, oldValue);
        return this.updateComplete;
    }
    async _enqueueUpdate() {
        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
        try {
            await this._updatePromise;
        } catch (e) {
        }
        const result = this.performUpdate();
        if (result != null) {
            await result;
        }
        return !this._hasRequestedUpdate;
    }
    get _hasRequestedUpdate() {
        return this._updateState & STATE_UPDATE_REQUESTED;
    }
    get hasUpdated() {
        return this._updateState & 1;
    }
    performUpdate() {
        if (!this._hasRequestedUpdate) {
            return;
        }
        if (this._instanceProperties) {
            this._applyInstanceProperties();
        }
        let shouldUpdate = false;
        const changedProperties = this._changedProperties;
        try {
            shouldUpdate = this.shouldUpdate(changedProperties);
            if (shouldUpdate) {
                this.update(changedProperties);
            } else {
                this._markUpdated();
            }
        } catch (e) {
            shouldUpdate = false;
            this._markUpdated();
            throw e;
        }
        if (shouldUpdate) {
            if (!(this._updateState & 1)) {
                this._updateState = this._updateState | STATE_HAS_UPDATED;
                this.firstUpdated(changedProperties);
            }
            this.updated(changedProperties);
        }
    }
    _markUpdated() {
        this._changedProperties = new Map();
        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
    }
    get updateComplete() {
        return this._getUpdateComplete();
    }
    _getUpdateComplete() {
        return this.getUpdateComplete();
    }
    getUpdateComplete() {
        return this._updatePromise;
    }
    shouldUpdate(_changedProperties) {
        return true;
    }
    update(_changedProperties) {
        if (this._reflectingProperties !== void 0 && this._reflectingProperties.size > 0) {
            this._reflectingProperties.forEach((v, k)=>this._propertyToAttribute(k, this[k], v)
            );
            this._reflectingProperties = void 0;
        }
        this._markUpdated();
    }
    updated(_changedProperties) {
    }
    firstUpdated(_changedProperties) {
    }
}
_a = finalized;
UpdatingElement[_a] = true;
const ElementProto = Element.prototype;
ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;
const supportsAdoptingStyleSheets = window.ShadowRoot && (window.ShadyCSS === void 0 || window.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
const constructionToken = Symbol();
class CSSResult {
    constructor(cssText, safeToken){
        if (safeToken !== constructionToken) {
            throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
        }
        this.cssText = cssText;
    }
    get styleSheet() {
        if (this._styleSheet === void 0) {
            if (supportsAdoptingStyleSheets) {
                this._styleSheet = new CSSStyleSheet();
                this._styleSheet.replaceSync(this.cssText);
            } else {
                this._styleSheet = null;
            }
        }
        return this._styleSheet;
    }
    toString() {
        return this.cssText;
    }
}
const unsafeCSS = (value)=>{
    return new CSSResult(String(value), constructionToken);
};
const textFromCSSResult = (value)=>{
    if (value instanceof CSSResult) {
        return value.cssText;
    } else if (typeof value === "number") {
        return value;
    } else {
        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but
            take care to ensure page security.`);
    }
};
const css = (strings, ...values)=>{
    const cssText = values.reduce((acc, v, idx)=>acc + textFromCSSResult(v) + strings[idx + 1]
    , strings[0]);
    return new CSSResult(cssText, constructionToken);
};
(window["litElementVersions"] || (window["litElementVersions"] = [])).push("2.5.1");
const renderNotImplemented = {
};
class LitElement extends UpdatingElement {
    static getStyles() {
        return this.styles;
    }
    static _getUniqueStyles() {
        if (this.hasOwnProperty(JSCompiler_renameProperty("_styles", this))) {
            return;
        }
        const userStyles = this.getStyles();
        if (Array.isArray(userStyles)) {
            const addStyles = (styles2, set2)=>styles2.reduceRight((set3, s)=>Array.isArray(s) ? addStyles(s, set3) : (set3.add(s), set3)
                , set2)
            ;
            const set = addStyles(userStyles, new Set());
            const styles = [];
            set.forEach((v)=>styles.unshift(v)
            );
            this._styles = styles;
        } else {
            this._styles = userStyles === void 0 ? [] : [
                userStyles
            ];
        }
        this._styles = this._styles.map((s)=>{
            if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {
                const cssText = Array.prototype.slice.call(s.cssRules).reduce((css2, rule)=>css2 + rule.cssText
                , "");
                return unsafeCSS(cssText);
            }
            return s;
        });
    }
    initialize() {
        super.initialize();
        this.constructor._getUniqueStyles();
        this.renderRoot = this.createRenderRoot();
        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
            this.adoptStyles();
        }
    }
    createRenderRoot() {
        return this.attachShadow(this.constructor.shadowRootOptions);
    }
    adoptStyles() {
        const styles = this.constructor._styles;
        if (styles.length === 0) {
            return;
        }
        if (window.ShadyCSS !== void 0 && !window.ShadyCSS.nativeShadow) {
            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s)=>s.cssText
            ), this.localName);
        } else if (supportsAdoptingStyleSheets) {
            this.renderRoot.adoptedStyleSheets = styles.map((s)=>s instanceof CSSStyleSheet ? s : s.styleSheet
            );
        } else {
            this._needsShimAdoptedStyleSheets = true;
        }
    }
    connectedCallback() {
        super.connectedCallback();
        if (this.hasUpdated && window.ShadyCSS !== void 0) {
            window.ShadyCSS.styleElement(this);
        }
    }
    update(changedProperties) {
        const templateResult = this.render();
        super.update(changedProperties);
        if (templateResult !== renderNotImplemented) {
            this.constructor.render(templateResult, this.renderRoot, {
                scopeName: this.localName,
                eventContext: this
            });
        }
        if (this._needsShimAdoptedStyleSheets) {
            this._needsShimAdoptedStyleSheets = false;
            this.constructor._styles.forEach((s)=>{
                const style = document.createElement("style");
                style.textContent = s.cssText;
                this.renderRoot.appendChild(style);
            });
        }
    }
    render() {
        return renderNotImplemented;
    }
}
LitElement["finalized"] = true;
LitElement.render = render;
LitElement.shadowRootOptions = {
    mode: "open"
};
const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
const numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
const consider = {
    hex: true,
    leadingZeros: true,
    decimalPoint: "."
};
function toNumber(str, options = {
}) {
    options = Object.assign({
    }, consider, options);
    if (!str || typeof str !== "string") return str;
    let trimmedStr = str.trim();
    if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr)) return str;
    else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
    } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
            match[1];
            const leadingZeros = match[2];
            const num = match[3];
            match[4] || match[6];
            if (leadingZeros.length === 1 && num[0] === ".") return Number(str);
            else if (!options.leadingZeros && leadingZeros.length > 0) return str;
            else return Number(trimmedStr);
        } else {
            return str;
        }
    }
}
var strnum = toNumber;
function createCommonjsModule(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {
        },
        require: function(path, base) {
            return commonjsRequire(path, base === void 0 || base === null ? module.path : base);
        }
    }, fn(module, module.exports), module.exports;
}
function commonjsRequire() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var util = createCommonjsModule(function(module, exports) {
    const nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    const nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    const nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    const regexName = new RegExp("^" + nameRegexp + "$");
    const getAllMatches = function(string, regex) {
        const matches = [];
        let match = regex.exec(string);
        while(match){
            const allmatches = [];
            allmatches.startIndex = regex.lastIndex - match[0].length;
            const len = match.length;
            for(let index = 0; index < len; index++){
                allmatches.push(match[index]);
            }
            matches.push(allmatches);
            match = regex.exec(string);
        }
        return matches;
    };
    const isName = function(string) {
        const match = regexName.exec(string);
        return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
        return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
        return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
        if (a) {
            const keys = Object.keys(a);
            const len = keys.length;
            for(let i = 0; i < len; i++){
                if (arrayMode === "strict") {
                    target[keys[i]] = [
                        a[keys[i]]
                    ];
                } else {
                    target[keys[i]] = a[keys[i]];
                }
            }
        }
    };
    exports.getValue = function(v) {
        if (exports.isExist(v)) {
            return v;
        } else {
            return "";
        }
    };
    exports.buildOptions = function(options, defaultOptions2, props2) {
        let newOptions = {
        };
        if (!options) {
            return defaultOptions2;
        }
        for(let i = 0; i < props2.length; i++){
            if (options[props2[i]] !== void 0) {
                newOptions[props2[i]] = options[props2[i]];
            } else {
                newOptions[props2[i]] = defaultOptions2[props2[i]];
            }
        }
        return newOptions;
    };
    exports.isTagNameInArrayMode = function(tagName, arrayMode, parentTagName) {
        if (arrayMode === false) {
            return false;
        } else if (arrayMode instanceof RegExp) {
            return arrayMode.test(tagName);
        } else if (typeof arrayMode === "function") {
            return !!arrayMode(tagName, parentTagName);
        }
        return arrayMode === "strict";
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
});
const convertToJson = function(node, options, parentTagName) {
    const jObj = {
    };
    if (!options.alwaysCreateTextNode && (!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
        return util.isExist(node.val) ? node.val : "";
    }
    if (util.isExist(node.val) && !(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
        const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);
        jObj[options.textNodeName] = asArray ? [
            node.val
        ] : node.val;
    }
    util.merge(jObj, node.attrsMap, options.arrayMode);
    const keys = Object.keys(node.child);
    for(let index = 0; index < keys.length; index++){
        const tagName = keys[index];
        if (node.child[tagName] && node.child[tagName].length > 1) {
            jObj[tagName] = [];
            for(let tag in node.child[tagName]){
                if (node.child[tagName].hasOwnProperty(tag)) {
                    jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
                }
            }
        } else {
            const result = convertToJson(node.child[tagName][0], options, tagName);
            const asArray = options.arrayMode === true && typeof result === "object" || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
            jObj[tagName] = asArray ? [
                result
            ] : result;
        }
    }
    return jObj;
};
var convertToJson_1 = convertToJson;
var node2json = {
    convertToJson: convertToJson_1
};
var xmlNode = function(tagname, parent, val) {
    this.tagname = tagname;
    this.parent = parent;
    this.child = {
    };
    this.attrsMap = {
    };
    this.val = val;
    this.addChild = function(child) {
        if (Array.isArray(this.child[child.tagname])) {
            this.child[child.tagname].push(child);
        } else {
            this.child[child.tagname] = [
                child
            ];
        }
    };
};
const buildOptions = util.buildOptions;
"<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
if (!Number.parseInt && window.parseInt) {
    Number.parseInt = window.parseInt;
}
if (!Number.parseFloat && window.parseFloat) {
    Number.parseFloat = window.parseFloat;
}
const defaultOptions = {
    attributeNamePrefix: "@_",
    attrNodeName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    ignoreNameSpace: false,
    allowBooleanAttributes: false,
    parseNodeValue: true,
    parseAttributeValue: false,
    arrayMode: false,
    trimValues: true,
    cdataTagName: false,
    cdataPositionChar: "\\c",
    numParseOptions: {
        hex: true,
        leadingZeros: true
    },
    tagValueProcessor: function(a, tagName) {
        return a;
    },
    attrValueProcessor: function(a, attrName) {
        return a;
    },
    stopNodes: [],
    alwaysCreateTextNode: false
};
var defaultOptions_1 = defaultOptions;
const props = [
    "attributeNamePrefix",
    "attrNodeName",
    "textNodeName",
    "ignoreAttributes",
    "ignoreNameSpace",
    "allowBooleanAttributes",
    "parseNodeValue",
    "parseAttributeValue",
    "arrayMode",
    "trimValues",
    "cdataTagName",
    "cdataPositionChar",
    "tagValueProcessor",
    "attrValueProcessor",
    "parseTrueNumberOnly",
    "numParseOptions",
    "stopNodes",
    "alwaysCreateTextNode"
];
var props_1 = props;
function processTagValue(tagName, val, options) {
    if (val) {
        if (options.trimValues) {
            val = val.trim();
        }
        val = options.tagValueProcessor(val, tagName);
        val = parseValue(val, options.parseNodeValue, options.numParseOptions);
    }
    return val;
}
function resolveNameSpace(tagname, options) {
    if (options.ignoreNameSpace) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
            return "";
        }
        if (tags.length === 2) {
            tagname = prefix + tags[1];
        }
    }
    return tagname;
}
function parseValue(val, shouldParse, options) {
    if (shouldParse && typeof val === "string") {
        const newval = val.trim();
        if (newval === "true") return true;
        else if (newval === "false") return false;
        else return strnum(val, options);
    } else {
        if (util.isExist(val)) {
            return val;
        } else {
            return "";
        }
    }
}
const attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])(.*?)\\3)?`, "g");
function buildAttributesMap(attrStr, options) {
    if (!options.ignoreAttributes && typeof attrStr === "string") {
        attrStr = attrStr.replace(/\r?\n/g, " ");
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {
        };
        for(let i = 0; i < len; i++){
            const attrName = resolveNameSpace(matches[i][1], options);
            if (attrName.length) {
                if (matches[i][4] !== void 0) {
                    if (options.trimValues) {
                        matches[i][4] = matches[i][4].trim();
                    }
                    matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
                    attrs[options.attributeNamePrefix + attrName] = parseValue(matches[i][4], options.parseAttributeValue, options.numParseOptions);
                } else if (options.allowBooleanAttributes) {
                    attrs[options.attributeNamePrefix + attrName] = true;
                }
            }
        }
        if (!Object.keys(attrs).length) {
            return;
        }
        if (options.attrNodeName) {
            const attrCollection = {
            };
            attrCollection[options.attrNodeName] = attrs;
            return attrCollection;
        }
        return attrs;
    }
}
const getTraversalObj = function(xmlData, options) {
    xmlData = xmlData.replace(/\r\n?/g, "\n");
    options = buildOptions(options, defaultOptions, props);
    const xmlObj = new xmlNode("!xml");
    let currentNode = xmlObj;
    let textData = "";
    for(let i = 0; i < xmlData.length; i++){
        const ch = xmlData[i];
        if (ch === "<") {
            if (xmlData[i + 1] === "/") {
                const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
                let tagName = xmlData.substring(i + 2, closeIndex).trim();
                if (options.ignoreNameSpace) {
                    const colonIndex = tagName.indexOf(":");
                    if (colonIndex !== -1) {
                        tagName = tagName.substr(colonIndex + 1);
                    }
                }
                if (currentNode) {
                    if (currentNode.val) {
                        currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(tagName, textData, options);
                    } else {
                        currentNode.val = processTagValue(tagName, textData, options);
                    }
                }
                if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
                    currentNode.child = [];
                    if (currentNode.attrsMap == void 0) {
                        currentNode.attrsMap = {
                        };
                    }
                    currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
                }
                currentNode = currentNode.parent;
                textData = "";
                i = closeIndex;
            } else if (xmlData[i + 1] === "?") {
                i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.");
            } else if (xmlData.substr(i + 1, 3) === "!--") {
                i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.");
            } else if (xmlData.substr(i + 1, 2) === "!D") {
                const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.");
                const tagExp = xmlData.substring(i, closeIndex);
                if (tagExp.indexOf("[") >= 0) {
                    i = xmlData.indexOf("]>", i) + 1;
                } else {
                    i = closeIndex;
                }
            } else if (xmlData.substr(i + 1, 2) === "![") {
                const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
                const tagExp = xmlData.substring(i + 9, closeIndex);
                if (textData) {
                    currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
                    textData = "";
                }
                if (options.cdataTagName) {
                    const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
                    currentNode.addChild(childNode);
                    currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
                    if (tagExp) {
                        childNode.val = tagExp;
                    }
                } else {
                    currentNode.val = (currentNode.val || "") + (tagExp || "");
                }
                i = closeIndex + 2;
            } else {
                const result = closingIndexForOpeningTag(xmlData, i + 1);
                let tagExp = result.data;
                const closeIndex = result.index;
                const separatorIndex = tagExp.indexOf(" ");
                let tagName = tagExp;
                let shouldBuildAttributesMap = true;
                if (separatorIndex !== -1) {
                    tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
                    tagExp = tagExp.substr(separatorIndex + 1);
                }
                if (options.ignoreNameSpace) {
                    const colonIndex = tagName.indexOf(":");
                    if (colonIndex !== -1) {
                        tagName = tagName.substr(colonIndex + 1);
                        shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
                    }
                }
                if (currentNode && textData) {
                    if (currentNode.tagname !== "!xml") {
                        currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
                    }
                }
                if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                    if (tagName[tagName.length - 1] === "/") {
                        tagName = tagName.substr(0, tagName.length - 1);
                        tagExp = tagName;
                    } else {
                        tagExp = tagExp.substr(0, tagExp.length - 1);
                    }
                    const childNode = new xmlNode(tagName, currentNode, "");
                    if (tagName !== tagExp) {
                        childNode.attrsMap = buildAttributesMap(tagExp, options);
                    }
                    currentNode.addChild(childNode);
                } else {
                    const childNode = new xmlNode(tagName, currentNode);
                    if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
                        childNode.startIndex = closeIndex;
                    }
                    if (tagName !== tagExp && shouldBuildAttributesMap) {
                        childNode.attrsMap = buildAttributesMap(tagExp, options);
                    }
                    currentNode.addChild(childNode);
                    currentNode = childNode;
                }
                textData = "";
                i = closeIndex;
            }
        } else {
            textData += xmlData[i];
        }
    }
    return xmlObj;
};
function closingIndexForOpeningTag(data, i) {
    let attrBoundary;
    let tagExp = "";
    for(let index = i; index < data.length; index++){
        let ch = data[index];
        if (attrBoundary) {
            if (ch === attrBoundary) attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
            attrBoundary = ch;
        } else if (ch === ">") {
            return {
                data: tagExp,
                index
            };
        } else if (ch === "	") {
            ch = " ";
        }
        tagExp += ch;
    }
}
function findClosingIndex(xmlData, str, i, errMsg) {
    const closingIndex = xmlData.indexOf(str, i);
    if (closingIndex === -1) {
        throw new Error(errMsg);
    } else {
        return closingIndex + str.length - 1;
    }
}
var getTraversalObj_1 = getTraversalObj;
var xmlstr2xmlnode = {
    defaultOptions: defaultOptions_1,
    props: props_1,
    getTraversalObj: getTraversalObj_1
};
const defaultOptions$1 = {
    allowBooleanAttributes: false
};
const props$1 = [
    "allowBooleanAttributes"
];
var validate = function(xmlData, options) {
    options = util.buildOptions(options, defaultOptions$1, props$1);
    const tags = [];
    let tagFound = false;
    let reachedRoot = false;
    if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
    }
    for(let i = 0; i < xmlData.length; i++){
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
            i += 2;
            i = readPI(xmlData, i);
            if (i.err) return i;
        } else if (xmlData[i] === "<") {
            let tagStartPos = i;
            i++;
            if (xmlData[i] === "!") {
                i = readCommentAndCDATA(xmlData, i);
                continue;
            } else {
                let closingTag = false;
                if (xmlData[i] === "/") {
                    closingTag = true;
                    i++;
                }
                let tagName = "";
                for(; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++){
                    tagName += xmlData[i];
                }
                tagName = tagName.trim();
                if (tagName[tagName.length - 1] === "/") {
                    tagName = tagName.substring(0, tagName.length - 1);
                    i--;
                }
                if (!validateTagName(tagName)) {
                    let msg;
                    if (tagName.trim().length === 0) {
                        msg = "Invalid space after '<'.";
                    } else {
                        msg = "Tag '" + tagName + "' is an invalid name.";
                    }
                    return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
                }
                const result = readAttributeStr(xmlData, i);
                if (result === false) {
                    return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
                }
                let attrStr = result.value;
                i = result.index;
                if (attrStr[attrStr.length - 1] === "/") {
                    const attrStrStart = i - attrStr.length;
                    attrStr = attrStr.substring(0, attrStr.length - 1);
                    const isValid = validateAttributeString(attrStr, options);
                    if (isValid === true) {
                        tagFound = true;
                    } else {
                        return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
                    }
                } else if (closingTag) {
                    if (!result.tagClosed) {
                        return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
                    } else if (attrStr.trim().length > 0) {
                        return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
                    } else {
                        const otg = tags.pop();
                        if (tagName !== otg.tagName) {
                            let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                            return getErrorObject("InvalidTag", "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.", getLineNumberForPosition(xmlData, tagStartPos));
                        }
                        if (tags.length == 0) {
                            reachedRoot = true;
                        }
                    }
                } else {
                    const isValid = validateAttributeString(attrStr, options);
                    if (isValid !== true) {
                        return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
                    }
                    if (reachedRoot === true) {
                        return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
                    } else {
                        tags.push({
                            tagName,
                            tagStartPos
                        });
                    }
                    tagFound = true;
                }
                for(i++; i < xmlData.length; i++){
                    if (xmlData[i] === "<") {
                        if (xmlData[i + 1] === "!") {
                            i++;
                            i = readCommentAndCDATA(xmlData, i);
                            continue;
                        } else if (xmlData[i + 1] === "?") {
                            i = readPI(xmlData, ++i);
                            if (i.err) return i;
                        } else {
                            break;
                        }
                    } else if (xmlData[i] === "&") {
                        const afterAmp = validateAmpersand(xmlData, i);
                        if (afterAmp == -1) return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                        i = afterAmp;
                    }
                }
                if (xmlData[i] === "<") {
                    i--;
                }
            }
        } else {
            if (xmlData[i] === " " || xmlData[i] === "	" || xmlData[i] === "\n" || xmlData[i] === "\r") {
                continue;
            }
            return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
    }
    if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
    } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
    } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t)=>t.tagName
        ), null, 4).replace(/\r?\n/g, "") + "' found.", {
            line: 1,
            col: 1
        });
    }
    return true;
};
function readPI(xmlData, i) {
    const start = i;
    for(; i < xmlData.length; i++){
        if (xmlData[i] == "?" || xmlData[i] == " ") {
            const tagname = xmlData.substr(start, i - start);
            if (i > 5 && tagname === "xml") {
                return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
            } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
                i++;
                break;
            } else {
                continue;
            }
        }
    }
    return i;
}
function readCommentAndCDATA(xmlData, i) {
    if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for(i += 3; i < xmlData.length; i++){
            if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
                i += 2;
                break;
            }
        }
    } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for(i += 8; i < xmlData.length; i++){
            if (xmlData[i] === "<") {
                angleBracketsCount++;
            } else if (xmlData[i] === ">") {
                angleBracketsCount--;
                if (angleBracketsCount === 0) {
                    break;
                }
            }
        }
    } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for(i += 8; i < xmlData.length; i++){
            if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
                i += 2;
                break;
            }
        }
    }
    return i;
}
const doubleQuote = '"';
const singleQuote = "'";
function readAttributeStr(xmlData, i) {
    let attrStr = "";
    let startChar = "";
    let tagClosed = false;
    for(; i < xmlData.length; i++){
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
            if (startChar === "") {
                startChar = xmlData[i];
            } else if (startChar !== xmlData[i]) ;
            else {
                startChar = "";
            }
        } else if (xmlData[i] === ">") {
            if (startChar === "") {
                tagClosed = true;
                break;
            }
        }
        attrStr += xmlData[i];
    }
    if (startChar !== "") {
        return false;
    }
    return {
        value: attrStr,
        index: i,
        tagClosed
    };
}
const validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
function validateAttributeString(attrStr, options) {
    const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
    const attrNames = {
    };
    for(let i = 0; i < matches.length; i++){
        if (matches[i][1].length === 0) {
            return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
            return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
            return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
            attrNames[attrName] = 1;
        } else {
            return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
    }
    return true;
}
function validateNumberAmpersand(xmlData, i) {
    let re = /\d/;
    if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
    }
    for(; i < xmlData.length; i++){
        if (xmlData[i] === ";") return i;
        if (!xmlData[i].match(re)) break;
    }
    return -1;
}
function validateAmpersand(xmlData, i) {
    i++;
    if (xmlData[i] === ";") return -1;
    if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
    }
    let count = 0;
    for(; i < xmlData.length; i++, count++){
        if (xmlData[i].match(/\w/) && count < 20) continue;
        if (xmlData[i] === ";") break;
        return -1;
    }
    return i;
}
function getErrorObject(code, message, lineNumber) {
    return {
        err: {
            code,
            msg: message,
            line: lineNumber.line || lineNumber,
            col: lineNumber.col
        }
    };
}
function validateAttrName(attrName) {
    return util.isName(attrName);
}
function validateTagName(tagname) {
    return util.isName(tagname);
}
function getLineNumberForPosition(xmlData, index) {
    const lines = xmlData.substring(0, index).split(/\r?\n/);
    return {
        line: lines.length,
        col: lines[lines.length - 1].length + 1
    };
}
function getPositionFromMatch(match) {
    return match.startIndex + match[1].length;
}
var validator = {
    validate
};
const __char = function(a) {
    return String.fromCharCode(a);
};
const chars = {
    nilChar: __char(176),
    missingChar: __char(201),
    nilPremitive: __char(175),
    missingPremitive: __char(200),
    emptyChar: __char(178),
    emptyValue: __char(177),
    boundryChar: __char(179),
    objStart: __char(198),
    arrStart: __char(204),
    arrayEnd: __char(185)
};
const charsArr = [
    chars.nilChar,
    chars.nilPremitive,
    chars.missingChar,
    chars.missingPremitive,
    chars.boundryChar,
    chars.emptyChar,
    chars.emptyValue,
    chars.arrayEnd,
    chars.objStart,
    chars.arrStart
];
const _e = function(node, e_schema, options) {
    if (typeof e_schema === "string") {
        if (node && node[0] && node[0].val !== void 0) {
            return getValue(node[0].val);
        } else {
            return getValue(node);
        }
    } else {
        const hasValidData = hasData(node);
        if (hasValidData === true) {
            let str = "";
            if (Array.isArray(e_schema)) {
                str += chars.arrStart;
                const itemSchema = e_schema[0];
                const arr_len = node.length;
                if (typeof itemSchema === "string") {
                    for(let arr_i = 0; arr_i < arr_len; arr_i++){
                        const r = getValue(node[arr_i].val);
                        str = processValue(str, r);
                    }
                } else {
                    for(let arr_i = 0; arr_i < arr_len; arr_i++){
                        const r = _e(node[arr_i], itemSchema, options);
                        str = processValue(str, r);
                    }
                }
                str += chars.arrayEnd;
            } else {
                str += chars.objStart;
                const keys = Object.keys(e_schema);
                if (Array.isArray(node)) {
                    node = node[0];
                }
                for(let i in keys){
                    const key = keys[i];
                    let r;
                    if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
                        r = _e(node.attrsMap[key], e_schema[key], options);
                    } else if (key === options.textNodeName) {
                        r = _e(node.val, e_schema[key], options);
                    } else {
                        r = _e(node.child[key], e_schema[key], options);
                    }
                    str = processValue(str, r);
                }
            }
            return str;
        } else {
            return hasValidData;
        }
    }
};
const getValue = function(a) {
    switch(a){
        case void 0:
            return chars.missingPremitive;
        case null:
            return chars.nilPremitive;
        case "":
            return chars.emptyValue;
        default:
            return a;
    }
};
const processValue = function(str, r) {
    if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
        str += chars.boundryChar;
    }
    return str + r;
};
const isAppChar = function(ch) {
    return charsArr.indexOf(ch) !== -1;
};
function hasData(jObj) {
    if (jObj === void 0) {
        return chars.missingChar;
    } else if (jObj === null) {
        return chars.nilChar;
    } else if (jObj.child && Object.keys(jObj.child).length === 0 && (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)) {
        return chars.emptyChar;
    } else {
        return true;
    }
}
const buildOptions$1 = util.buildOptions;
const convert2nimn = function(node, e_schema, options) {
    options = buildOptions$1(options, xmlstr2xmlnode.defaultOptions, xmlstr2xmlnode.props);
    return _e(node, e_schema, options);
};
var convert2nimn_1 = convert2nimn;
var nimndata = {
    convert2nimn: convert2nimn_1
};
const buildOptions$2 = util.buildOptions;
const convertToJsonString = function(node, options) {
    options = buildOptions$2(options, xmlstr2xmlnode.defaultOptions, xmlstr2xmlnode.props);
    options.indentBy = options.indentBy || "";
    return _cToJsonStr(node, options);
};
const _cToJsonStr = function(node, options, level) {
    let jObj = "{";
    const keys = Object.keys(node.child);
    for(let index = 0; index < keys.length; index++){
        const tagname = keys[index];
        if (node.child[tagname] && node.child[tagname].length > 1) {
            jObj += '"' + tagname + '" : [ ';
            for(let tag in node.child[tagname]){
                jObj += _cToJsonStr(node.child[tagname][tag], options) + " , ";
            }
            jObj = jObj.substr(0, jObj.length - 1) + " ] ";
        } else {
            jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + " ,";
        }
    }
    util.merge(jObj, node.attrsMap);
    if (util.isEmptyObject(jObj)) {
        return util.isExist(node.val) ? node.val : "";
    } else {
        if (util.isExist(node.val)) {
            if (!(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
                jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
            }
        }
    }
    if (jObj[jObj.length - 1] === ",") {
        jObj = jObj.substr(0, jObj.length - 2);
    }
    return jObj + "}";
};
function stringval(v) {
    if (v === true || v === false || !isNaN(v)) {
        return v;
    } else {
        return '"' + v + '"';
    }
}
var convertToJsonString_1 = convertToJsonString;
var node2json_str = {
    convertToJsonString: convertToJsonString_1
};
const buildOptions$3 = util.buildOptions;
const defaultOptions$2 = {
    attributeNamePrefix: "@_",
    attrNodeName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    cdataTagName: false,
    cdataPositionChar: "\\c",
    format: false,
    indentBy: "  ",
    supressEmptyNode: false,
    tagValueProcessor: function(a) {
        return a;
    },
    attrValueProcessor: function(a) {
        return a;
    }
};
const props$2 = [
    "attributeNamePrefix",
    "attrNodeName",
    "textNodeName",
    "ignoreAttributes",
    "cdataTagName",
    "cdataPositionChar",
    "format",
    "indentBy",
    "supressEmptyNode",
    "tagValueProcessor",
    "attrValueProcessor",
    "rootNodeName"
];
function Parser(options) {
    this.options = buildOptions$3(options, defaultOptions$2, props$2);
    if (this.options.ignoreAttributes || this.options.attrNodeName) {
        this.isAttribute = function() {
            return false;
        };
    } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
    }
    if (this.options.cdataTagName) {
        this.isCDATA = isCDATA;
    } else {
        this.isCDATA = function() {
            return false;
        };
    }
    this.replaceCDATAstr = replaceCDATAstr;
    this.replaceCDATAarr = replaceCDATAarr;
    this.processTextOrObjNode = processTextOrObjNode;
    if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
    } else {
        this.indentate = function() {
            return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
    }
    if (this.options.supressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
    } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
    }
    this.buildTextValNode = buildTextValNode;
    this.buildObjectNode = buildObjectNode;
}
Parser.prototype.parse = function(jObj) {
    if (Array.isArray(jObj) && this.options.rootNodeName && this.options.rootNodeName.length > 1) {
        jObj = {
            [this.options.rootNodeName]: jObj
        };
    }
    return this.j2x(jObj, 0).val;
};
Parser.prototype.j2x = function(jObj, level) {
    let attrStr = "";
    let val = "";
    for(let key in jObj){
        if (typeof jObj[key] === "undefined") ;
        else if (jObj[key] === null) {
            val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
            val += this.buildTextNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
            const attr = this.isAttribute(key);
            if (attr) {
                attrStr += " " + attr + '="' + this.options.attrValueProcessor("" + jObj[key]) + '"';
            } else if (this.isCDATA(key)) {
                if (jObj[this.options.textNodeName]) {
                    val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
                } else {
                    val += this.replaceCDATAstr("", jObj[key]);
                }
            } else {
                if (key === this.options.textNodeName) {
                    if (jObj[this.options.cdataTagName]) ;
                    else {
                        val += this.options.tagValueProcessor("" + jObj[key]);
                    }
                } else {
                    val += this.buildTextNode(jObj[key], key, "", level);
                }
            }
        } else if (Array.isArray(jObj[key])) {
            if (this.isCDATA(key)) {
                val += this.indentate(level);
                if (jObj[this.options.textNodeName]) {
                    val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
                } else {
                    val += this.replaceCDATAarr("", jObj[key]);
                }
            } else {
                const arrLen = jObj[key].length;
                for(let j = 0; j < arrLen; j++){
                    const item = jObj[key][j];
                    if (typeof item === "undefined") ;
                    else if (item === null) {
                        val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
                    } else if (typeof item === "object") {
                        val += this.processTextOrObjNode(item, key, level);
                    } else {
                        val += this.buildTextNode(item, key, "", level);
                    }
                }
            }
        } else {
            if (this.options.attrNodeName && key === this.options.attrNodeName) {
                const Ks = Object.keys(jObj[key]);
                const L = Ks.length;
                for(let j = 0; j < L; j++){
                    attrStr += " " + Ks[j] + '="' + this.options.attrValueProcessor("" + jObj[key][Ks[j]]) + '"';
                }
            } else {
                val += this.processTextOrObjNode(jObj[key], key, level);
            }
        }
    }
    return {
        attrStr,
        val
    };
};
function processTextOrObjNode(object, key, level) {
    const result = this.j2x(object, level + 1);
    if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextNode(result.val, key, result.attrStr, level);
    } else {
        return this.buildObjNode(result.val, key, result.attrStr, level);
    }
}
function replaceCDATAstr(str, cdata) {
    str = this.options.tagValueProcessor("" + str);
    if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata + "]]" + this.tagEndChar;
    } else {
        return str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata + "]]" + this.tagEndChar);
    }
}
function replaceCDATAarr(str, cdata) {
    str = this.options.tagValueProcessor("" + str);
    if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata.join("]]><![CDATA[") + "]]" + this.tagEndChar;
    } else {
        for(let v in cdata){
            str = str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata[v] + "]]>");
        }
        return str + this.newLine;
    }
}
function buildObjectNode(val, key, attrStr, level) {
    if (attrStr && val.indexOf("<") === -1) {
        return this.indentate(level) + "<" + key + attrStr + ">" + val + "</" + key + this.tagEndChar;
    } else {
        return this.indentate(level) + "<" + key + attrStr + this.tagEndChar + val + this.indentate(level) + "</" + key + this.tagEndChar;
    }
}
function buildEmptyObjNode(val, key, attrStr, level) {
    if (val !== "") {
        return this.buildObjectNode(val, key, attrStr, level);
    } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
    }
}
function buildTextValNode(val, key, attrStr, level) {
    return this.indentate(level) + "<" + key + attrStr + ">" + this.options.tagValueProcessor(val) + "</" + key + this.tagEndChar;
}
function buildEmptyTextNode(val, key, attrStr, level) {
    if (val !== "") {
        return this.buildTextValNode(val, key, attrStr, level);
    } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
    }
}
function indentate(level) {
    return this.options.indentBy.repeat(level);
}
function isAttribute(name) {
    if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
    } else {
        return false;
    }
}
function isCDATA(name) {
    return name === this.options.cdataTagName;
}
var json2xml = Parser;
var parser = createCommonjsModule(function(module, exports) {
    const x2xmlnode = xmlstr2xmlnode;
    const buildOptions2 = util.buildOptions;
    exports.parse = function(xmlData, givenOptions = {
    }, validationOption) {
        if (validationOption) {
            if (validationOption === true) validationOption = {
            };
            const result = validator.validate(xmlData, validationOption);
            if (result !== true) {
                throw Error(result.err.msg);
            }
        }
        if (givenOptions.parseTrueNumberOnly && givenOptions.parseNodeValue !== false && !givenOptions.numParseOptions) {
            givenOptions.numParseOptions = {
                leadingZeros: false
            };
        }
        let options = buildOptions2(givenOptions, x2xmlnode.defaultOptions, x2xmlnode.props);
        const traversableObj = xmlstr2xmlnode.getTraversalObj(xmlData, options);
        return node2json.convertToJson(traversableObj, options);
    };
    exports.convertTonimn = nimndata.convert2nimn;
    exports.getTraversalObj = xmlstr2xmlnode.getTraversalObj;
    exports.convertToJson = node2json.convertToJson;
    exports.convertToJsonString = node2json_str.convertToJsonString;
    exports.validate = validator.validate;
    exports.j2xParser = json2xml;
    exports.parseToNimn = function(xmlData, schema, options) {
        return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
    };
});
parser.convertToJson;
parser.convertToJsonString;
parser.convertTonimn;
var getTraversalObj$1 = parser.getTraversalObj;
parser.j2xParser;
parser.parse;
parser.parseToNimn;
parser.validate;
function checkMatches(name, value, pattern) {
    if (!pattern.test(value)) throw new Error(`Bad ${name}: ${value}`);
    return value;
}
function checkEqual(name, value, expected) {
    if (value !== expected) throw new Error(`Bad ${name}: ${value}, expected ${expected}`);
}
function checkTrue(name, value, test) {
    if (!test) throw new Error(`Bad ${name}: ${value}`);
}
async function fetchCommentsForUrl(url, opts) {
    const { fetchActivityPub  } = opts;
    const obj = await fetchActivityPub(url);
    if (!obj) return undefined;
    const note = obj;
    const rootComment = initCommentFromObjectOrLink(note);
    await collectComments(note, rootComment, opts);
    return rootComment;
}
async function collectComments(note, comment, opts) {
    const { keepGoing , fetchActivityPub  } = opts;
    const fetched = new Set();
    if (note.replies) {
        if (note.replies.first) {
            if (typeof note.replies.first === 'object' && note.replies.first.type === 'CollectionPage') {
                if (note.replies.first.items && note.replies.first.items.length > 0) {
                    await collectItems(note.replies.first.items, comment, opts);
                    if (!keepGoing()) return;
                }
                if (note.replies.first.next) {
                    if (typeof note.replies.first.next === 'string') {
                        const url = note.replies.first.next;
                        let obj = await fetchActivityPub(url);
                        if (!keepGoing()) return;
                        fetched.add(url);
                        console.log(JSON.stringify(obj, undefined, 2));
                        let keepCollecting = true;
                        while(keepCollecting){
                            const page = obj;
                            if (page.items) {
                                await collectItems(page.items, comment, opts);
                                if (!keepGoing()) return;
                            }
                            if ((page.items?.length || 0) === 0) keepCollecting = false;
                            if (page.next) {
                                if (typeof page.next === 'string') {
                                    if (fetched.has(page.next)) {
                                        keepCollecting = false;
                                    } else {
                                        obj = await fetchActivityPub(page.next);
                                        if (!keepGoing()) return;
                                        fetched.add(url);
                                    }
                                } else {
                                    throw new Error(`TODO: page.next not implemented ${page.next}`);
                                }
                            } else {
                                keepCollecting = false;
                            }
                        }
                    } else {
                        throw new Error(`TODO: first.next not implemented ${note.replies.first.next}`);
                    }
                }
            } else {
                throw new Error(`TODO: first type not implemented ${note.replies.first}`);
            }
        } else {
            throw new Error(`TODO: first not found, implement items`);
        }
    }
}
async function collectItems(items, comment, opts) {
    for (const item of items){
        if (typeof item === 'string') {
            const reply = await fetchCommentsForUrl(item, opts);
            if (reply) {
                comment.replies.push(reply);
            }
        } else {
            const reply = initCommentFromObjectOrLink(item);
            comment.replies.push(reply);
            await collectComments(item, reply, opts);
        }
    }
}
function initCommentFromObjectOrLink(object) {
    if (object.type !== 'Note') throw new Error(`TODO: item type not implemented ${JSON.stringify(object)}`);
    const { attributedTo , content  } = object;
    if (typeof attributedTo !== 'string') throw new Error(`TODO: attributedTo type not implemented ${object}`);
    if (typeof content !== 'string') throw new Error(`TODO: content type not implemented ${object}`);
    return {
        attributedTo,
        content,
        replies: []
    };
}
function parseFeedXml(xml) {
    return getTraversalObj$1(xml, {
        ignoreAttributes: false
    });
}
function validateFeedXml(xml, callbacks) {
    if (xml.tagname !== '!xml') return callbacks.onError(xml, `Bad xml.tagname: ${xml.tagname}`);
    if (Object.keys(xml.attrsMap).length > 0) return callbacks.onError(xml, `Bad xml.attrsMap: ${xml.attrsMap}`);
    const namespaces = new XmlNamespaces();
    const rss = getSingleChild(xml, 'rss', callbacks);
    if (!rss) return;
    validateRss(rss, callbacks, namespaces);
    checkEqual('namespaces.stackSize', namespaces.stackSize, 0);
}
function computeAttributeMap(attrsMap) {
    let map;
    for (const [name, value] of Object.entries(attrsMap)){
        if (!name.startsWith('@_')) throw new Error(`Bad attrsMap name: ${name}, ${attrsMap}`);
        map = map || new Map();
        map.set(name.substring(2), value);
    }
    return map || EMPTY_MAP;
}
const EMPTY_MAP = new Map();
const EMPTY_XML_NODE_ARRAY = [];
function getSingleChild(node, tagName, callbacks) {
    const children = node.child[tagName] || [];
    if (children.length !== 1) {
        callbacks.onError(node, `Expected single ${tagName} child element under ${node.tagname}, found ${children.length}`);
        return undefined;
    }
    return children[0];
}
function validateRss(rss, callbacks, namespaces) {
    const attrs = namespaces.push(rss.attrsMap);
    try {
        if (rss.tagname !== 'rss') return callbacks.onError(rss, `Bad rss.tagname: ${rss.tagname}`);
        const version = attrs.get('version');
        if (version !== '2.0') callbacks.onWarning(rss, `Bad rss.version: ${version}, expected 2.0`);
        const channel = getSingleChild(rss, 'channel', callbacks);
        if (!channel) return;
        validateChannel(channel, callbacks, namespaces);
    } finally{
        namespaces.pop();
    }
}
function validateChannel(channel, callbacks, namespaces) {
    namespaces.push(channel.attrsMap);
    try {
        if (channel.tagname !== 'channel') return callbacks.onError(channel, `Bad channel.tagname: ${channel.tagname}`);
        for (const item of channel.child.item || []){
            validateItem(item, callbacks, namespaces);
            break;
        }
    } finally{
        namespaces.pop();
    }
}
function validateItem(item, callbacks, namespaces) {
    namespaces.push(item.attrsMap);
    try {
        const socialInteracts = findChildElements(item, namespaces, {
            name: 'socialInteract',
            namespaceUri: 'https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md'
        });
        for (const socialInteract of socialInteracts){
            callbacks.onInfo(socialInteract, 'Found socialInteract!');
        }
    } finally{
        namespaces.pop();
    }
}
function findChildElements(node, namespaces, qname) {
    let rt;
    for (const [name, value] of Object.entries(node.child)){
        const childQname = computeQname(name, namespaces);
        if (childQname.name === qname.name && childQname.namespaceUri === qname.namespaceUri) {
            rt = rt || [];
            rt.push(...value);
        }
    }
    return rt || EMPTY_XML_NODE_ARRAY;
}
function computeQname(nameWithOptionalPrefix, namespaces) {
    const i = nameWithOptionalPrefix.indexOf(':');
    if (i < 0) return {
        name: nameWithOptionalPrefix,
        namespaceUri: namespaces.findNamespaceUri('')
    };
    return {
        name: nameWithOptionalPrefix.substring(i + 1),
        namespaceUri: namespaces.getNamespaceUri(nameWithOptionalPrefix.substring(0, i))
    };
}
class XmlNamespaces {
    stack = [];
    get stackSize() {
        return this.stack.length;
    }
    push(attrsMap) {
        const attrs = computeAttributeMap(attrsMap);
        let map;
        for (const [name, value] of attrs.entries()){
            if (name === 'xmlns') {
                map = map || new Map();
                map.set('', value);
            } else if (name.startsWith('xmlns:')) {
                map = map || new Map();
                const prefix = name.substring(6);
                map.set(prefix, value);
            }
        }
        this.stack.push(map || EMPTY_MAP);
        return attrs;
    }
    pop() {
        this.stack.pop();
    }
    findNamespaceUri(prefix) {
        for(let i = this.stack.length - 1; i >= 0; i--){
            const rt = this.stack[i].get(prefix);
            if (rt) return rt;
        }
        return undefined;
    }
    getNamespaceUri(prefix) {
        for(let i = this.stack.length - 1; i >= 0; i--){
            const rt = this.stack[i].get(prefix);
            if (rt) return rt;
        }
        throw new Error(`getNamespaceUri: prefix not found: ${prefix}`);
    }
}
class ValidatorAppVM {
    _validating = false;
    get validating() {
        return this._validating;
    }
    _status = '';
    get status() {
        return this._status;
    }
    _messages = [];
    get messages() {
        return this._messages;
    }
    _xml;
    get xml() {
        return this._xml;
    }
    onChange = ()=>{
    };
    start() {
    }
    validateFeed(feedUrlStr) {
        feedUrlStr = feedUrlStr.trim();
        this._status = 'Validating ' + feedUrlStr;
        this._messages.splice(0);
        this._xml = undefined;
        this._validating = true;
        this.onChange();
        this.validateFeedAsync(feedUrlStr).catch((e)=>{
            this._messages.push({
                type: 'error',
                text: e.message
            });
            this._validating = false;
            this.onChange();
        });
    }
    cancelValidation() {
        if (!this._validating) return;
        this._validating = false;
        this.onChange();
    }
    async validateFeedAsync(feedUrlStr) {
        const activityPubRootCommentNodeUrls = [];
        try {
            if (feedUrlStr === '') throw new Error(`Bad url: <blank>`);
            const feedUrl = tryParseUrl(feedUrlStr);
            if (!feedUrl) throw new Error(`Bad url: ${feedUrlStr}`);
            checkMatches('feedUrl.protocol', feedUrl.protocol, /^https?:$/);
            feedUrl.searchParams.set('_t', Date.now().toString());
            const headers = {
                'Accept-Encoding': 'gzip',
                'User-Agent': navigator.userAgent,
                'Cache-Control': 'no-store'
            };
            const { response , side , fetchTime  } = await localOrRemoteFetch(feedUrl.toString(), {
                headers
            });
            if (!this._validating) return;
            if (side === 'remote') {
                this._messages.push({
                    type: 'warning',
                    text: `Local feed fetch failed: CORS issue?`
                });
            }
            checkEqual('response.status', response.status, 200);
            this._messages.push({
                type: 'info',
                text: `Response status=${response.status}, content-type=${response.headers.get('Content-Type')}, content-length=${response.headers.get('Content-Length')}`
            });
            let start = Date.now();
            const text = await response.text();
            if (!this._validating) return;
            const readTime = Date.now() - start;
            start = Date.now();
            let parseTime = 0;
            let xml;
            try {
                xml = parseFeedXml(text);
            } catch (e) {
                this._messages.push({
                    type: 'error',
                    text: `Xml parse failed: ${e.message}`
                });
            } finally{
                parseTime = Date.now() - start;
            }
            this._xml = xml;
            console.log(xml);
            let validateTime;
            if (xml) {
                start = Date.now();
                const callbacks = {
                    onError: (_, message)=>{
                        console.error(message);
                        this._messages.push({
                            type: 'error',
                            text: message
                        });
                    },
                    onWarning: (_, message)=>{
                        console.warn(message);
                        this._messages.push({
                            type: 'warning',
                            text: message
                        });
                    },
                    onInfo: (node, message)=>{
                        console.info(message);
                        this._messages.push({
                            type: 'info',
                            text: message
                        });
                        if (message.includes('socialInteract')) {
                            if (node.val && node.val !== '' && computeAttributeMap(node.attrsMap).get('platform') === 'activitypub') {
                                activityPubRootCommentNodeUrls.push(node.val);
                            }
                        }
                    }
                };
                validateFeedXml(xml, callbacks);
                validateTime = Date.now() - start;
            }
            this._messages.push({
                type: 'info',
                text: JSON.stringify({
                    fetchTime,
                    readTime,
                    parseTime,
                    validateTime,
                    textLength: text.length
                })
            });
            if (activityPubRootCommentNodeUrls.length > 0) {
                for (const activityPubRootCommentNodeUrl of activityPubRootCommentNodeUrls){
                    this._status = `Validating activityPubRootCommentNodeUrl: ${activityPubRootCommentNodeUrl}`;
                    this.onChange();
                    const keepGoing = ()=>this._validating
                    ;
                    const remoteOnlyOrigins = new Set();
                    const computeUseSide = (url)=>remoteOnlyOrigins.has(new URL(url).origin) ? 'remote' : undefined
                    ;
                    const fetchActivityPub = async (url)=>{
                        let { obj , side  } = await localOrRemoteFetchFetchActivityPub(url, computeUseSide(url));
                        if (!keepGoing()) return undefined;
                        console.log(JSON.stringify(obj, undefined, 2));
                        if (url.includes('/api/v1/statuses') && typeof obj.uri === 'string') {
                            url = obj.uri;
                            const res = await localOrRemoteFetchFetchActivityPub(url, computeUseSide(url));
                            if (!keepGoing()) return undefined;
                            obj = res.obj;
                            side = res.side;
                            console.log(JSON.stringify(obj, undefined, 2));
                        }
                        if (side === 'remote') {
                            const origin = new URL(url).origin;
                            if (!remoteOnlyOrigins.has(origin)) {
                                this._messages.push({
                                    type: 'warning',
                                    text: `Local ActivityPub fetch failed (CORS issue?): ${url}`
                                });
                                this.onChange();
                                remoteOnlyOrigins.add(origin);
                            }
                        }
                        return obj;
                    };
                    const rootComment = await fetchCommentsForUrl(activityPubRootCommentNodeUrl, {
                        keepGoing,
                        fetchActivityPub
                    });
                    console.log('comments', JSON.stringify(rootComment, undefined, 2));
                }
            }
        } catch (e1) {
            this._messages.push({
                type: 'error',
                text: e1.message
            });
        } finally{
            this._status = '';
            this.onChange();
        }
    }
}
function tryParseUrl(url) {
    try {
        return new URL(url);
    } catch  {
        return undefined;
    }
}
function sleep(ms) {
    return new Promise((resolve)=>setTimeout(resolve, ms)
    );
}
async function localOrRemoteFetchFetchActivityPub(url, useSide) {
    await sleep(500);
    const { response , side  } = await localOrRemoteFetch(url, {
        headers: {
            'Accept': 'application/activity+json'
        },
        useSide
    });
    checkEqual('res.status', response.status, 200);
    console.log([
        ...response.headers
    ].map((v)=>v.join(': ')
    ));
    const contentType = response.headers.get('Content-Type');
    checkTrue('res.contentType', contentType, (contentType || '').includes('json'));
    const obj = await response.json();
    return {
        obj,
        side
    };
}
async function localOrRemoteFetch(url, opts = {
}) {
    const { headers , useSide  } = opts;
    if (useSide !== 'remote') {
        try {
            console.log(`local fetch: ${url}`);
            const start = Date.now();
            const response = await fetch(url, {
                headers
            });
            return {
                fetchTime: Date.now() - start,
                side: 'local',
                response
            };
        } catch (e) {
            console.log('Failed to local fetch, trying remote', e);
        }
    }
    console.log(`remote fetch: ${url}`);
    const start = Date.now();
    const response = await fetch(`/f/${url.replaceAll(/[^a-zA-Z0-9.]+/g, '_')}`, {
        method: 'POST',
        body: JSON.stringify({
            url,
            headers
        })
    });
    return {
        fetchTime: Date.now() - start,
        side: 'remote',
        response
    };
}
const FORM_HTML = html`
<form id="input">
    <input id="feed-url" type="text" placeholder="Feed url" autocomplete="on" required>
    <button id="submit" type="submit">Validate</button>
</form>
<output id="status"></output>
`;
const FORM_CSS = css`

#input {
    display: flex;
}

#feed-url {
    font-size: 1rem;
    padding: 0.5rem;
    flex-grow: 1;
}

#input button {
    padding: 0.5rem 1rem;
}

`;
function initForm(document, vm) {
    const inputForm = document.getElementById('input');
    const feedUrlInput = document.getElementById('feed-url');
    const submitButton = document.getElementById('submit');
    const statusOutput = document.getElementById('status');
    inputForm.onsubmit = (e)=>{
        e.preventDefault();
        if (vm.validating) {
            vm.cancelValidation();
        } else {
            vm.validateFeed(feedUrlInput.value);
        }
    };
    feedUrlInput.focus();
    return ()=>{
        statusOutput.textContent = vm.status;
        submitButton.textContent = vm.validating ? 'Cancel' : 'Validate';
    };
}
const MESSAGES_HTML = html`
<output id="messages"></output>
`;
const MESSAGES_CSS = css`

`;
function initMessages(document, vm) {
    const messagesOutput = document.getElementById('messages');
    return ()=>{
        LitElement.render(MESSAGE_HTML(vm), messagesOutput);
    };
}
const MESSAGE_HTML = (vm)=>html`
    ${vm.messages.map((message)=>html`<div>${message.text}</div>`
    )}`
;
class Theme {
    static primaryColor200Hex = '#69b7ff';
    static primaryColor300Hex = '#0088FF';
    static primaryColor900Hex = '#005ccb';
    static backgroundColorHex = '#121212';
    static textColorHex = '#eeeeee';
    static sansSerifFontFamily = '-apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif';
    static monospaceFontFamily = 'Menlo, "SF Mono", "Andale Mono", "Roboto Mono", Monaco, monospace';
}
const XML_HTML = html`
<output id="xml"></output>
`;
const XML_CSS = css`
#xml {
    font-family: ${unsafeCSS(Theme.monospaceFontFamily)};
    font-size: 0.75rem;
    line-height: 1rem;
    color: ${unsafeCSS(Theme.textColorHex)};
}

#xml a {
    color: ${unsafeCSS(Theme.primaryColor300Hex)};
    text-underline-offset: 0.2rem;
    text-decoration: none;
}

@media (hover: hover) {
    #xml a:hover {
        text-decoration: underline;
    }
}

#xml .indent {
    margin-left: 1rem;
}

#xml .indent2 {
    margin-left: 2rem;
}

summary.empty { list-style: none; }
summary.empty::-webkit-details-marker { display: none; }

`;
function initXml(document, vm) {
    const xmlOutput = document.getElementById('xml');
    return ()=>{
        const xml = vm.xml;
        if (xml !== _renderedXml) {
            renderXml(xml, xmlOutput);
            _renderedXml = xml;
        }
    };
}
let _renderedXml;
function renderXml(xml, xmlOutput) {
    while(xmlOutput.firstChild)xmlOutput.removeChild(xmlOutput.firstChild);
    if (xml) renderNode(xml, xmlOutput, 0, new Set(), undefined);
}
function renderNode(node, containerElement, level, context, itemNumber) {
    const details = document.createElement('details');
    const text = node.val || '';
    details.open = !context.has('found-item') || text.length > 0;
    if (level > 0) details.classList.add('indent');
    const summary = document.createElement('summary');
    const atts = computeAttributeMap(node.attrsMap);
    renderTextPieces(summary, '<', node.tagname, ...[
        ...atts.entries()
    ].flatMap((v)=>[
            ` ${v[0]}="`,
            v[1],
            '"'
        ]
    ), '>', itemNumber ? ` #${itemNumber}` : '');
    details.appendChild(summary);
    let childCount = 0;
    if (text.length > 0) {
        const div = document.createElement('div');
        renderTextPieces(div, text);
        div.classList.add('indent2');
        details.appendChild(div);
        childCount++;
    }
    for (const [_, value] of Object.entries(node.child)){
        let itemNumber = 1;
        for (const child of value){
            renderNode(child, details, level + 1, context, value.length > 1 ? itemNumber : undefined);
            childCount++;
            itemNumber++;
        }
    }
    if (childCount === 0) summary.classList.add('empty', 'indent');
    containerElement.appendChild(details);
    if (node.tagname === 'item') context.add('found-item');
}
function renderTextPieces(element, ...pieces) {
    for (const piece of pieces){
        if (/^https?:\/\/[^\s)]+$/.test(piece)) {
            const a = document.createElement('a');
            a.href = piece;
            a.target = '_blank';
            a.rel = 'noreferrer noopener nofollow';
            a.appendChild(document.createTextNode(piece));
            element.appendChild(a);
        } else {
            element.appendChild(document.createTextNode(piece));
        }
    }
}
const appModuleScript = document.getElementById('app-module-script');
function setAppState(appState) {
    appModuleScript.dataset.state = appState;
}
setAppState('starting');
const appCss = css`
main {
    margin: 2rem;
    display: flex;
    flex-direction: column;
}
`;
const appHtml = html`
<main>
${FORM_HTML}
${MESSAGES_HTML}
${XML_HTML}
</main>
`;
function appendStylesheets(cssTexts) {
    const styleSheet = document.createElement('style');
    styleSheet.type = 'text/css';
    styleSheet.textContent = cssTexts.join('\n\n');
    document.head.appendChild(styleSheet);
}
appendStylesheets([
    appCss.cssText,
    FORM_CSS.cssText,
    MESSAGES_CSS.cssText,
    XML_CSS.cssText, 
]);
LitElement.render(appHtml, document.body);
function parseStaticData() {
    const script = document.getElementById('static-data-script');
    const data = JSON.parse(script.text);
    const version = typeof data.version === 'string' ? data.version : undefined;
    const flags = typeof data.flags === 'string' ? data.flags : undefined;
    const debug = typeof data.debug === 'object' ? data.debug : undefined;
    return {
        version,
        flags,
        debug
    };
}
parseStaticData();
const vm = new ValidatorAppVM();
const updateForm = initForm(document, vm);
const updateMessages = initMessages(document, vm);
const updateXml = initXml(document, vm);
vm.onChange = ()=>{
    updateForm();
    updateMessages();
    updateXml();
};
vm.start();
setAppState('started');
';