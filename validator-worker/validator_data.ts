export const VALIDATOR_APP_HASH = 'cdc397c511d41ecfbe2102fd7882ec5236acbcf2';
export const VALIDATOR_APP_B64 = 'Ly8gZGVuby1mbXQtaWdub3JlLWZpbGUKLy8gZGVuby1saW50LWlnbm9yZS1maWxlCi8vIFRoaXMgY29kZSB3YXMgYnVuZGxlZCB1c2luZyBgZGVubyBidW5kbGVgIGFuZCBpdCdzIG5vdCByZWNvbW1lbmRlZCB0byBlZGl0IGl0IG1hbnVhbGx5Cgpjb25zdCBkaXJlY3RpdmVzID0gbmV3IFdlYWtNYXAoKTsKY29uc3QgaXNEaXJlY3RpdmUgPSAobyk9PnsKICAgIHJldHVybiB0eXBlb2YgbyA9PT0gImZ1bmN0aW9uIiAmJiBkaXJlY3RpdmVzLmhhcyhvKTsKfTsKY29uc3QgaXNDRVBvbHlmaWxsID0gdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgJiYgd2luZG93LmN1c3RvbUVsZW1lbnRzICE9IG51bGwgJiYgd2luZG93LmN1c3RvbUVsZW1lbnRzLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2sgIT09IHZvaWQgMDsKY29uc3QgcmVwYXJlbnROb2RlcyA9IChjb250YWluZXIsIHN0YXJ0LCBlbmQgPSBudWxsLCBiZWZvcmUgPSBudWxsKT0+ewogICAgd2hpbGUoc3RhcnQgIT09IGVuZCl7CiAgICAgICAgY29uc3QgbiA9IHN0YXJ0Lm5leHRTaWJsaW5nOwogICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3RhcnQsIGJlZm9yZSk7CiAgICAgICAgc3RhcnQgPSBuOwogICAgfQp9Owpjb25zdCByZW1vdmVOb2RlcyA9IChjb250YWluZXIsIHN0YXJ0LCBlbmQgPSBudWxsKT0+ewogICAgd2hpbGUoc3RhcnQgIT09IGVuZCl7CiAgICAgICAgY29uc3QgbiA9IHN0YXJ0Lm5leHRTaWJsaW5nOwogICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChzdGFydCk7CiAgICAgICAgc3RhcnQgPSBuOwogICAgfQp9Owpjb25zdCBub0NoYW5nZSA9IHt9Owpjb25zdCBub3RoaW5nID0ge307CmNvbnN0IG1hcmtlciA9IGB7e2xpdC0ke1N0cmluZyhNYXRoLnJhbmRvbSgpKS5zbGljZSgyKX19fWA7CmNvbnN0IG5vZGVNYXJrZXIgPSBgPCEtLSR7bWFya2VyfS0tPmA7CmNvbnN0IG1hcmtlclJlZ2V4ID0gbmV3IFJlZ0V4cChgJHttYXJrZXJ9fCR7bm9kZU1hcmtlcn1gKTsKY29uc3QgYm91bmRBdHRyaWJ1dGVTdWZmaXggPSAiJGxpdCQiOwpjbGFzcyBUZW1wbGF0ZSB7CiAgICBjb25zdHJ1Y3RvcihyZXN1bHQsIGVsZW1lbnQpewogICAgICAgIHRoaXMucGFydHMgPSBbXTsKICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgIGNvbnN0IG5vZGVzVG9SZW1vdmUgPSBbXTsKICAgICAgICBjb25zdCBzdGFjayA9IFtdOwogICAgICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZWxlbWVudC5jb250ZW50LCAxMzMsIG51bGwsIGZhbHNlKTsKICAgICAgICBsZXQgbGFzdFBhcnRJbmRleCA9IDA7CiAgICAgICAgbGV0IGluZGV4ID0gLTE7CiAgICAgICAgbGV0IHBhcnRJbmRleCA9IDA7CiAgICAgICAgY29uc3QgeyBzdHJpbmdzICwgdmFsdWVzOiB7IGxlbmd0aCAgfSAgfSA9IHJlc3VsdDsKICAgICAgICB3aGlsZShwYXJ0SW5kZXggPCBsZW5ndGgpewogICAgICAgICAgICBjb25zdCBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7CiAgICAgICAgICAgIGlmIChub2RlID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBzdGFjay5wb3AoKTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGluZGV4Kys7CiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7CiAgICAgICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGVzKCkpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGVuZ3RoOiBsZW5ndGgyICB9ID0gYXR0cmlidXRlczsKICAgICAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwOwogICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGgyOyBpKyspewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5kc1dpdGgoYXR0cmlidXRlc1tpXS5uYW1lLCBib3VuZEF0dHJpYnV0ZVN1ZmZpeCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgd2hpbGUoY291bnQtLSA+IDApewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdGb3JQYXJ0ID0gc3RyaW5nc1twYXJ0SW5kZXhdOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKHN0cmluZ0ZvclBhcnQpWzJdOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVMb29rdXBOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpICsgYm91bmRBdHRyaWJ1dGVTdWZmaXg7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZVZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZUxvb2t1cE5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0aWNzID0gYXR0cmlidXRlVmFsdWUuc3BsaXQobWFya2VyUmVnZXgpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImF0dHJpYnV0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdzOiBzdGF0aWNzCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXggKz0gc3RhdGljcy5sZW5ndGggLSAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChub2RlLnRhZ05hbWUgPT09ICJURU1QTEFURSIpIHsKICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5vZGUpOwogICAgICAgICAgICAgICAgICAgIHdhbGtlci5jdXJyZW50Tm9kZSA9IG5vZGUuY29udGVudDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7CiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbm9kZS5kYXRhOwogICAgICAgICAgICAgICAgaWYgKGRhdGEuaW5kZXhPZihtYXJrZXIpID49IDApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nczIgPSBkYXRhLnNwbGl0KG1hcmtlclJlZ2V4KTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBzdHJpbmdzMi5sZW5ndGggLSAxOwogICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsYXN0SW5kZXg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnNlcnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gc3RyaW5nczJbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09PSAiIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gY3JlYXRlTWFya2VyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCAmJiBlbmRzV2l0aChtYXRjaFsyXSwgYm91bmRBdHRyaWJ1dGVTdWZmaXgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgbWF0Y2guaW5kZXgpICsgbWF0Y2hbMV0gKyBtYXRjaFsyXS5zbGljZSgwLCAtYm91bmRBdHRyaWJ1dGVTdWZmaXgubGVuZ3RoKSArIG1hdGNoWzNdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShpbnNlcnQsIG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIm5vZGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6ICsraW5kZXgKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmdzMltsYXN0SW5kZXhdID09PSAiIikgewogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNyZWF0ZU1hcmtlcigpLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9IHN0cmluZ3MyW2xhc3RJbmRleF07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCArPSBsYXN0SW5kZXg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCkgewogICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gbWFya2VyKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnByZXZpb3VzU2libGluZyA9PT0gbnVsbCB8fCBpbmRleCA9PT0gbGFzdFBhcnRJbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrOwogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNyZWF0ZU1hcmtlcigpLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgbGFzdFBhcnRJbmRleCA9IGluZGV4OwogICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJub2RlIiwKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZyA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICBub2RlLmRhdGEgPSAiIjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RvUmVtb3ZlLnB1c2gobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LS07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCsrOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IC0xOwogICAgICAgICAgICAgICAgICAgIHdoaWxlKChpID0gbm9kZS5kYXRhLmluZGV4T2YobWFya2VyLCBpICsgMSkpICE9PSAtMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAibm9kZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogLTEKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCsrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IgKGNvbnN0IG4gb2Ygbm9kZXNUb1JlbW92ZSl7CiAgICAgICAgICAgIG4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKTsKICAgICAgICB9CiAgICB9Cn0KY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzdWZmaXgpPT57CiAgICBjb25zdCBpbmRleCA9IHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoOwogICAgcmV0dXJuIGluZGV4ID49IDAgJiYgc3RyLnNsaWNlKGluZGV4KSA9PT0gc3VmZml4Owp9Owpjb25zdCBpc1RlbXBsYXRlUGFydEFjdGl2ZSA9IChwYXJ0KT0+cGFydC5pbmRleCAhPT0gLTEKOwpjb25zdCBjcmVhdGVNYXJrZXIgPSAoKT0+ZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgiIikKOwpjb25zdCBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4ID0gLyhbIFx4MDlceDBhXHgwY1x4MGRdKShbXlwwLVx4MUZceDdGLVx4OUYgIic+PS9dKykoWyBceDA5XHgwYVx4MGNceDBkXSo9WyBceDA5XHgwYVx4MGNceDBkXSooPzpbXiBceDA5XHgwYVx4MGNceDBkIidgPD49XSp8IlteIl0qfCdbXiddKikpJC87CmNsYXNzIFRlbXBsYXRlSW5zdGFuY2UgewogICAgY29uc3RydWN0b3IodGVtcGxhdGUsIHByb2Nlc3Nvciwgb3B0aW9ucyl7CiAgICAgICAgdGhpcy5fX3BhcnRzID0gW107CiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlOwogICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yOwogICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7CiAgICB9CiAgICB1cGRhdGUodmFsdWVzKSB7CiAgICAgICAgbGV0IGkgPSAwOwogICAgICAgIGZvciAoY29uc3QgcGFydCBvZiB0aGlzLl9fcGFydHMpewogICAgICAgICAgICBpZiAocGFydCAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICBwYXJ0LnNldFZhbHVlKHZhbHVlc1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaSsrOwogICAgICAgIH0KICAgICAgICBmb3IgKGNvbnN0IHBhcnQxIG9mIHRoaXMuX19wYXJ0cyl7CiAgICAgICAgICAgIGlmIChwYXJ0MSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICBwYXJ0MS5jb21taXQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIF9jbG9uZSgpIHsKICAgICAgICBjb25zdCBmcmFnbWVudCA9IGlzQ0VQb2x5ZmlsbCA/IHRoaXMudGVtcGxhdGUuZWxlbWVudC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSA6IGRvY3VtZW50LmltcG9ydE5vZGUodGhpcy50ZW1wbGF0ZS5lbGVtZW50LmNvbnRlbnQsIHRydWUpOwogICAgICAgIGNvbnN0IHN0YWNrID0gW107CiAgICAgICAgY29uc3QgcGFydHMyID0gdGhpcy50ZW1wbGF0ZS5wYXJ0czsKICAgICAgICBjb25zdCB3YWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGZyYWdtZW50LCAxMzMsIG51bGwsIGZhbHNlKTsKICAgICAgICBsZXQgcGFydEluZGV4ID0gMDsKICAgICAgICBsZXQgbm9kZUluZGV4ID0gMDsKICAgICAgICBsZXQgcGFydDsKICAgICAgICBsZXQgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpOwogICAgICAgIHdoaWxlKHBhcnRJbmRleCA8IHBhcnRzMi5sZW5ndGgpewogICAgICAgICAgICBwYXJ0ID0gcGFydHMyW3BhcnRJbmRleF07CiAgICAgICAgICAgIGlmICghaXNUZW1wbGF0ZVBhcnRBY3RpdmUocGFydCkpIHsKICAgICAgICAgICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKHZvaWQgMCk7CiAgICAgICAgICAgICAgICBwYXJ0SW5kZXgrKzsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHdoaWxlKG5vZGVJbmRleCA8IHBhcnQuaW5kZXgpewogICAgICAgICAgICAgICAgbm9kZUluZGV4Kys7CiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gIlRFTVBMQVRFIikgewogICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gbm9kZS5jb250ZW50OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKChub2RlID0gd2Fsa2VyLm5leHROb2RlKCkpID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gc3RhY2sucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwYXJ0LnR5cGUgPT09ICJub2RlIikgewogICAgICAgICAgICAgICAgY29uc3QgcGFydDIgPSB0aGlzLnByb2Nlc3Nvci5oYW5kbGVUZXh0RXhwcmVzc2lvbih0aGlzLm9wdGlvbnMpOwogICAgICAgICAgICAgICAgcGFydDIuaW5zZXJ0QWZ0ZXJOb2RlKG5vZGUucHJldmlvdXNTaWJsaW5nKTsKICAgICAgICAgICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKHBhcnQyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKC4uLnRoaXMucHJvY2Vzc29yLmhhbmRsZUF0dHJpYnV0ZUV4cHJlc3Npb25zKG5vZGUsIHBhcnQubmFtZSwgcGFydC5zdHJpbmdzLCB0aGlzLm9wdGlvbnMpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJ0SW5kZXgrKzsKICAgICAgICB9CiAgICAgICAgaWYgKGlzQ0VQb2x5ZmlsbCkgewogICAgICAgICAgICBkb2N1bWVudC5hZG9wdE5vZGUoZnJhZ21lbnQpOwogICAgICAgICAgICBjdXN0b21FbGVtZW50cy51cGdyYWRlKGZyYWdtZW50KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZyYWdtZW50OwogICAgfQp9CmNvbnN0IHBvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMgJiYgdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSgibGl0LWh0bWwiLCB7CiAgICBjcmVhdGVIVE1MOiAocyk9PnMKfSk7CmNvbnN0IGNvbW1lbnRNYXJrZXIgPSBgICR7bWFya2VyfSBgOwpjbGFzcyBUZW1wbGF0ZVJlc3VsdCB7CiAgICBjb25zdHJ1Y3RvcihzdHJpbmdzLCB2YWx1ZXMsIHR5cGUsIHByb2Nlc3Nvcil7CiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5nczsKICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlczsKICAgICAgICB0aGlzLnR5cGUgPSB0eXBlOwogICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yOwogICAgfQogICAgZ2V0SFRNTCgpIHsKICAgICAgICBjb25zdCBsID0gdGhpcy5zdHJpbmdzLmxlbmd0aCAtIDE7CiAgICAgICAgbGV0IGh0bWwyID0gIiI7CiAgICAgICAgbGV0IGlzQ29tbWVudEJpbmRpbmcgPSBmYWxzZTsKICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMuc3RyaW5nc1tpXTsKICAgICAgICAgICAgY29uc3QgY29tbWVudE9wZW4gPSBzLmxhc3RJbmRleE9mKCI8IS0tIik7CiAgICAgICAgICAgIGlzQ29tbWVudEJpbmRpbmcgPSAoY29tbWVudE9wZW4gPiAtMSB8fCBpc0NvbW1lbnRCaW5kaW5nKSAmJiBzLmluZGV4T2YoIi0tPiIsIGNvbW1lbnRPcGVuICsgMSkgPT09IC0xOwogICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVNYXRjaCA9IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXguZXhlYyhzKTsKICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZU1hdGNoID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICBodG1sMiArPSBzICsgKGlzQ29tbWVudEJpbmRpbmcgPyBjb21tZW50TWFya2VyIDogbm9kZU1hcmtlcik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBodG1sMiArPSBzLnN1YnN0cigwLCBhdHRyaWJ1dGVNYXRjaC5pbmRleCkgKyBhdHRyaWJ1dGVNYXRjaFsxXSArIGF0dHJpYnV0ZU1hdGNoWzJdICsgYm91bmRBdHRyaWJ1dGVTdWZmaXggKyBhdHRyaWJ1dGVNYXRjaFszXSArIG1hcmtlcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBodG1sMiArPSB0aGlzLnN0cmluZ3NbbF07CiAgICAgICAgcmV0dXJuIGh0bWwyOwogICAgfQogICAgZ2V0VGVtcGxhdGVFbGVtZW50KCkgewogICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGVtcGxhdGUiKTsKICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmdldEhUTUwoKTsKICAgICAgICBpZiAocG9saWN5ICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgdmFsdWUgPSBwb2xpY3kuY3JlYXRlSFRNTCh2YWx1ZSk7CiAgICAgICAgfQogICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlOwogICAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgIH0KfQpjbGFzcyBTVkdUZW1wbGF0ZVJlc3VsdCBleHRlbmRzIFRlbXBsYXRlUmVzdWx0IHsKICAgIGdldEhUTUwoKSB7CiAgICAgICAgcmV0dXJuIGA8c3ZnPiR7c3VwZXIuZ2V0SFRNTCgpfTwvc3ZnPmA7CiAgICB9CiAgICBnZXRUZW1wbGF0ZUVsZW1lbnQoKSB7CiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBzdXBlci5nZXRUZW1wbGF0ZUVsZW1lbnQoKTsKICAgICAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudDsKICAgICAgICBjb25zdCBzdmdFbGVtZW50ID0gY29udGVudC5maXJzdENoaWxkOwogICAgICAgIGNvbnRlbnQucmVtb3ZlQ2hpbGQoc3ZnRWxlbWVudCk7CiAgICAgICAgcmVwYXJlbnROb2Rlcyhjb250ZW50LCBzdmdFbGVtZW50LmZpcnN0Q2hpbGQpOwogICAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgIH0KfQpjb25zdCBpc1ByaW1pdGl2ZSA9ICh2YWx1ZSk9PnsKICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCAhKHR5cGVvZiB2YWx1ZSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIHZhbHVlID09PSAiZnVuY3Rpb24iKTsKfTsKY29uc3QgaXNJdGVyYWJsZSA9ICh2YWx1ZSk9PnsKICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSB8fCAhISh2YWx1ZSAmJiB2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKTsKfTsKY2xhc3MgQXR0cmlidXRlQ29tbWl0dGVyIHsKICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpewogICAgICAgIHRoaXMuZGlydHkgPSB0cnVlOwogICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7CiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzOwogICAgICAgIHRoaXMucGFydHMgPSBbXTsKICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGggLSAxOyBpKyspewogICAgICAgICAgICB0aGlzLnBhcnRzW2ldID0gdGhpcy5fY3JlYXRlUGFydCgpOwogICAgICAgIH0KICAgIH0KICAgIF9jcmVhdGVQYXJ0KCkgewogICAgICAgIHJldHVybiBuZXcgQXR0cmlidXRlUGFydCh0aGlzKTsKICAgIH0KICAgIF9nZXRWYWx1ZSgpIHsKICAgICAgICBjb25zdCBzdHJpbmdzID0gdGhpcy5zdHJpbmdzOwogICAgICAgIGNvbnN0IGwgPSBzdHJpbmdzLmxlbmd0aCAtIDE7CiAgICAgICAgY29uc3QgcGFydHMyID0gdGhpcy5wYXJ0czsKICAgICAgICBpZiAobCA9PT0gMSAmJiBzdHJpbmdzWzBdID09PSAiIiAmJiBzdHJpbmdzWzFdID09PSAiIikgewogICAgICAgICAgICBjb25zdCB2ID0gcGFydHMyWzBdLnZhbHVlOwogICAgICAgICAgICBpZiAodHlwZW9mIHYgPT09ICJzeW1ib2wiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHYpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gInN0cmluZyIgfHwgIWlzSXRlcmFibGUodikpIHsKICAgICAgICAgICAgICAgIHJldHVybiB2OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxldCB0ZXh0ID0gIiI7CiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgIHRleHQgKz0gc3RyaW5nc1tpXTsKICAgICAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzMltpXTsKICAgICAgICAgICAgaWYgKHBhcnQgIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgY29uc3QgdiA9IHBhcnQudmFsdWU7CiAgICAgICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUodikgfHwgIWlzSXRlcmFibGUodikpIHsKICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiB2ID09PSAic3RyaW5nIiA/IHYgOiBTdHJpbmcodik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB2KXsKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSB0eXBlb2YgdCA9PT0gInN0cmluZyIgPyB0IDogU3RyaW5nKHQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0ZXh0ICs9IHN0cmluZ3NbbF07CiAgICAgICAgcmV0dXJuIHRleHQ7CiAgICB9CiAgICBjb21taXQoKSB7CiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHsKICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgdGhpcy5fZ2V0VmFsdWUoKSk7CiAgICAgICAgfQogICAgfQp9CmNsYXNzIEF0dHJpYnV0ZVBhcnQgewogICAgY29uc3RydWN0b3IoY29tbWl0dGVyKXsKICAgICAgICB0aGlzLnZhbHVlID0gdm9pZCAwOwogICAgICAgIHRoaXMuY29tbWl0dGVyID0gY29tbWl0dGVyOwogICAgfQogICAgc2V0VmFsdWUodmFsdWUpIHsKICAgICAgICBpZiAodmFsdWUgIT09IG5vQ2hhbmdlICYmICghaXNQcmltaXRpdmUodmFsdWUpIHx8IHZhbHVlICE9PSB0aGlzLnZhbHVlKSkgewogICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7CiAgICAgICAgICAgIGlmICghaXNEaXJlY3RpdmUodmFsdWUpKSB7CiAgICAgICAgICAgICAgICB0aGlzLmNvbW1pdHRlci5kaXJ0eSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBjb21taXQoKSB7CiAgICAgICAgd2hpbGUoaXNEaXJlY3RpdmUodGhpcy52YWx1ZSkpewogICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUyID0gdGhpcy52YWx1ZTsKICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5vQ2hhbmdlOwogICAgICAgICAgICBkaXJlY3RpdmUyKHRoaXMpOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gbm9DaGFuZ2UpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0aGlzLmNvbW1pdHRlci5jb21taXQoKTsKICAgIH0KfQpjbGFzcyBOb2RlUGFydCB7CiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKXsKICAgICAgICB0aGlzLnZhbHVlID0gdm9pZCAwOwogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKICAgIH0KICAgIGFwcGVuZEludG8oY29udGFpbmVyKSB7CiAgICAgICAgdGhpcy5zdGFydE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpOwogICAgICAgIHRoaXMuZW5kTm9kZSA9IGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVNYXJrZXIoKSk7CiAgICB9CiAgICBpbnNlcnRBZnRlck5vZGUocmVmKSB7CiAgICAgICAgdGhpcy5zdGFydE5vZGUgPSByZWY7CiAgICAgICAgdGhpcy5lbmROb2RlID0gcmVmLm5leHRTaWJsaW5nOwogICAgfQogICAgYXBwZW5kSW50b1BhcnQocGFydCkgewogICAgICAgIHBhcnQuX19pbnNlcnQodGhpcy5zdGFydE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7CiAgICAgICAgcGFydC5fX2luc2VydCh0aGlzLmVuZE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7CiAgICB9CiAgICBpbnNlcnRBZnRlclBhcnQocmVmKSB7CiAgICAgICAgcmVmLl9faW5zZXJ0KHRoaXMuc3RhcnROb2RlID0gY3JlYXRlTWFya2VyKCkpOwogICAgICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5lbmROb2RlOwogICAgICAgIHJlZi5lbmROb2RlID0gdGhpcy5zdGFydE5vZGU7CiAgICB9CiAgICBzZXRWYWx1ZSh2YWx1ZSkgewogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2YWx1ZTsKICAgIH0KICAgIGNvbW1pdCgpIHsKICAgICAgICBpZiAodGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHdoaWxlKGlzRGlyZWN0aXZlKHRoaXMuX19wZW5kaW5nVmFsdWUpKXsKICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlMiA9IHRoaXMuX19wZW5kaW5nVmFsdWU7CiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTsKICAgICAgICAgICAgZGlyZWN0aXZlMih0aGlzKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlOwogICAgICAgIGlmICh2YWx1ZSA9PT0gbm9DaGFuZ2UpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy52YWx1ZSkgewogICAgICAgICAgICAgICAgdGhpcy5fX2NvbW1pdFRleHQodmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVzdWx0KSB7CiAgICAgICAgICAgIHRoaXMuX19jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSk7CiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE5vZGUpIHsKICAgICAgICAgICAgdGhpcy5fX2NvbW1pdE5vZGUodmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAoaXNJdGVyYWJsZSh2YWx1ZSkpIHsKICAgICAgICAgICAgdGhpcy5fX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKTsKICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBub3RoaW5nKSB7CiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBub3RoaW5nOwogICAgICAgICAgICB0aGlzLmNsZWFyKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5fX2NvbW1pdFRleHQodmFsdWUpOwogICAgICAgIH0KICAgIH0KICAgIF9faW5zZXJ0KG5vZGUpIHsKICAgICAgICB0aGlzLmVuZE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgdGhpcy5lbmROb2RlKTsKICAgIH0KICAgIF9fY29tbWl0Tm9kZSh2YWx1ZSkgewogICAgICAgIGlmICh0aGlzLnZhbHVlID09PSB2YWx1ZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRoaXMuY2xlYXIoKTsKICAgICAgICB0aGlzLl9faW5zZXJ0KHZhbHVlKTsKICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7CiAgICB9CiAgICBfX2NvbW1pdFRleHQodmFsdWUpIHsKICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUubmV4dFNpYmxpbmc7CiAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gIiIgOiB2YWx1ZTsKICAgICAgICBjb25zdCB2YWx1ZUFzU3RyaW5nID0gdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIiA/IHZhbHVlIDogU3RyaW5nKHZhbHVlKTsKICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5lbmROb2RlLnByZXZpb3VzU2libGluZyAmJiBub2RlLm5vZGVUeXBlID09PSAzKSB7CiAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZhbHVlQXNTdHJpbmc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5fX2NvbW1pdE5vZGUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWVBc1N0cmluZykpOwogICAgICAgIH0KICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7CiAgICB9CiAgICBfX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHZhbHVlKSB7CiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGVGYWN0b3J5KHZhbHVlKTsKICAgICAgICBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlSW5zdGFuY2UgJiYgdGhpcy52YWx1ZS50ZW1wbGF0ZSA9PT0gdGVtcGxhdGUpIHsKICAgICAgICAgICAgdGhpcy52YWx1ZS51cGRhdGUodmFsdWUudmFsdWVzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBUZW1wbGF0ZUluc3RhbmNlKHRlbXBsYXRlLCB2YWx1ZS5wcm9jZXNzb3IsIHRoaXMub3B0aW9ucyk7CiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gaW5zdGFuY2UuX2Nsb25lKCk7CiAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSh2YWx1ZS52YWx1ZXMpOwogICAgICAgICAgICB0aGlzLl9fY29tbWl0Tm9kZShmcmFnbWVudCk7CiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBpbnN0YW5jZTsKICAgICAgICB9CiAgICB9CiAgICBfX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKSB7CiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7CiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBbXTsKICAgICAgICAgICAgdGhpcy5jbGVhcigpOwogICAgICAgIH0KICAgICAgICBjb25zdCBpdGVtUGFydHMgPSB0aGlzLnZhbHVlOwogICAgICAgIGxldCBwYXJ0SW5kZXggPSAwOwogICAgICAgIGxldCBpdGVtUGFydDsKICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpewogICAgICAgICAgICBpdGVtUGFydCA9IGl0ZW1QYXJ0c1twYXJ0SW5kZXhdOwogICAgICAgICAgICBpZiAoaXRlbVBhcnQgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgaXRlbVBhcnQgPSBuZXcgTm9kZVBhcnQodGhpcy5vcHRpb25zKTsKICAgICAgICAgICAgICAgIGl0ZW1QYXJ0cy5wdXNoKGl0ZW1QYXJ0KTsKICAgICAgICAgICAgICAgIGlmIChwYXJ0SW5kZXggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBpdGVtUGFydC5hcHBlbmRJbnRvUGFydCh0aGlzKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaXRlbVBhcnQuaW5zZXJ0QWZ0ZXJQYXJ0KGl0ZW1QYXJ0c1twYXJ0SW5kZXggLSAxXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaXRlbVBhcnQuc2V0VmFsdWUoaXRlbSk7CiAgICAgICAgICAgIGl0ZW1QYXJ0LmNvbW1pdCgpOwogICAgICAgICAgICBwYXJ0SW5kZXgrKzsKICAgICAgICB9CiAgICAgICAgaWYgKHBhcnRJbmRleCA8IGl0ZW1QYXJ0cy5sZW5ndGgpIHsKICAgICAgICAgICAgaXRlbVBhcnRzLmxlbmd0aCA9IHBhcnRJbmRleDsKICAgICAgICAgICAgdGhpcy5jbGVhcihpdGVtUGFydCAmJiBpdGVtUGFydC5lbmROb2RlKTsKICAgICAgICB9CiAgICB9CiAgICBjbGVhcihzdGFydE5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSkgewogICAgICAgIHJlbW92ZU5vZGVzKHRoaXMuc3RhcnROb2RlLnBhcmVudE5vZGUsIHN0YXJ0Tm9kZS5uZXh0U2libGluZywgdGhpcy5lbmROb2RlKTsKICAgIH0KfQpjbGFzcyBCb29sZWFuQXR0cmlidXRlUGFydCB7CiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKXsKICAgICAgICB0aGlzLnZhbHVlID0gdm9pZCAwOwogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2b2lkIDA7CiAgICAgICAgaWYgKHN0cmluZ3MubGVuZ3RoICE9PSAyIHx8IHN0cmluZ3NbMF0gIT09ICIiIHx8IHN0cmluZ3NbMV0gIT09ICIiKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQm9vbGVhbiBhdHRyaWJ1dGVzIGNhbiBvbmx5IGNvbnRhaW4gYSBzaW5nbGUgZXhwcmVzc2lvbiIpOwogICAgICAgIH0KICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5nczsKICAgIH0KICAgIHNldFZhbHVlKHZhbHVlKSB7CiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZhbHVlOwogICAgfQogICAgY29tbWl0KCkgewogICAgICAgIHdoaWxlKGlzRGlyZWN0aXZlKHRoaXMuX19wZW5kaW5nVmFsdWUpKXsKICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlMiA9IHRoaXMuX19wZW5kaW5nVmFsdWU7CiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTsKICAgICAgICAgICAgZGlyZWN0aXZlMih0aGlzKTsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuX19wZW5kaW5nVmFsdWUgPT09IG5vQ2hhbmdlKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgdmFsdWUgPSAhIXRoaXMuX19wZW5kaW5nVmFsdWU7CiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsICIiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7CiAgICAgICAgfQogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTsKICAgIH0KfQpjbGFzcyBQcm9wZXJ0eUNvbW1pdHRlciBleHRlbmRzIEF0dHJpYnV0ZUNvbW1pdHRlciB7CiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKXsKICAgICAgICBzdXBlcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKTsKICAgICAgICB0aGlzLnNpbmdsZSA9IHN0cmluZ3MubGVuZ3RoID09PSAyICYmIHN0cmluZ3NbMF0gPT09ICIiICYmIHN0cmluZ3NbMV0gPT09ICIiOwogICAgfQogICAgX2NyZWF0ZVBhcnQoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9wZXJ0eVBhcnQodGhpcyk7CiAgICB9CiAgICBfZ2V0VmFsdWUoKSB7CiAgICAgICAgaWYgKHRoaXMuc2luZ2xlKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnRzWzBdLnZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3VwZXIuX2dldFZhbHVlKCk7CiAgICB9CiAgICBjb21taXQoKSB7CiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHsKICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXSA9IHRoaXMuX2dldFZhbHVlKCk7CiAgICAgICAgfQogICAgfQp9CmNsYXNzIFByb3BlcnR5UGFydCBleHRlbmRzIEF0dHJpYnV0ZVBhcnQgewp9CmxldCBldmVudE9wdGlvbnNTdXBwb3J0ZWQgPSBmYWxzZTsKKCgpPT57CiAgICB0cnkgewogICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7CiAgICAgICAgICAgIGdldCBjYXB0dXJlICgpIHsKICAgICAgICAgICAgICAgIGV2ZW50T3B0aW9uc1N1cHBvcnRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJ0ZXN0Iiwgb3B0aW9ucywgb3B0aW9ucyk7CiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoInRlc3QiLCBvcHRpb25zLCBvcHRpb25zKTsKICAgIH0gY2F0Y2ggKF9lKSB7fQp9KSgpOwpjbGFzcyBFdmVudFBhcnQgewogICAgY29uc3RydWN0b3IoZWxlbWVudCwgZXZlbnROYW1lLCBldmVudENvbnRleHQpewogICAgICAgIHRoaXMudmFsdWUgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHZvaWQgMDsKICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lOwogICAgICAgIHRoaXMuZXZlbnRDb250ZXh0ID0gZXZlbnRDb250ZXh0OwogICAgICAgIHRoaXMuX19ib3VuZEhhbmRsZUV2ZW50ID0gKGUpPT50aGlzLmhhbmRsZUV2ZW50KGUpCiAgICAgICAgOwogICAgfQogICAgc2V0VmFsdWUodmFsdWUpIHsKICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7CiAgICB9CiAgICBjb21taXQoKSB7CiAgICAgICAgd2hpbGUoaXNEaXJlY3RpdmUodGhpcy5fX3BlbmRpbmdWYWx1ZSkpewogICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUyID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTsKICAgICAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlOwogICAgICAgICAgICBkaXJlY3RpdmUyKHRoaXMpOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5fX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBuZXdMaXN0ZW5lciA9IHRoaXMuX19wZW5kaW5nVmFsdWU7CiAgICAgICAgY29uc3Qgb2xkTGlzdGVuZXIgPSB0aGlzLnZhbHVlOwogICAgICAgIGNvbnN0IHNob3VsZFJlbW92ZUxpc3RlbmVyID0gbmV3TGlzdGVuZXIgPT0gbnVsbCB8fCBvbGRMaXN0ZW5lciAhPSBudWxsICYmIChuZXdMaXN0ZW5lci5jYXB0dXJlICE9PSBvbGRMaXN0ZW5lci5jYXB0dXJlIHx8IG5ld0xpc3RlbmVyLm9uY2UgIT09IG9sZExpc3RlbmVyLm9uY2UgfHwgbmV3TGlzdGVuZXIucGFzc2l2ZSAhPT0gb2xkTGlzdGVuZXIucGFzc2l2ZSk7CiAgICAgICAgY29uc3Qgc2hvdWxkQWRkTGlzdGVuZXIgPSBuZXdMaXN0ZW5lciAhPSBudWxsICYmIChvbGRMaXN0ZW5lciA9PSBudWxsIHx8IHNob3VsZFJlbW92ZUxpc3RlbmVyKTsKICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlTGlzdGVuZXIpIHsKICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsIHRoaXMuX19ib3VuZEhhbmRsZUV2ZW50LCB0aGlzLl9fb3B0aW9ucyk7CiAgICAgICAgfQogICAgICAgIGlmIChzaG91bGRBZGRMaXN0ZW5lcikgewogICAgICAgICAgICB0aGlzLl9fb3B0aW9ucyA9IGdldE9wdGlvbnMobmV3TGlzdGVuZXIpOwogICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX19vcHRpb25zKTsKICAgICAgICB9CiAgICAgICAgdGhpcy52YWx1ZSA9IG5ld0xpc3RlbmVyOwogICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTsKICAgIH0KICAgIGhhbmRsZUV2ZW50KGV2ZW50KSB7CiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIHRoaXMudmFsdWUuY2FsbCh0aGlzLmV2ZW50Q29udGV4dCB8fCB0aGlzLmVsZW1lbnQsIGV2ZW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnZhbHVlLmhhbmRsZUV2ZW50KGV2ZW50KTsKICAgICAgICB9CiAgICB9Cn0KY29uc3QgZ2V0T3B0aW9ucyA9IChvKT0+byAmJiAoZXZlbnRPcHRpb25zU3VwcG9ydGVkID8gewogICAgICAgIGNhcHR1cmU6IG8uY2FwdHVyZSwKICAgICAgICBwYXNzaXZlOiBvLnBhc3NpdmUsCiAgICAgICAgb25jZTogby5vbmNlCiAgICB9IDogby5jYXB0dXJlKQo7CmNsYXNzIERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciB7CiAgICBoYW5kbGVBdHRyaWJ1dGVFeHByZXNzaW9ucyhlbGVtZW50LCBuYW1lLCBzdHJpbmdzLCBvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcHJlZml4ID0gbmFtZVswXTsKICAgICAgICBpZiAocHJlZml4ID09PSAiLiIpIHsKICAgICAgICAgICAgY29uc3QgY29tbWl0dGVyMiA9IG5ldyBQcm9wZXJ0eUNvbW1pdHRlcihlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBzdHJpbmdzKTsKICAgICAgICAgICAgcmV0dXJuIGNvbW1pdHRlcjIucGFydHM7CiAgICAgICAgfQogICAgICAgIGlmIChwcmVmaXggPT09ICJAIikgewogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgbmV3IEV2ZW50UGFydChlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBvcHRpb25zLmV2ZW50Q29udGV4dCkKICAgICAgICAgICAgXTsKICAgICAgICB9CiAgICAgICAgaWYgKHByZWZpeCA9PT0gIj8iKSB7CiAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICBuZXcgQm9vbGVhbkF0dHJpYnV0ZVBhcnQoZWxlbWVudCwgbmFtZS5zbGljZSgxKSwgc3RyaW5ncykKICAgICAgICAgICAgXTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29tbWl0dGVyID0gbmV3IEF0dHJpYnV0ZUNvbW1pdHRlcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKTsKICAgICAgICByZXR1cm4gY29tbWl0dGVyLnBhcnRzOwogICAgfQogICAgaGFuZGxlVGV4dEV4cHJlc3Npb24ob3B0aW9ucykgewogICAgICAgIHJldHVybiBuZXcgTm9kZVBhcnQob3B0aW9ucyk7CiAgICB9Cn0KY29uc3QgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yID0gbmV3IERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvcigpOwpmdW5jdGlvbiB0ZW1wbGF0ZUZhY3RvcnkocmVzdWx0KSB7CiAgICBsZXQgdGVtcGxhdGVDYWNoZSA9IHRlbXBsYXRlQ2FjaGVzLmdldChyZXN1bHQudHlwZSk7CiAgICBpZiAodGVtcGxhdGVDYWNoZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgdGVtcGxhdGVDYWNoZSA9IHsKICAgICAgICAgICAgc3RyaW5nc0FycmF5OiBuZXcgV2Vha01hcCgpLAogICAgICAgICAgICBrZXlTdHJpbmc6IG5ldyBNYXAoKQogICAgICAgIH07CiAgICAgICAgdGVtcGxhdGVDYWNoZXMuc2V0KHJlc3VsdC50eXBlLCB0ZW1wbGF0ZUNhY2hlKTsKICAgIH0KICAgIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LmdldChyZXN1bHQuc3RyaW5ncyk7CiAgICBpZiAodGVtcGxhdGUgIT09IHZvaWQgMCkgewogICAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgIH0KICAgIGNvbnN0IGtleSA9IHJlc3VsdC5zdHJpbmdzLmpvaW4obWFya2VyKTsKICAgIHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5rZXlTdHJpbmcuZ2V0KGtleSk7CiAgICBpZiAodGVtcGxhdGUgPT09IHZvaWQgMCkgewogICAgICAgIHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKHJlc3VsdCwgcmVzdWx0LmdldFRlbXBsYXRlRWxlbWVudCgpKTsKICAgICAgICB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5zZXQoa2V5LCB0ZW1wbGF0ZSk7CiAgICB9CiAgICB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5zZXQocmVzdWx0LnN0cmluZ3MsIHRlbXBsYXRlKTsKICAgIHJldHVybiB0ZW1wbGF0ZTsKfQpjb25zdCB0ZW1wbGF0ZUNhY2hlcyA9IG5ldyBNYXAoKTsKY29uc3QgcGFydHMgPSBuZXcgV2Vha01hcCgpOwpjb25zdCByZW5kZXIgPSAocmVzdWx0LCBjb250YWluZXIsIG9wdGlvbnMpPT57CiAgICBsZXQgcGFydCA9IHBhcnRzLmdldChjb250YWluZXIpOwogICAgaWYgKHBhcnQgPT09IHZvaWQgMCkgewogICAgICAgIHJlbW92ZU5vZGVzKGNvbnRhaW5lciwgY29udGFpbmVyLmZpcnN0Q2hpbGQpOwogICAgICAgIHBhcnRzLnNldChjb250YWluZXIsIHBhcnQgPSBuZXcgTm9kZVBhcnQoT2JqZWN0LmFzc2lnbih7CiAgICAgICAgICAgIHRlbXBsYXRlRmFjdG9yeQogICAgICAgIH0sIG9wdGlvbnMpKSk7CiAgICAgICAgcGFydC5hcHBlbmRJbnRvKGNvbnRhaW5lcik7CiAgICB9CiAgICBwYXJ0LnNldFZhbHVlKHJlc3VsdCk7CiAgICBwYXJ0LmNvbW1pdCgpOwp9OwppZiAodHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIpIHsKICAgICh3aW5kb3dbImxpdEh0bWxWZXJzaW9ucyJdIHx8ICh3aW5kb3dbImxpdEh0bWxWZXJzaW9ucyJdID0gW10pKS5wdXNoKCIxLjQuMSIpOwp9CmNvbnN0IGh0bWwgPSAoc3RyaW5ncywgLi4udmFsdWVzKT0+bmV3IFRlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgImh0bWwiLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpCjsKY29uc3Qgc3ZnID0gKHN0cmluZ3MsIC4uLnZhbHVlcyk9Pm5ldyBTVkdUZW1wbGF0ZVJlc3VsdChzdHJpbmdzLCB2YWx1ZXMsICJzdmciLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpCjsKdmFyIF9hOwp3aW5kb3cuSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSA9IChwcm9wLCBfb2JqKT0+cHJvcAo7CmNvbnN0IGRlZmF1bHRDb252ZXJ0ZXIgPSB7CiAgICB0b0F0dHJpYnV0ZSAodmFsdWUsIHR5cGUpIHsKICAgICAgICBzd2l0Y2godHlwZSl7CiAgICAgICAgICAgIGNhc2UgQm9vbGVhbjoKICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA/ICIiIDogbnVsbDsKICAgICAgICAgICAgY2FzZSBPYmplY3Q6CiAgICAgICAgICAgIGNhc2UgQXJyYXk6CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWU7CiAgICB9LAogICAgZnJvbUF0dHJpYnV0ZSAodmFsdWUsIHR5cGUpIHsKICAgICAgICBzd2l0Y2godHlwZSl7CiAgICAgICAgICAgIGNhc2UgQm9vbGVhbjoKICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbDsKICAgICAgICAgICAgY2FzZSBOdW1iZXI6CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBudWxsIDogTnVtYmVyKHZhbHVlKTsKICAgICAgICAgICAgY2FzZSBPYmplY3Q6CiAgICAgICAgICAgIGNhc2UgQXJyYXk6CiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KfTsKY29uc3Qgbm90RXF1YWwgPSAodmFsdWUsIG9sZCk9PnsKICAgIHJldHVybiBvbGQgIT09IHZhbHVlICYmIChvbGQgPT09IG9sZCB8fCB2YWx1ZSA9PT0gdmFsdWUpOwp9Owpjb25zdCBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbiA9IHsKICAgIGF0dHJpYnV0ZTogdHJ1ZSwKICAgIHR5cGU6IFN0cmluZywKICAgIGNvbnZlcnRlcjogZGVmYXVsdENvbnZlcnRlciwKICAgIHJlZmxlY3Q6IGZhbHNlLAogICAgaGFzQ2hhbmdlZDogbm90RXF1YWwKfTsKY29uc3QgU1RBVEVfSEFTX1VQREFURUQgPSAxOwpjb25zdCBTVEFURV9VUERBVEVfUkVRVUVTVEVEID0gMSA8PCAyOwpjb25zdCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX0FUVFJJQlVURSA9IDEgPDwgMzsKY29uc3QgU1RBVEVfSVNfUkVGTEVDVElOR19UT19QUk9QRVJUWSA9IDEgPDwgNDsKY29uc3QgZmluYWxpemVkID0gImZpbmFsaXplZCI7CmNsYXNzIFVwZGF0aW5nRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHsKICAgIGNvbnN0cnVjdG9yKCl7CiAgICAgICAgc3VwZXIoKTsKICAgICAgICB0aGlzLmluaXRpYWxpemUoKTsKICAgIH0KICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkgewogICAgICAgIHRoaXMuZmluYWxpemUoKTsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW107CiAgICAgICAgdGhpcy5fY2xhc3NQcm9wZXJ0aWVzLmZvckVhY2goKHYsIHApPT57CiAgICAgICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLl9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkocCwgdik7CiAgICAgICAgICAgIGlmIChhdHRyICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXAuc2V0KGF0dHIsIHApOwogICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKGF0dHIpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7CiAgICB9CiAgICBzdGF0aWMgX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpIHsKICAgICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgiX2NsYXNzUHJvcGVydGllcyIsIHRoaXMpKSkgewogICAgICAgICAgICB0aGlzLl9jbGFzc1Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7CiAgICAgICAgICAgIGNvbnN0IHN1cGVyUHJvcGVydGllcyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fY2xhc3NQcm9wZXJ0aWVzOwogICAgICAgICAgICBpZiAoc3VwZXJQcm9wZXJ0aWVzICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIHN1cGVyUHJvcGVydGllcy5mb3JFYWNoKCh2LCBrKT0+dGhpcy5fY2xhc3NQcm9wZXJ0aWVzLnNldChrLCB2KQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0eShuYW1lLCBvcHRpb25zID0gZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb24pIHsKICAgICAgICB0aGlzLl9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKTsKICAgICAgICB0aGlzLl9jbGFzc1Byb3BlcnRpZXMuc2V0KG5hbWUsIG9wdGlvbnMpOwogICAgICAgIGlmIChvcHRpb25zLm5vQWNjZXNzb3IgfHwgdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBrZXkgPSB0eXBlb2YgbmFtZSA9PT0gInN5bWJvbCIgPyBTeW1ib2woKSA6IGBfXyR7bmFtZX1gOwogICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB0aGlzLmdldFByb3BlcnR5RGVzY3JpcHRvcihuYW1lLCBrZXksIG9wdGlvbnMpOwogICAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLCBuYW1lLCBkZXNjcmlwdG9yKTsKICAgICAgICB9CiAgICB9CiAgICBzdGF0aWMgZ2V0UHJvcGVydHlEZXNjcmlwdG9yKG5hbWUsIGtleSwgb3B0aW9ucykgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGdldCAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1trZXldOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXQgKHZhbHVlKSB7CiAgICAgICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXNbbmFtZV07CiAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZUludGVybmFsKG5hbWUsIG9sZFZhbHVlLCBvcHRpb25zKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlCiAgICAgICAgfTsKICAgIH0KICAgIHN0YXRpYyBnZXRQcm9wZXJ0eU9wdGlvbnMobmFtZSkgewogICAgICAgIHJldHVybiB0aGlzLl9jbGFzc1Byb3BlcnRpZXMgJiYgdGhpcy5fY2xhc3NQcm9wZXJ0aWVzLmdldChuYW1lKSB8fCBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbjsKICAgIH0KICAgIHN0YXRpYyBmaW5hbGl6ZSgpIHsKICAgICAgICBjb25zdCBzdXBlckN0b3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7CiAgICAgICAgaWYgKCFzdXBlckN0b3IuaGFzT3duUHJvcGVydHkoZmluYWxpemVkKSkgewogICAgICAgICAgICBzdXBlckN0b3IuZmluYWxpemUoKTsKICAgICAgICB9CiAgICAgICAgdGhpc1tmaW5hbGl6ZWRdID0gdHJ1ZTsKICAgICAgICB0aGlzLl9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKTsKICAgICAgICB0aGlzLl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwID0gbmV3IE1hcCgpOwogICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoInByb3BlcnRpZXMiLCB0aGlzKSkpIHsKICAgICAgICAgICAgY29uc3QgcHJvcHMxID0gdGhpcy5wcm9wZXJ0aWVzOwogICAgICAgICAgICBjb25zdCBwcm9wS2V5cyA9IFsKICAgICAgICAgICAgICAgIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3BzMSksCiAgICAgICAgICAgICAgICAuLi50eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gImZ1bmN0aW9uIiA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcHMxKSA6IFtdCiAgICAgICAgICAgIF07CiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBwcm9wS2V5cyl7CiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVByb3BlcnR5KHAsIHByb3BzMVtwXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBzdGF0aWMgX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShuYW1lLCBvcHRpb25zKSB7CiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gb3B0aW9ucy5hdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZSA9PT0gZmFsc2UgPyB2b2lkIDAgOiB0eXBlb2YgYXR0cmlidXRlID09PSAic3RyaW5nIiA/IGF0dHJpYnV0ZSA6IHR5cGVvZiBuYW1lID09PSAic3RyaW5nIiA/IG5hbWUudG9Mb3dlckNhc2UoKSA6IHZvaWQgMDsKICAgIH0KICAgIHN0YXRpYyBfdmFsdWVIYXNDaGFuZ2VkKHZhbHVlLCBvbGQsIGhhc0NoYW5nZWQgPSBub3RFcXVhbCkgewogICAgICAgIHJldHVybiBoYXNDaGFuZ2VkKHZhbHVlLCBvbGQpOwogICAgfQogICAgc3RhdGljIF9wcm9wZXJ0eVZhbHVlRnJvbUF0dHJpYnV0ZSh2YWx1ZSwgb3B0aW9ucykgewogICAgICAgIGNvbnN0IHR5cGUgPSBvcHRpb25zLnR5cGU7CiAgICAgICAgY29uc3QgY29udmVydGVyID0gb3B0aW9ucy5jb252ZXJ0ZXIgfHwgZGVmYXVsdENvbnZlcnRlcjsKICAgICAgICBjb25zdCBmcm9tQXR0cmlidXRlID0gdHlwZW9mIGNvbnZlcnRlciA9PT0gImZ1bmN0aW9uIiA/IGNvbnZlcnRlciA6IGNvbnZlcnRlci5mcm9tQXR0cmlidXRlOwogICAgICAgIHJldHVybiBmcm9tQXR0cmlidXRlID8gZnJvbUF0dHJpYnV0ZSh2YWx1ZSwgdHlwZSkgOiB2YWx1ZTsKICAgIH0KICAgIHN0YXRpYyBfcHJvcGVydHlWYWx1ZVRvQXR0cmlidXRlKHZhbHVlLCBvcHRpb25zKSB7CiAgICAgICAgaWYgKG9wdGlvbnMucmVmbGVjdCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgdHlwZSA9IG9wdGlvbnMudHlwZTsKICAgICAgICBjb25zdCBjb252ZXJ0ZXIgPSBvcHRpb25zLmNvbnZlcnRlcjsKICAgICAgICBjb25zdCB0b0F0dHJpYnV0ZSA9IGNvbnZlcnRlciAmJiBjb252ZXJ0ZXIudG9BdHRyaWJ1dGUgfHwgZGVmYXVsdENvbnZlcnRlci50b0F0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gdG9BdHRyaWJ1dGUodmFsdWUsIHR5cGUpOwogICAgfQogICAgaW5pdGlhbGl6ZSgpIHsKICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IDA7CiAgICAgICAgdGhpcy5fdXBkYXRlUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXMpPT50aGlzLl9lbmFibGVVcGRhdGluZ1Jlc29sdmVyID0gcmVzCiAgICAgICAgKTsKICAgICAgICB0aGlzLl9jaGFuZ2VkUHJvcGVydGllcyA9IG5ldyBNYXAoKTsKICAgICAgICB0aGlzLl9zYXZlSW5zdGFuY2VQcm9wZXJ0aWVzKCk7CiAgICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlSW50ZXJuYWwoKTsKICAgIH0KICAgIF9zYXZlSW5zdGFuY2VQcm9wZXJ0aWVzKCkgewogICAgICAgIHRoaXMuY29uc3RydWN0b3IuX2NsYXNzUHJvcGVydGllcy5mb3JFYWNoKChfdiwgcCk9PnsKICAgICAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkocCkpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1twXTsKICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW3BdOwogICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMgPSBuZXcgTWFwKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMuc2V0KHAsIHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQogICAgX2FwcGx5SW5zdGFuY2VQcm9wZXJ0aWVzKCkgewogICAgICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcy5mb3JFYWNoKCh2LCBwKT0+dGhpc1twXSA9IHYKICAgICAgICApOwogICAgICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcyA9IHZvaWQgMDsKICAgIH0KICAgIGNvbm5lY3RlZENhbGxiYWNrKCkgewogICAgICAgIHRoaXMuZW5hYmxlVXBkYXRpbmcoKTsKICAgIH0KICAgIGVuYWJsZVVwZGF0aW5nKCkgewogICAgICAgIGlmICh0aGlzLl9lbmFibGVVcGRhdGluZ1Jlc29sdmVyICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgdGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlcigpOwogICAgICAgICAgICB0aGlzLl9lbmFibGVVcGRhdGluZ1Jlc29sdmVyID0gdm9pZCAwOwogICAgICAgIH0KICAgIH0KICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge30KICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlKSB7CiAgICAgICAgaWYgKG9sZCAhPT0gdmFsdWUpIHsKICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSk7CiAgICAgICAgfQogICAgfQogICAgX3Byb3BlcnR5VG9BdHRyaWJ1dGUobmFtZSwgdmFsdWUsIG9wdGlvbnMgPSBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbikgewogICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yOwogICAgICAgIGNvbnN0IGF0dHIgPSBjdG9yLl9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkobmFtZSwgb3B0aW9ucyk7CiAgICAgICAgaWYgKGF0dHIgIT09IHZvaWQgMCkgewogICAgICAgICAgICBjb25zdCBhdHRyVmFsdWUgPSBjdG9yLl9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpOwogICAgICAgICAgICBpZiAoYXR0clZhbHVlID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlIHwgU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEU7CiAgICAgICAgICAgIGlmIChhdHRyVmFsdWUgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyVmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEU7CiAgICAgICAgfQogICAgfQogICAgX2F0dHJpYnV0ZVRvUHJvcGVydHkobmFtZSwgdmFsdWUpIHsKICAgICAgICBpZiAodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX0FUVFJJQlVURSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yOwogICAgICAgIGNvbnN0IHByb3BOYW1lID0gY3Rvci5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcC5nZXQobmFtZSk7CiAgICAgICAgaWYgKHByb3BOYW1lICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKHByb3BOYW1lKTsKICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fUFJPUEVSVFk7CiAgICAgICAgICAgIHRoaXNbcHJvcE5hbWVdID0gY3Rvci5fcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpOwogICAgICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlICYgflNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fUFJPUEVSVFk7CiAgICAgICAgfQogICAgfQogICAgcmVxdWVzdFVwZGF0ZUludGVybmFsKG5hbWUsIG9sZFZhbHVlLCBvcHRpb25zKSB7CiAgICAgICAgbGV0IHNob3VsZFJlcXVlc3RVcGRhdGUgPSB0cnVlOwogICAgICAgIGlmIChuYW1lICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgY29uc3QgY3RvciA9IHRoaXMuY29uc3RydWN0b3I7CiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IGN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKG5hbWUpOwogICAgICAgICAgICBpZiAoY3Rvci5fdmFsdWVIYXNDaGFuZ2VkKHRoaXNbbmFtZV0sIG9sZFZhbHVlLCBvcHRpb25zLmhhc0NoYW5nZWQpKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLmhhcyhuYW1lKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLnNldChuYW1lLCBvbGRWYWx1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWZsZWN0ID09PSB0cnVlICYmICEodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZKSkgewogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzID0gbmV3IE1hcCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5zZXQobmFtZSwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzaG91bGRSZXF1ZXN0VXBkYXRlID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGUgJiYgc2hvdWxkUmVxdWVzdFVwZGF0ZSkgewogICAgICAgICAgICB0aGlzLl91cGRhdGVQcm9taXNlID0gdGhpcy5fZW5xdWV1ZVVwZGF0ZSgpOwogICAgICAgIH0KICAgIH0KICAgIHJlcXVlc3RVcGRhdGUobmFtZSwgb2xkVmFsdWUpIHsKICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGVJbnRlcm5hbChuYW1lLCBvbGRWYWx1ZSk7CiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlQ29tcGxldGU7CiAgICB9CiAgICBhc3luYyBfZW5xdWV1ZVVwZGF0ZSgpIHsKICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlIHwgU1RBVEVfVVBEQVRFX1JFUVVFU1RFRDsKICAgICAgICB0cnkgewogICAgICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVQcm9taXNlOwogICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wZXJmb3JtVXBkYXRlKCk7CiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7CiAgICAgICAgICAgIGF3YWl0IHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGU7CiAgICB9CiAgICBnZXQgX2hhc1JlcXVlc3RlZFVwZGF0ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9VUERBVEVfUkVRVUVTVEVEOwogICAgfQogICAgZ2V0IGhhc1VwZGF0ZWQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZVN0YXRlICYgMTsKICAgIH0KICAgIHBlcmZvcm1VcGRhdGUoKSB7CiAgICAgICAgaWYgKCF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGUpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgIHRoaXMuX2FwcGx5SW5zdGFuY2VQcm9wZXJ0aWVzKCk7CiAgICAgICAgfQogICAgICAgIGxldCBzaG91bGRVcGRhdGUgPSBmYWxzZTsKICAgICAgICBjb25zdCBjaGFuZ2VkUHJvcGVydGllcyA9IHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IHRoaXMuc2hvdWxkVXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKTsKICAgICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkgewogICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5fbWFya1VwZGF0ZWQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuX21hcmtVcGRhdGVkKCk7CiAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgICAgIGlmIChzaG91bGRVcGRhdGUpIHsKICAgICAgICAgICAgaWYgKCEodGhpcy5fdXBkYXRlU3RhdGUgJiAxKSkgewogICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX0hBU19VUERBVEVEOwogICAgICAgICAgICAgICAgdGhpcy5maXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMudXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7CiAgICAgICAgfQogICAgfQogICAgX21hcmtVcGRhdGVkKCkgewogICAgICAgIHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzID0gbmV3IE1hcCgpOwogICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfVVBEQVRFX1JFUVVFU1RFRDsKICAgIH0KICAgIGdldCB1cGRhdGVDb21wbGV0ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VXBkYXRlQ29tcGxldGUoKTsKICAgIH0KICAgIF9nZXRVcGRhdGVDb21wbGV0ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5nZXRVcGRhdGVDb21wbGV0ZSgpOwogICAgfQogICAgZ2V0VXBkYXRlQ29tcGxldGUoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZVByb21pc2U7CiAgICB9CiAgICBzaG91bGRVcGRhdGUoX2NoYW5nZWRQcm9wZXJ0aWVzKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICB1cGRhdGUoX2NoYW5nZWRQcm9wZXJ0aWVzKSB7CiAgICAgICAgaWYgKHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzICE9PSB2b2lkIDAgJiYgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuc2l6ZSA+IDApIHsKICAgICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuZm9yRWFjaCgodiwgayk9PnRoaXMuX3Byb3BlcnR5VG9BdHRyaWJ1dGUoaywgdGhpc1trXSwgdikKICAgICAgICAgICAgKTsKICAgICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMgPSB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIHRoaXMuX21hcmtVcGRhdGVkKCk7CiAgICB9CiAgICB1cGRhdGVkKF9jaGFuZ2VkUHJvcGVydGllcykge30KICAgIGZpcnN0VXBkYXRlZChfY2hhbmdlZFByb3BlcnRpZXMpIHt9Cn0KX2EgPSBmaW5hbGl6ZWQ7ClVwZGF0aW5nRWxlbWVudFtfYV0gPSB0cnVlOwpjb25zdCBFbGVtZW50UHJvdG8gPSBFbGVtZW50LnByb3RvdHlwZTsKRWxlbWVudFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnRQcm90by53ZWJraXRNYXRjaGVzU2VsZWN0b3I7CmNvbnN0IHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyA9IHdpbmRvdy5TaGFkb3dSb290ICYmICh3aW5kb3cuU2hhZHlDU1MgPT09IHZvaWQgMCB8fCB3aW5kb3cuU2hhZHlDU1MubmF0aXZlU2hhZG93KSAmJiAiYWRvcHRlZFN0eWxlU2hlZXRzIiBpbiBEb2N1bWVudC5wcm90b3R5cGUgJiYgInJlcGxhY2UiIGluIENTU1N0eWxlU2hlZXQucHJvdG90eXBlOwpjb25zdCBjb25zdHJ1Y3Rpb25Ub2tlbiA9IFN5bWJvbCgpOwpjbGFzcyBDU1NSZXN1bHQgewogICAgY29uc3RydWN0b3IoY3NzVGV4dCwgc2FmZVRva2VuKXsKICAgICAgICBpZiAoc2FmZVRva2VuICE9PSBjb25zdHJ1Y3Rpb25Ub2tlbikgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkNTU1Jlc3VsdCBpcyBub3QgY29uc3RydWN0YWJsZS4gVXNlIGB1bnNhZmVDU1NgIG9yIGBjc3NgIGluc3RlYWQuIik7CiAgICAgICAgfQogICAgICAgIHRoaXMuY3NzVGV4dCA9IGNzc1RleHQ7CiAgICB9CiAgICBnZXQgc3R5bGVTaGVldCgpIHsKICAgICAgICBpZiAodGhpcy5fc3R5bGVTaGVldCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGlmIChzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMpIHsKICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlU2hlZXQgPSBuZXcgQ1NTU3R5bGVTaGVldCgpOwogICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVTaGVldC5yZXBsYWNlU3luYyh0aGlzLmNzc1RleHQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVTaGVldCA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlU2hlZXQ7CiAgICB9CiAgICB0b1N0cmluZygpIHsKICAgICAgICByZXR1cm4gdGhpcy5jc3NUZXh0OwogICAgfQp9CmNvbnN0IHVuc2FmZUNTUyA9ICh2YWx1ZSk9PnsKICAgIHJldHVybiBuZXcgQ1NTUmVzdWx0KFN0cmluZyh2YWx1ZSksIGNvbnN0cnVjdGlvblRva2VuKTsKfTsKY29uc3QgdGV4dEZyb21DU1NSZXN1bHQgPSAodmFsdWUpPT57CiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBDU1NSZXN1bHQpIHsKICAgICAgICByZXR1cm4gdmFsdWUuY3NzVGV4dDsKICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAibnVtYmVyIikgewogICAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBWYWx1ZSBwYXNzZWQgdG8gJ2NzcycgZnVuY3Rpb24gbXVzdCBiZSBhICdjc3MnIGZ1bmN0aW9uIHJlc3VsdDogJHt2YWx1ZX0uIFVzZSAndW5zYWZlQ1NTJyB0byBwYXNzIG5vbi1saXRlcmFsIHZhbHVlcywgYnV0CiAgICAgICAgICAgIHRha2UgY2FyZSB0byBlbnN1cmUgcGFnZSBzZWN1cml0eS5gKTsKICAgIH0KfTsKY29uc3QgY3NzID0gKHN0cmluZ3MsIC4uLnZhbHVlcyk9PnsKICAgIGNvbnN0IGNzc1RleHQgPSB2YWx1ZXMucmVkdWNlKChhY2MsIHYsIGlkeCk9PmFjYyArIHRleHRGcm9tQ1NTUmVzdWx0KHYpICsgc3RyaW5nc1tpZHggKyAxXQogICAgLCBzdHJpbmdzWzBdKTsKICAgIHJldHVybiBuZXcgQ1NTUmVzdWx0KGNzc1RleHQsIGNvbnN0cnVjdGlvblRva2VuKTsKfTsKKHdpbmRvd1sibGl0RWxlbWVudFZlcnNpb25zIl0gfHwgKHdpbmRvd1sibGl0RWxlbWVudFZlcnNpb25zIl0gPSBbXSkpLnB1c2goIjIuNS4xIik7CmNvbnN0IHJlbmRlck5vdEltcGxlbWVudGVkID0ge307CmNsYXNzIExpdEVsZW1lbnQgZXh0ZW5kcyBVcGRhdGluZ0VsZW1lbnQgewogICAgc3RhdGljIGdldFN0eWxlcygpIHsKICAgICAgICByZXR1cm4gdGhpcy5zdHlsZXM7CiAgICB9CiAgICBzdGF0aWMgX2dldFVuaXF1ZVN0eWxlcygpIHsKICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCJfc3R5bGVzIiwgdGhpcykpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgdXNlclN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodXNlclN0eWxlcykpIHsKICAgICAgICAgICAgY29uc3QgYWRkU3R5bGVzID0gKHN0eWxlczIsIHNldDIpPT5zdHlsZXMyLnJlZHVjZVJpZ2h0KChzZXQzLCBzKT0+QXJyYXkuaXNBcnJheShzKSA/IGFkZFN0eWxlcyhzLCBzZXQzKSA6IChzZXQzLmFkZChzKSwgc2V0MykKICAgICAgICAgICAgICAgICwgc2V0MikKICAgICAgICAgICAgOwogICAgICAgICAgICBjb25zdCBzZXQgPSBhZGRTdHlsZXModXNlclN0eWxlcywgbmV3IFNldCgpKTsKICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gW107CiAgICAgICAgICAgIHNldC5mb3JFYWNoKCh2KT0+c3R5bGVzLnVuc2hpZnQodikKICAgICAgICAgICAgKTsKICAgICAgICAgICAgdGhpcy5fc3R5bGVzID0gc3R5bGVzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuX3N0eWxlcyA9IHVzZXJTdHlsZXMgPT09IHZvaWQgMCA/IFtdIDogWwogICAgICAgICAgICAgICAgdXNlclN0eWxlcwogICAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgICB0aGlzLl9zdHlsZXMgPSB0aGlzLl9zdHlsZXMubWFwKChzKT0+ewogICAgICAgICAgICBpZiAocyBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQgJiYgIXN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cykgewogICAgICAgICAgICAgICAgY29uc3QgY3NzVGV4dCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHMuY3NzUnVsZXMpLnJlZHVjZSgoY3NzMiwgcnVsZSk9PmNzczIgKyBydWxlLmNzc1RleHQKICAgICAgICAgICAgICAgICwgIiIpOwogICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZUNTUyhjc3NUZXh0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gczsKICAgICAgICB9KTsKICAgIH0KICAgIGluaXRpYWxpemUoKSB7CiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpOwogICAgICAgIHRoaXMuY29uc3RydWN0b3IuX2dldFVuaXF1ZVN0eWxlcygpOwogICAgICAgIHRoaXMucmVuZGVyUm9vdCA9IHRoaXMuY3JlYXRlUmVuZGVyUm9vdCgpOwogICAgICAgIGlmICh3aW5kb3cuU2hhZG93Um9vdCAmJiB0aGlzLnJlbmRlclJvb3QgaW5zdGFuY2VvZiB3aW5kb3cuU2hhZG93Um9vdCkgewogICAgICAgICAgICB0aGlzLmFkb3B0U3R5bGVzKCk7CiAgICAgICAgfQogICAgfQogICAgY3JlYXRlUmVuZGVyUm9vdCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2hTaGFkb3codGhpcy5jb25zdHJ1Y3Rvci5zaGFkb3dSb290T3B0aW9ucyk7CiAgICB9CiAgICBhZG9wdFN0eWxlcygpIHsKICAgICAgICBjb25zdCBzdHlsZXMgPSB0aGlzLmNvbnN0cnVjdG9yLl9zdHlsZXM7CiAgICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAod2luZG93LlNoYWR5Q1NTICE9PSB2b2lkIDAgJiYgIXdpbmRvdy5TaGFkeUNTUy5uYXRpdmVTaGFkb3cpIHsKICAgICAgICAgICAgd2luZG93LlNoYWR5Q1NTLlNjb3BpbmdTaGltLnByZXBhcmVBZG9wdGVkQ3NzVGV4dChzdHlsZXMubWFwKChzKT0+cy5jc3NUZXh0CiAgICAgICAgICAgICksIHRoaXMubG9jYWxOYW1lKTsKICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cykgewogICAgICAgICAgICB0aGlzLnJlbmRlclJvb3QuYWRvcHRlZFN0eWxlU2hlZXRzID0gc3R5bGVzLm1hcCgocyk9PnMgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0ID8gcyA6IHMuc3R5bGVTaGVldAogICAgICAgICAgICApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuX25lZWRzU2hpbUFkb3B0ZWRTdHlsZVNoZWV0cyA9IHRydWU7CiAgICAgICAgfQogICAgfQogICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7CiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTsKICAgICAgICBpZiAodGhpcy5oYXNVcGRhdGVkICYmIHdpbmRvdy5TaGFkeUNTUyAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHdpbmRvdy5TaGFkeUNTUy5zdHlsZUVsZW1lbnQodGhpcyk7CiAgICAgICAgfQogICAgfQogICAgdXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKSB7CiAgICAgICAgY29uc3QgdGVtcGxhdGVSZXN1bHQgPSB0aGlzLnJlbmRlcigpOwogICAgICAgIHN1cGVyLnVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcyk7CiAgICAgICAgaWYgKHRlbXBsYXRlUmVzdWx0ICE9PSByZW5kZXJOb3RJbXBsZW1lbnRlZCkgewogICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLnJlbmRlcih0ZW1wbGF0ZVJlc3VsdCwgdGhpcy5yZW5kZXJSb290LCB7CiAgICAgICAgICAgICAgICBzY29wZU5hbWU6IHRoaXMubG9jYWxOYW1lLAogICAgICAgICAgICAgICAgZXZlbnRDb250ZXh0OiB0aGlzCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzKSB7CiAgICAgICAgICAgIHRoaXMuX25lZWRzU2hpbUFkb3B0ZWRTdHlsZVNoZWV0cyA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLl9zdHlsZXMuZm9yRWFjaCgocyk9PnsKICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsKICAgICAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gcy5jc3NUZXh0OwogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJSb290LmFwcGVuZENoaWxkKHN0eWxlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQogICAgcmVuZGVyKCkgewogICAgICAgIHJldHVybiByZW5kZXJOb3RJbXBsZW1lbnRlZDsKICAgIH0KfQpMaXRFbGVtZW50WyJmaW5hbGl6ZWQiXSA9IHRydWU7CkxpdEVsZW1lbnQucmVuZGVyID0gcmVuZGVyOwpMaXRFbGVtZW50LnNoYWRvd1Jvb3RPcHRpb25zID0gewogICAgbW9kZTogIm9wZW4iCn07CmNsYXNzIFRoZW1lIHsKICAgIHN0YXRpYyBwcmltYXJ5Q29sb3IyMDBIZXggPSAnIzY5YjdmZic7CiAgICBzdGF0aWMgcHJpbWFyeUNvbG9yMzAwSGV4ID0gJyMwMDg4RkYnOwogICAgc3RhdGljIHByaW1hcnlDb2xvcjkwMEhleCA9ICcjMDA1Y2NiJzsKICAgIHN0YXRpYyBiYWNrZ3JvdW5kQ29sb3JIZXggPSAnIzEyMTIxMic7CiAgICBzdGF0aWMgdGV4dENvbG9ySGV4ID0gJyNlYmViZWInOwogICAgc3RhdGljIHRleHRDb2xvclNlY29uZGFyeUhleCA9ICcjODg4ODg4JzsKICAgIHN0YXRpYyBzYW5zU2VyaWZGb250RmFtaWx5ID0gJy1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgYXZlbmlyIG5leHQsIGF2ZW5pciwgaGVsdmV0aWNhIG5ldWUsIGhlbHZldGljYSwgVWJ1bnR1LCByb2JvdG8sIG5vdG8sIHNlZ29lIHVpLCBhcmlhbCwgc2Fucy1zZXJpZic7CiAgICBzdGF0aWMgbW9ub3NwYWNlRm9udEZhbWlseSA9ICdNZW5sbywgIlNGIE1vbm8iLCAiQW5kYWxlIE1vbm8iLCAiUm9ib3RvIE1vbm8iLCBNb25hY28sIG1vbm9zcGFjZSc7CiAgICBzdGF0aWMgdGV4dENvbG9yRXJyb3JIZXggPSAnI2I3MWMxYyc7Cn0KY29uc3QgUE9EQ0FTVF9JTkRFWF9OQU1FU1BBQ0UgPSAnaHR0cHM6Ly9wb2RjYXN0aW5kZXgub3JnL25hbWVzcGFjZS8xLjAnOwpjb25zdCBQT0RDQVNUX0lOREVYX05BTUVTUEFDRV9BTFQgPSAnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kJzsKY29uc3QgUE9EQ0FTVF9JTkRFWF9OQU1FU1BBQ0VfS05PV05fTUlTU1BFTExJTkcgPSAnaHR0cHM6Ly9wb2RjYXN0aW5kZXgub3JnL25hbWVzcGFjZS8xLjAvJzsKY29uc3QgUE9EQ0FTVF9JTkRFWF9OQU1FU1BBQ0VTID0gWwogICAgUE9EQ0FTVF9JTkRFWF9OQU1FU1BBQ0UsCiAgICBQT0RDQVNUX0lOREVYX05BTUVTUEFDRV9BTFQsCiAgICBQT0RDQVNUX0lOREVYX05BTUVTUEFDRV9LTk9XTl9NSVNTUEVMTElORwpdOwpjb25zdCBQT0RDQVNUX0lOREVYX0tOT1dOX05BTUVTID0gbmV3IFNldCgpOwpmdW5jdGlvbiBfcG9kY2FzdEluZGV4KG5hbWUsIGtub3duID0gdHJ1ZSkgewogICAgaWYgKGtub3duKSBQT0RDQVNUX0lOREVYX0tOT1dOX05BTUVTLmFkZChuYW1lKTsKICAgIHJldHVybiBQT0RDQVNUX0lOREVYX05BTUVTUEFDRVMubWFwKCh2KT0+KHsKICAgICAgICAgICAgbmFtZSwKICAgICAgICAgICAgbmFtZXNwYWNlVXJpOiB2CiAgICAgICAgfSkKICAgICk7Cn0KY29uc3QgTUVESUFfUlNTX05BTUVTUEFDRSA9ICdodHRwOi8vc2VhcmNoLnlhaG9vLmNvbS9tcnNzLyc7CmZ1bmN0aW9uIF9tZWRpYVJzcyhuYW1lKSB7CiAgICByZXR1cm4gewogICAgICAgIG5hbWUsCiAgICAgICAgbmFtZXNwYWNlVXJpOiBNRURJQV9SU1NfTkFNRVNQQUNFCiAgICB9Owp9CmNsYXNzIFFuYW1lcyB7CiAgICBzdGF0aWMgUG9kY2FzdEluZGV4ID0gewogICAgICAgIE5BTUVTUEFDRVM6IFBPRENBU1RfSU5ERVhfTkFNRVNQQUNFUywKICAgICAgICBLTk9XTl9NSVNTUEVMTEVEX05BTUVTUEFDRVM6IFsKICAgICAgICAgICAgUE9EQ0FTVF9JTkRFWF9OQU1FU1BBQ0VfS05PV05fTUlTU1BFTExJTkcKICAgICAgICBdLAogICAgICAgIGdldCBLTk9XTl9OQU1FUyAoKSB7CiAgICAgICAgICAgIHJldHVybiBQT0RDQVNUX0lOREVYX0tOT1dOX05BTUVTOwogICAgICAgIH0sCiAgICAgICAgb2Y6IChuYW1lKT0+X3BvZGNhc3RJbmRleChuYW1lLCBmYWxzZSkKICAgICAgICAsCiAgICAgICAgYWx0ZXJuYXRlRW5jbG9zdXJlOiBfcG9kY2FzdEluZGV4KCdhbHRlcm5hdGVFbmNsb3N1cmUnKSwKICAgICAgICBjaGFwdGVyczogX3BvZGNhc3RJbmRleCgnY2hhcHRlcnMnKSwKICAgICAgICBlcGlzb2RlOiBfcG9kY2FzdEluZGV4KCdlcGlzb2RlJyksCiAgICAgICAgZnVuZGluZzogX3BvZGNhc3RJbmRleCgnZnVuZGluZycpLAogICAgICAgIGd1aWQ6IF9wb2RjYXN0SW5kZXgoJ2d1aWQnKSwKICAgICAgICBoaXZlQWNjb3VudDogX3BvZGNhc3RJbmRleCgnaGl2ZUFjY291bnQnKSwKICAgICAgICBpbWFnZXM6IF9wb2RjYXN0SW5kZXgoJ2ltYWdlcycpLAogICAgICAgIGludGVncml0eTogX3BvZGNhc3RJbmRleCgnaW50ZWdyaXR5JyksCiAgICAgICAgbGljZW5zZTogX3BvZGNhc3RJbmRleCgnbGljZW5zZScpLAogICAgICAgIGxvY2F0aW9uOiBfcG9kY2FzdEluZGV4KCdsb2NhdGlvbicpLAogICAgICAgIGxvY2tlZDogX3BvZGNhc3RJbmRleCgnbG9ja2VkJyksCiAgICAgICAgbWVkaXVtOiBfcG9kY2FzdEluZGV4KCdtZWRpdW0nKSwKICAgICAgICBwZXJzb246IF9wb2RjYXN0SW5kZXgoJ3BlcnNvbicpLAogICAgICAgIHBvZHBpbmc6IF9wb2RjYXN0SW5kZXgoJ3BvZHBpbmcnKSwKICAgICAgICBzZWFzb246IF9wb2RjYXN0SW5kZXgoJ3NlYXNvbicpLAogICAgICAgIHNvY2lhbDogX3BvZGNhc3RJbmRleCgnc29jaWFsJyksCiAgICAgICAgc29jaWFsSW50ZXJhY3Q6IF9wb2RjYXN0SW5kZXgoJ3NvY2lhbEludGVyYWN0JyksCiAgICAgICAgc29jaWFsU2lnblVwOiBfcG9kY2FzdEluZGV4KCdzb2NpYWxTaWduVXAnKSwKICAgICAgICBzb3VuZGJpdGU6IF9wb2RjYXN0SW5kZXgoJ3NvdW5kYml0ZScpLAogICAgICAgIHNvdXJjZTogX3BvZGNhc3RJbmRleCgnc291cmNlJyksCiAgICAgICAgdHJhaWxlcjogX3BvZGNhc3RJbmRleCgndHJhaWxlcicpLAogICAgICAgIHRyYW5zY3JpcHQ6IF9wb2RjYXN0SW5kZXgoJ3RyYW5zY3JpcHQnKSwKICAgICAgICB2YWx1ZTogX3BvZGNhc3RJbmRleCgndmFsdWUnKSwKICAgICAgICB2YWx1ZVJlY2lwaWVudDogX3BvZGNhc3RJbmRleCgndmFsdWVSZWNpcGllbnQnKQogICAgfTsKICAgIHN0YXRpYyBNZWRpYVJzcyA9IHsKICAgICAgICBOQU1FU1BBQ0U6IE1FRElBX1JTU19OQU1FU1BBQ0UsCiAgICAgICAgb2Y6IChuYW1lKT0+X21lZGlhUnNzKG5hbWUpCiAgICAgICAgLAogICAgICAgIGNvbnRlbnQ6IF9tZWRpYVJzcygnY29udGVudCcpCiAgICB9Owp9CmZ1bmN0aW9uIGNoZWNrTWF0Y2hlcyhuYW1lLCB2YWx1ZSwgcGF0dGVybikgewogICAgaWYgKCFwYXR0ZXJuLnRlc3QodmFsdWUpKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCAke25hbWV9OiAke3ZhbHVlfWApOwogICAgcmV0dXJuIHZhbHVlOwp9CmZ1bmN0aW9uIGNoZWNrRXF1YWwobmFtZSwgdmFsdWUsIGV4cGVjdGVkKSB7CiAgICBpZiAodmFsdWUgIT09IGV4cGVjdGVkKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCAke25hbWV9OiAke3ZhbHVlfSwgZXhwZWN0ZWQgJHtleHBlY3RlZH1gKTsKfQpmdW5jdGlvbiBjaGVja1RydWUobmFtZSwgdmFsdWUsIHRlc3QpIHsKICAgIGlmICghdGVzdCkgdGhyb3cgbmV3IEVycm9yKGBCYWQgJHtuYW1lfTogJHt2YWx1ZX1gKTsKfQpmdW5jdGlvbiBpc1N0cmluZ1JlY29yZChvYmopIHsKICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkob2JqKSAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDsKfQpjb25zdCBoZXhSZWdleCA9IC9eWy0rXT8weFthLWZBLUYwLTldKyQvOwpjb25zdCBudW1SZWdleCA9IC9eKFtcLVwrXSk/KDAqKShcLlswLTldKyhbZUVdXC0/WzAtOV0rKT98WzAtOV0rKFwuWzAtOV0rKFtlRV1cLT9bMC05XSspPyk/KSQvOwpjb25zdCBjb25zaWRlciA9IHsKICAgIGhleDogdHJ1ZSwKICAgIGxlYWRpbmdaZXJvczogdHJ1ZSwKICAgIGRlY2ltYWxQb2ludDogIi4iCn07CmZ1bmN0aW9uIHRvTnVtYmVyKHN0ciwgb3B0aW9ucyA9IHt9KSB7CiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgY29uc2lkZXIsIG9wdGlvbnMpOwogICAgaWYgKCFzdHIgfHwgdHlwZW9mIHN0ciAhPT0gInN0cmluZyIpIHJldHVybiBzdHI7CiAgICBsZXQgdHJpbW1lZFN0ciA9IHN0ci50cmltKCk7CiAgICBpZiAob3B0aW9ucy5za2lwTGlrZSAhPT0gdm9pZCAwICYmIG9wdGlvbnMuc2tpcExpa2UudGVzdCh0cmltbWVkU3RyKSkgcmV0dXJuIHN0cjsKICAgIGVsc2UgaWYgKG9wdGlvbnMuaGV4ICYmIGhleFJlZ2V4LnRlc3QodHJpbW1lZFN0cikpIHsKICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHRyaW1tZWRTdHIsIDE2KTsKICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgbWF0Y2ggPSBudW1SZWdleC5leGVjKHRyaW1tZWRTdHIpOwogICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICBtYXRjaFsxXTsKICAgICAgICAgICAgY29uc3QgbGVhZGluZ1plcm9zID0gbWF0Y2hbMl07CiAgICAgICAgICAgIGNvbnN0IG51bSA9IG1hdGNoWzNdOwogICAgICAgICAgICBtYXRjaFs0XSB8fCBtYXRjaFs2XTsKICAgICAgICAgICAgaWYgKGxlYWRpbmdaZXJvcy5sZW5ndGggPT09IDEgJiYgbnVtWzBdID09PSAiLiIpIHJldHVybiBOdW1iZXIoc3RyKTsKICAgICAgICAgICAgZWxzZSBpZiAoIW9wdGlvbnMubGVhZGluZ1plcm9zICYmIGxlYWRpbmdaZXJvcy5sZW5ndGggPiAwKSByZXR1cm4gc3RyOwogICAgICAgICAgICBlbHNlIHJldHVybiBOdW1iZXIodHJpbW1lZFN0cik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHN0cjsKICAgICAgICB9CiAgICB9Cn0KdmFyIHN0cm51bSA9IHRvTnVtYmVyOwpmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgYmFzZWRpciwgbW9kdWxlKSB7CiAgICByZXR1cm4gbW9kdWxlID0gewogICAgICAgIHBhdGg6IGJhc2VkaXIsCiAgICAgICAgZXhwb3J0czoge30sCiAgICAgICAgcmVxdWlyZTogZnVuY3Rpb24ocGF0aCwgYmFzZSkgewogICAgICAgICAgICByZXR1cm4gY29tbW9uanNSZXF1aXJlKHBhdGgsIGJhc2UgPT09IHZvaWQgMCB8fCBiYXNlID09PSBudWxsID8gbW9kdWxlLnBhdGggOiBiYXNlKTsKICAgICAgICB9CiAgICB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7Cn0KZnVuY3Rpb24gY29tbW9uanNSZXF1aXJlKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCJEeW5hbWljIHJlcXVpcmVzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBieSBAcm9sbHVwL3BsdWdpbi1jb21tb25qcyIpOwp9CnZhciB1dGlsID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CiAgICBjb25zdCBuYW1lU3RhcnRDaGFyID0gIjpBLVphLXpfXFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEIjsKICAgIGNvbnN0IG5hbWVDaGFyID0gbmFtZVN0YXJ0Q2hhciArICJcXC0uXFxkXFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MCI7CiAgICBjb25zdCBuYW1lUmVnZXhwID0gIlsiICsgbmFtZVN0YXJ0Q2hhciArICJdWyIgKyBuYW1lQ2hhciArICJdKiI7CiAgICBjb25zdCByZWdleE5hbWUgPSBuZXcgUmVnRXhwKCJeIiArIG5hbWVSZWdleHAgKyAiJCIpOwogICAgY29uc3QgZ2V0QWxsTWF0Y2hlcyA9IGZ1bmN0aW9uKHN0cmluZywgcmVnZXgpIHsKICAgICAgICBjb25zdCBtYXRjaGVzID0gW107CiAgICAgICAgbGV0IG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpOwogICAgICAgIHdoaWxlKG1hdGNoKXsKICAgICAgICAgICAgY29uc3QgYWxsbWF0Y2hlcyA9IFtdOwogICAgICAgICAgICBhbGxtYXRjaGVzLnN0YXJ0SW5kZXggPSByZWdleC5sYXN0SW5kZXggLSBtYXRjaFswXS5sZW5ndGg7CiAgICAgICAgICAgIGNvbnN0IGxlbiA9IG1hdGNoLmxlbmd0aDsKICAgICAgICAgICAgZm9yKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuOyBpbmRleCsrKXsKICAgICAgICAgICAgICAgIGFsbG1hdGNoZXMucHVzaChtYXRjaFtpbmRleF0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG1hdGNoZXMucHVzaChhbGxtYXRjaGVzKTsKICAgICAgICAgICAgbWF0Y2ggPSByZWdleC5leGVjKHN0cmluZyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBtYXRjaGVzOwogICAgfTsKICAgIGNvbnN0IGlzTmFtZSA9IGZ1bmN0aW9uKHN0cmluZykgewogICAgICAgIGNvbnN0IG1hdGNoID0gcmVnZXhOYW1lLmV4ZWMoc3RyaW5nKTsKICAgICAgICByZXR1cm4gIShtYXRjaCA9PT0gbnVsbCB8fCB0eXBlb2YgbWF0Y2ggPT09ICJ1bmRlZmluZWQiKTsKICAgIH07CiAgICBleHBvcnRzLmlzRXhpc3QgPSBmdW5jdGlvbih2KSB7CiAgICAgICAgcmV0dXJuIHR5cGVvZiB2ICE9PSAidW5kZWZpbmVkIjsKICAgIH07CiAgICBleHBvcnRzLmlzRW1wdHlPYmplY3QgPSBmdW5jdGlvbihvYmopIHsKICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7CiAgICB9OwogICAgZXhwb3J0cy5tZXJnZSA9IGZ1bmN0aW9uKHRhcmdldCwgYSwgYXJyYXlNb2RlKSB7CiAgICAgICAgaWYgKGEpIHsKICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGEpOwogICAgICAgICAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDsKICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKXsKICAgICAgICAgICAgICAgIGlmIChhcnJheU1vZGUgPT09ICJzdHJpY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleXNbaV1dID0gWwogICAgICAgICAgICAgICAgICAgICAgICBhW2tleXNbaV1dCiAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleXNbaV1dID0gYVtrZXlzW2ldXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07CiAgICBleHBvcnRzLmdldFZhbHVlID0gZnVuY3Rpb24odikgewogICAgICAgIGlmIChleHBvcnRzLmlzRXhpc3QodikpIHsKICAgICAgICAgICAgcmV0dXJuIHY7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgIH0KICAgIH07CiAgICBleHBvcnRzLmJ1aWxkT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMsIGRlZmF1bHRPcHRpb25zMiwgcHJvcHMyKSB7CiAgICAgICAgbGV0IG5ld09wdGlvbnMgPSB7fTsKICAgICAgICBpZiAoIW9wdGlvbnMpIHsKICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRPcHRpb25zMjsKICAgICAgICB9CiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHByb3BzMi5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgIGlmIChvcHRpb25zW3Byb3BzMltpXV0gIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgbmV3T3B0aW9uc1twcm9wczJbaV1dID0gb3B0aW9uc1twcm9wczJbaV1dOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbmV3T3B0aW9uc1twcm9wczJbaV1dID0gZGVmYXVsdE9wdGlvbnMyW3Byb3BzMltpXV07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ld09wdGlvbnM7CiAgICB9OwogICAgZXhwb3J0cy5pc1RhZ05hbWVJbkFycmF5TW9kZSA9IGZ1bmN0aW9uKHRhZ05hbWUsIGFycmF5TW9kZSwgcGFyZW50VGFnTmFtZSkgewogICAgICAgIGlmIChhcnJheU1vZGUgPT09IGZhbHNlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgaWYgKGFycmF5TW9kZSBpbnN0YW5jZW9mIFJlZ0V4cCkgewogICAgICAgICAgICByZXR1cm4gYXJyYXlNb2RlLnRlc3QodGFnTmFtZSk7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJyYXlNb2RlID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIHJldHVybiAhIWFycmF5TW9kZSh0YWdOYW1lLCBwYXJlbnRUYWdOYW1lKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGFycmF5TW9kZSA9PT0gInN0cmljdCI7CiAgICB9OwogICAgZXhwb3J0cy5pc05hbWUgPSBpc05hbWU7CiAgICBleHBvcnRzLmdldEFsbE1hdGNoZXMgPSBnZXRBbGxNYXRjaGVzOwogICAgZXhwb3J0cy5uYW1lUmVnZXhwID0gbmFtZVJlZ2V4cDsKfSk7CmNvbnN0IGNvbnZlcnRUb0pzb24gPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBwYXJlbnRUYWdOYW1lKSB7CiAgICBjb25zdCBqT2JqID0ge307CiAgICBpZiAoIW9wdGlvbnMuYWx3YXlzQ3JlYXRlVGV4dE5vZGUgJiYgKCFub2RlLmNoaWxkIHx8IHV0aWwuaXNFbXB0eU9iamVjdChub2RlLmNoaWxkKSkgJiYgKCFub2RlLmF0dHJzTWFwIHx8IHV0aWwuaXNFbXB0eU9iamVjdChub2RlLmF0dHJzTWFwKSkpIHsKICAgICAgICByZXR1cm4gdXRpbC5pc0V4aXN0KG5vZGUudmFsKSA/IG5vZGUudmFsIDogIiI7CiAgICB9CiAgICBpZiAodXRpbC5pc0V4aXN0KG5vZGUudmFsKSAmJiAhKHR5cGVvZiBub2RlLnZhbCA9PT0gInN0cmluZyIgJiYgKG5vZGUudmFsID09PSAiIiB8fCBub2RlLnZhbCA9PT0gb3B0aW9ucy5jZGF0YVBvc2l0aW9uQ2hhcikpKSB7CiAgICAgICAgY29uc3QgYXNBcnJheSA9IHV0aWwuaXNUYWdOYW1lSW5BcnJheU1vZGUobm9kZS50YWduYW1lLCBvcHRpb25zLmFycmF5TW9kZSwgcGFyZW50VGFnTmFtZSk7CiAgICAgICAgak9ialtvcHRpb25zLnRleHROb2RlTmFtZV0gPSBhc0FycmF5ID8gWwogICAgICAgICAgICBub2RlLnZhbAogICAgICAgIF0gOiBub2RlLnZhbDsKICAgIH0KICAgIHV0aWwubWVyZ2Uoak9iaiwgbm9kZS5hdHRyc01hcCwgb3B0aW9ucy5hcnJheU1vZGUpOwogICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5vZGUuY2hpbGQpOwogICAgZm9yKGxldCBpbmRleCA9IDA7IGluZGV4IDwga2V5cy5sZW5ndGg7IGluZGV4KyspewogICAgICAgIGNvbnN0IHRhZ05hbWUgPSBrZXlzW2luZGV4XTsKICAgICAgICBpZiAobm9kZS5jaGlsZFt0YWdOYW1lXSAmJiBub2RlLmNoaWxkW3RhZ05hbWVdLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgak9ialt0YWdOYW1lXSA9IFtdOwogICAgICAgICAgICBmb3IobGV0IHRhZyBpbiBub2RlLmNoaWxkW3RhZ05hbWVdKXsKICAgICAgICAgICAgICAgIGlmIChub2RlLmNoaWxkW3RhZ05hbWVdLmhhc093blByb3BlcnR5KHRhZykpIHsKICAgICAgICAgICAgICAgICAgICBqT2JqW3RhZ05hbWVdLnB1c2goY29udmVydFRvSnNvbihub2RlLmNoaWxkW3RhZ05hbWVdW3RhZ10sIG9wdGlvbnMsIHRhZ05hbWUpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbnZlcnRUb0pzb24obm9kZS5jaGlsZFt0YWdOYW1lXVswXSwgb3B0aW9ucywgdGFnTmFtZSk7CiAgICAgICAgICAgIGNvbnN0IGFzQXJyYXkgPSBvcHRpb25zLmFycmF5TW9kZSA9PT0gdHJ1ZSAmJiB0eXBlb2YgcmVzdWx0ID09PSAib2JqZWN0IiB8fCB1dGlsLmlzVGFnTmFtZUluQXJyYXlNb2RlKHRhZ05hbWUsIG9wdGlvbnMuYXJyYXlNb2RlLCBwYXJlbnRUYWdOYW1lKTsKICAgICAgICAgICAgak9ialt0YWdOYW1lXSA9IGFzQXJyYXkgPyBbCiAgICAgICAgICAgICAgICByZXN1bHQKICAgICAgICAgICAgXSA6IHJlc3VsdDsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gak9iajsKfTsKdmFyIGNvbnZlcnRUb0pzb25fMSA9IGNvbnZlcnRUb0pzb247CnZhciBub2RlMmpzb24gPSB7CiAgICBjb252ZXJ0VG9Kc29uOiBjb252ZXJ0VG9Kc29uXzEKfTsKdmFyIHhtbE5vZGUgPSBmdW5jdGlvbih0YWduYW1lLCBwYXJlbnQsIHZhbCkgewogICAgdGhpcy50YWduYW1lID0gdGFnbmFtZTsKICAgIHRoaXMucGFyZW50ID0gcGFyZW50OwogICAgdGhpcy5jaGlsZCA9IHt9OwogICAgdGhpcy5hdHRyc01hcCA9IHt9OwogICAgdGhpcy52YWwgPSB2YWw7CiAgICB0aGlzLmFkZENoaWxkID0gZnVuY3Rpb24oY2hpbGQpIHsKICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmNoaWxkW2NoaWxkLnRhZ25hbWVdKSkgewogICAgICAgICAgICB0aGlzLmNoaWxkW2NoaWxkLnRhZ25hbWVdLnB1c2goY2hpbGQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuY2hpbGRbY2hpbGQudGFnbmFtZV0gPSBbCiAgICAgICAgICAgICAgICBjaGlsZAogICAgICAgICAgICBdOwogICAgICAgIH0KICAgIH07Cn07CmNvbnN0IGJ1aWxkT3B0aW9ucyA9IHV0aWwuYnVpbGRPcHRpb25zOwoiPCgoIVxcW0NEQVRBXFxbKFtcXHNcXFNdKj8pKF1dPikpfCgoTkFNRTopPyhOQU1FKSkoW14+XSopPnwoKFxcLykoTkFNRSlcXHMqPikpKFtePF0qKSIucmVwbGFjZSgvTkFNRS9nLCB1dGlsLm5hbWVSZWdleHApOwppZiAoIU51bWJlci5wYXJzZUludCAmJiB3aW5kb3cucGFyc2VJbnQpIHsKICAgIE51bWJlci5wYXJzZUludCA9IHdpbmRvdy5wYXJzZUludDsKfQppZiAoIU51bWJlci5wYXJzZUZsb2F0ICYmIHdpbmRvdy5wYXJzZUZsb2F0KSB7CiAgICBOdW1iZXIucGFyc2VGbG9hdCA9IHdpbmRvdy5wYXJzZUZsb2F0Owp9CmNvbnN0IGRlZmF1bHRPcHRpb25zID0gewogICAgYXR0cmlidXRlTmFtZVByZWZpeDogIkBfIiwKICAgIGF0dHJOb2RlTmFtZTogZmFsc2UsCiAgICB0ZXh0Tm9kZU5hbWU6ICIjdGV4dCIsCiAgICBpZ25vcmVBdHRyaWJ1dGVzOiB0cnVlLAogICAgaWdub3JlTmFtZVNwYWNlOiBmYWxzZSwKICAgIGFsbG93Qm9vbGVhbkF0dHJpYnV0ZXM6IGZhbHNlLAogICAgcGFyc2VOb2RlVmFsdWU6IHRydWUsCiAgICBwYXJzZUF0dHJpYnV0ZVZhbHVlOiBmYWxzZSwKICAgIGFycmF5TW9kZTogZmFsc2UsCiAgICB0cmltVmFsdWVzOiB0cnVlLAogICAgY2RhdGFUYWdOYW1lOiBmYWxzZSwKICAgIGNkYXRhUG9zaXRpb25DaGFyOiAiXFxjIiwKICAgIG51bVBhcnNlT3B0aW9uczogewogICAgICAgIGhleDogdHJ1ZSwKICAgICAgICBsZWFkaW5nWmVyb3M6IHRydWUKICAgIH0sCiAgICB0YWdWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24oYSwgdGFnTmFtZSkgewogICAgICAgIHJldHVybiBhOwogICAgfSwKICAgIGF0dHJWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24oYSwgYXR0ck5hbWUpIHsKICAgICAgICByZXR1cm4gYTsKICAgIH0sCiAgICBzdG9wTm9kZXM6IFtdLAogICAgYWx3YXlzQ3JlYXRlVGV4dE5vZGU6IGZhbHNlCn07CnZhciBkZWZhdWx0T3B0aW9uc18xID0gZGVmYXVsdE9wdGlvbnM7CmNvbnN0IHByb3BzID0gWwogICAgImF0dHJpYnV0ZU5hbWVQcmVmaXgiLAogICAgImF0dHJOb2RlTmFtZSIsCiAgICAidGV4dE5vZGVOYW1lIiwKICAgICJpZ25vcmVBdHRyaWJ1dGVzIiwKICAgICJpZ25vcmVOYW1lU3BhY2UiLAogICAgImFsbG93Qm9vbGVhbkF0dHJpYnV0ZXMiLAogICAgInBhcnNlTm9kZVZhbHVlIiwKICAgICJwYXJzZUF0dHJpYnV0ZVZhbHVlIiwKICAgICJhcnJheU1vZGUiLAogICAgInRyaW1WYWx1ZXMiLAogICAgImNkYXRhVGFnTmFtZSIsCiAgICAiY2RhdGFQb3NpdGlvbkNoYXIiLAogICAgInRhZ1ZhbHVlUHJvY2Vzc29yIiwKICAgICJhdHRyVmFsdWVQcm9jZXNzb3IiLAogICAgInBhcnNlVHJ1ZU51bWJlck9ubHkiLAogICAgIm51bVBhcnNlT3B0aW9ucyIsCiAgICAic3RvcE5vZGVzIiwKICAgICJhbHdheXNDcmVhdGVUZXh0Tm9kZSIKXTsKdmFyIHByb3BzXzEgPSBwcm9wczsKZnVuY3Rpb24gcHJvY2Vzc1RhZ1ZhbHVlKHRhZ05hbWUsIHZhbCwgb3B0aW9ucykgewogICAgaWYgKHZhbCkgewogICAgICAgIGlmIChvcHRpb25zLnRyaW1WYWx1ZXMpIHsKICAgICAgICAgICAgdmFsID0gdmFsLnRyaW0oKTsKICAgICAgICB9CiAgICAgICAgdmFsID0gb3B0aW9ucy50YWdWYWx1ZVByb2Nlc3Nvcih2YWwsIHRhZ05hbWUpOwogICAgICAgIHZhbCA9IHBhcnNlVmFsdWUodmFsLCBvcHRpb25zLnBhcnNlTm9kZVZhbHVlLCBvcHRpb25zLm51bVBhcnNlT3B0aW9ucyk7CiAgICB9CiAgICByZXR1cm4gdmFsOwp9CmZ1bmN0aW9uIHJlc29sdmVOYW1lU3BhY2UodGFnbmFtZSwgb3B0aW9ucykgewogICAgaWYgKG9wdGlvbnMuaWdub3JlTmFtZVNwYWNlKSB7CiAgICAgICAgY29uc3QgdGFncyA9IHRhZ25hbWUuc3BsaXQoIjoiKTsKICAgICAgICBjb25zdCBwcmVmaXggPSB0YWduYW1lLmNoYXJBdCgwKSA9PT0gIi8iID8gIi8iIDogIiI7CiAgICAgICAgaWYgKHRhZ3NbMF0gPT09ICJ4bWxucyIpIHsKICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgIH0KICAgICAgICBpZiAodGFncy5sZW5ndGggPT09IDIpIHsKICAgICAgICAgICAgdGFnbmFtZSA9IHByZWZpeCArIHRhZ3NbMV07CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRhZ25hbWU7Cn0KZnVuY3Rpb24gcGFyc2VWYWx1ZSh2YWwsIHNob3VsZFBhcnNlLCBvcHRpb25zKSB7CiAgICBpZiAoc2hvdWxkUGFyc2UgJiYgdHlwZW9mIHZhbCA9PT0gInN0cmluZyIpIHsKICAgICAgICBjb25zdCBuZXd2YWwgPSB2YWwudHJpbSgpOwogICAgICAgIGlmIChuZXd2YWwgPT09ICJ0cnVlIikgcmV0dXJuIHRydWU7CiAgICAgICAgZWxzZSBpZiAobmV3dmFsID09PSAiZmFsc2UiKSByZXR1cm4gZmFsc2U7CiAgICAgICAgZWxzZSByZXR1cm4gc3RybnVtKHZhbCwgb3B0aW9ucyk7CiAgICB9IGVsc2UgewogICAgICAgIGlmICh1dGlsLmlzRXhpc3QodmFsKSkgewogICAgICAgICAgICByZXR1cm4gdmFsOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICB9CiAgICB9Cn0KY29uc3QgYXR0cnNSZWd4ID0gbmV3IFJlZ0V4cChgKFteXFxzPV0rKVxccyooPVxccyooWyciXSkoLio/KVxcMyk/YCwgImciKTsKZnVuY3Rpb24gYnVpbGRBdHRyaWJ1dGVzTWFwKGF0dHJTdHIsIG9wdGlvbnMpIHsKICAgIGlmICghb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzICYmIHR5cGVvZiBhdHRyU3RyID09PSAic3RyaW5nIikgewogICAgICAgIGF0dHJTdHIgPSBhdHRyU3RyLnJlcGxhY2UoL1xyP1xuL2csICIgIik7CiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IHV0aWwuZ2V0QWxsTWF0Y2hlcyhhdHRyU3RyLCBhdHRyc1JlZ3gpOwogICAgICAgIGNvbnN0IGxlbiA9IG1hdGNoZXMubGVuZ3RoOwogICAgICAgIGNvbnN0IGF0dHJzID0ge307CiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKXsKICAgICAgICAgICAgY29uc3QgYXR0ck5hbWUgPSByZXNvbHZlTmFtZVNwYWNlKG1hdGNoZXNbaV1bMV0sIG9wdGlvbnMpOwogICAgICAgICAgICBpZiAoYXR0ck5hbWUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlc1tpXVs0XSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudHJpbVZhbHVlcykgewogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzW2ldWzRdID0gbWF0Y2hlc1tpXVs0XS50cmltKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIG1hdGNoZXNbaV1bNF0gPSBvcHRpb25zLmF0dHJWYWx1ZVByb2Nlc3NvcihtYXRjaGVzW2ldWzRdLCBhdHRyTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgYXR0cnNbb3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4ICsgYXR0ck5hbWVdID0gcGFyc2VWYWx1ZShtYXRjaGVzW2ldWzRdLCBvcHRpb25zLnBhcnNlQXR0cmlidXRlVmFsdWUsIG9wdGlvbnMubnVtUGFyc2VPcHRpb25zKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5hbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnNbb3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4ICsgYXR0ck5hbWVdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIU9iamVjdC5rZXlzKGF0dHJzKS5sZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAob3B0aW9ucy5hdHRyTm9kZU5hbWUpIHsKICAgICAgICAgICAgY29uc3QgYXR0ckNvbGxlY3Rpb24gPSB7fTsKICAgICAgICAgICAgYXR0ckNvbGxlY3Rpb25bb3B0aW9ucy5hdHRyTm9kZU5hbWVdID0gYXR0cnM7CiAgICAgICAgICAgIHJldHVybiBhdHRyQ29sbGVjdGlvbjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGF0dHJzOwogICAgfQp9CmNvbnN0IGdldFRyYXZlcnNhbE9iaiA9IGZ1bmN0aW9uKHhtbERhdGEsIG9wdGlvbnMpIHsKICAgIHhtbERhdGEgPSB4bWxEYXRhLnJlcGxhY2UoL1xyXG4/L2csICJcbiIpOwogICAgb3B0aW9ucyA9IGJ1aWxkT3B0aW9ucyhvcHRpb25zLCBkZWZhdWx0T3B0aW9ucywgcHJvcHMpOwogICAgY29uc3QgeG1sT2JqID0gbmV3IHhtbE5vZGUoIiF4bWwiKTsKICAgIGxldCBjdXJyZW50Tm9kZSA9IHhtbE9iajsKICAgIGxldCB0ZXh0RGF0YSA9ICIiOwogICAgZm9yKGxldCBpID0gMDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspewogICAgICAgIGNvbnN0IGNoID0geG1sRGF0YVtpXTsKICAgICAgICBpZiAoY2ggPT09ICI8IikgewogICAgICAgICAgICBpZiAoeG1sRGF0YVtpICsgMV0gPT09ICIvIikgewogICAgICAgICAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgIj4iLCBpLCAiQ2xvc2luZyBUYWcgaXMgbm90IGNsb3NlZC4iKTsKICAgICAgICAgICAgICAgIGxldCB0YWdOYW1lID0geG1sRGF0YS5zdWJzdHJpbmcoaSArIDIsIGNsb3NlSW5kZXgpLnRyaW0oKTsKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmlnbm9yZU5hbWVTcGFjZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9uSW5kZXggPSB0YWdOYW1lLmluZGV4T2YoIjoiKTsKICAgICAgICAgICAgICAgICAgICBpZiAoY29sb25JbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyKGNvbG9uSW5kZXggKyAxKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY3VycmVudE5vZGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE5vZGUudmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLnZhbCA9IHV0aWwuZ2V0VmFsdWUoY3VycmVudE5vZGUudmFsKSArICIiICsgcHJvY2Vzc1RhZ1ZhbHVlKHRhZ05hbWUsIHRleHREYXRhLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS52YWwgPSBwcm9jZXNzVGFnVmFsdWUodGFnTmFtZSwgdGV4dERhdGEsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnN0b3BOb2Rlcy5sZW5ndGggJiYgb3B0aW9ucy5zdG9wTm9kZXMuaW5jbHVkZXMoY3VycmVudE5vZGUudGFnbmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5jaGlsZCA9IFtdOwogICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Tm9kZS5hdHRyc01hcCA9PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUuYXR0cnNNYXAgPSB7fTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUudmFsID0geG1sRGF0YS5zdWJzdHIoY3VycmVudE5vZGUuc3RhcnRJbmRleCArIDEsIGkgLSBjdXJyZW50Tm9kZS5zdGFydEluZGV4IC0gMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudDsKICAgICAgICAgICAgICAgIHRleHREYXRhID0gIiI7CiAgICAgICAgICAgICAgICBpID0gY2xvc2VJbmRleDsKICAgICAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2kgKyAxXSA9PT0gIj8iKSB7CiAgICAgICAgICAgICAgICBpID0gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCAiPz4iLCBpLCAiUGkgVGFnIGlzIG5vdCBjbG9zZWQuIik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoeG1sRGF0YS5zdWJzdHIoaSArIDEsIDMpID09PSAiIS0tIikgewogICAgICAgICAgICAgICAgaSA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgIi0tPiIsIGksICJDb21tZW50IGlzIG5vdCBjbG9zZWQuIik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoeG1sRGF0YS5zdWJzdHIoaSArIDEsIDIpID09PSAiIUQiKSB7CiAgICAgICAgICAgICAgICBjb25zdCBjbG9zZUluZGV4ID0gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCAiPiIsIGksICJET0NUWVBFIGlzIG5vdCBjbG9zZWQuIik7CiAgICAgICAgICAgICAgICBjb25zdCB0YWdFeHAgPSB4bWxEYXRhLnN1YnN0cmluZyhpLCBjbG9zZUluZGV4KTsKICAgICAgICAgICAgICAgIGlmICh0YWdFeHAuaW5kZXhPZigiWyIpID49IDApIHsKICAgICAgICAgICAgICAgICAgICBpID0geG1sRGF0YS5pbmRleE9mKCJdPiIsIGkpICsgMTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaSA9IGNsb3NlSW5kZXg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoeG1sRGF0YS5zdWJzdHIoaSArIDEsIDIpID09PSAiIVsiKSB7CiAgICAgICAgICAgICAgICBjb25zdCBjbG9zZUluZGV4ID0gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCAiXV0+IiwgaSwgIkNEQVRBIGlzIG5vdCBjbG9zZWQuIikgLSAyOwogICAgICAgICAgICAgICAgY29uc3QgdGFnRXhwID0geG1sRGF0YS5zdWJzdHJpbmcoaSArIDksIGNsb3NlSW5kZXgpOwogICAgICAgICAgICAgICAgaWYgKHRleHREYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUudmFsID0gdXRpbC5nZXRWYWx1ZShjdXJyZW50Tm9kZS52YWwpICsgIiIgKyBwcm9jZXNzVGFnVmFsdWUoY3VycmVudE5vZGUudGFnbmFtZSwgdGV4dERhdGEsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgIHRleHREYXRhID0gIiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jZGF0YVRhZ05hbWUpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBuZXcgeG1sTm9kZShvcHRpb25zLmNkYXRhVGFnTmFtZSwgY3VycmVudE5vZGUsIHRhZ0V4cCk7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUuYWRkQ2hpbGQoY2hpbGROb2RlKTsKICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS52YWwgPSB1dGlsLmdldFZhbHVlKGN1cnJlbnROb2RlLnZhbCkgKyBvcHRpb25zLmNkYXRhUG9zaXRpb25DaGFyOwogICAgICAgICAgICAgICAgICAgIGlmICh0YWdFeHApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlLnZhbCA9IHRhZ0V4cDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLnZhbCA9IChjdXJyZW50Tm9kZS52YWwgfHwgIiIpICsgKHRhZ0V4cCB8fCAiIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpID0gY2xvc2VJbmRleCArIDI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjbG9zaW5nSW5kZXhGb3JPcGVuaW5nVGFnKHhtbERhdGEsIGkgKyAxKTsKICAgICAgICAgICAgICAgIGxldCB0YWdFeHAgPSByZXN1bHQuZGF0YTsKICAgICAgICAgICAgICAgIGNvbnN0IGNsb3NlSW5kZXggPSByZXN1bHQuaW5kZXg7CiAgICAgICAgICAgICAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHRhZ0V4cC5pbmRleE9mKCIgIik7CiAgICAgICAgICAgICAgICBsZXQgdGFnTmFtZSA9IHRhZ0V4cDsKICAgICAgICAgICAgICAgIGxldCBzaG91bGRCdWlsZEF0dHJpYnV0ZXNNYXAgPSB0cnVlOwogICAgICAgICAgICAgICAgaWYgKHNlcGFyYXRvckluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIHRhZ05hbWUgPSB0YWdFeHAuc3Vic3RyKDAsIHNlcGFyYXRvckluZGV4KS5yZXBsYWNlKC9cc1xzKiQvLCAiIik7CiAgICAgICAgICAgICAgICAgICAgdGFnRXhwID0gdGFnRXhwLnN1YnN0cihzZXBhcmF0b3JJbmRleCArIDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWdub3JlTmFtZVNwYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb25JbmRleCA9IHRhZ05hbWUuaW5kZXhPZigiOiIpOwogICAgICAgICAgICAgICAgICAgIGlmIChjb2xvbkluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS5zdWJzdHIoY29sb25JbmRleCArIDEpOwogICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRCdWlsZEF0dHJpYnV0ZXNNYXAgPSB0YWdOYW1lICE9PSByZXN1bHQuZGF0YS5zdWJzdHIoY29sb25JbmRleCArIDEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Tm9kZSAmJiB0ZXh0RGF0YSkgewogICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Tm9kZS50YWduYW1lICE9PSAiIXhtbCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUudmFsID0gdXRpbC5nZXRWYWx1ZShjdXJyZW50Tm9kZS52YWwpICsgIiIgKyBwcm9jZXNzVGFnVmFsdWUoY3VycmVudE5vZGUudGFnbmFtZSwgdGV4dERhdGEsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0YWdFeHAubGVuZ3RoID4gMCAmJiB0YWdFeHAubGFzdEluZGV4T2YoIi8iKSA9PT0gdGFnRXhwLmxlbmd0aCAtIDEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGFnTmFtZVt0YWdOYW1lLmxlbmd0aCAtIDFdID09PSAiLyIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyKDAsIHRhZ05hbWUubGVuZ3RoIC0gMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0V4cCA9IHRhZ05hbWU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFnRXhwID0gdGFnRXhwLnN1YnN0cigwLCB0YWdFeHAubGVuZ3RoIC0gMSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG5ldyB4bWxOb2RlKHRhZ05hbWUsIGN1cnJlbnROb2RlLCAiIik7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZ05hbWUgIT09IHRhZ0V4cCkgewogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUuYXR0cnNNYXAgPSBidWlsZEF0dHJpYnV0ZXNNYXAodGFnRXhwLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUuYWRkQ2hpbGQoY2hpbGROb2RlKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbmV3IHhtbE5vZGUodGFnTmFtZSwgY3VycmVudE5vZGUpOwogICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnN0b3BOb2Rlcy5sZW5ndGggJiYgb3B0aW9ucy5zdG9wTm9kZXMuaW5jbHVkZXMoY2hpbGROb2RlLnRhZ25hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5zdGFydEluZGV4ID0gY2xvc2VJbmRleDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZ05hbWUgIT09IHRhZ0V4cCAmJiBzaG91bGRCdWlsZEF0dHJpYnV0ZXNNYXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlLmF0dHJzTWFwID0gYnVpbGRBdHRyaWJ1dGVzTWFwKHRhZ0V4cCwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLmFkZENoaWxkKGNoaWxkTm9kZSk7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjaGlsZE5vZGU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0ZXh0RGF0YSA9ICIiOwogICAgICAgICAgICAgICAgaSA9IGNsb3NlSW5kZXg7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0ZXh0RGF0YSArPSB4bWxEYXRhW2ldOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB4bWxPYmo7Cn07CmZ1bmN0aW9uIGNsb3NpbmdJbmRleEZvck9wZW5pbmdUYWcoZGF0YSwgaSkgewogICAgbGV0IGF0dHJCb3VuZGFyeTsKICAgIGxldCB0YWdFeHAgPSAiIjsKICAgIGZvcihsZXQgaW5kZXggPSBpOyBpbmRleCA8IGRhdGEubGVuZ3RoOyBpbmRleCsrKXsKICAgICAgICBsZXQgY2ggPSBkYXRhW2luZGV4XTsKICAgICAgICBpZiAoYXR0ckJvdW5kYXJ5KSB7CiAgICAgICAgICAgIGlmIChjaCA9PT0gYXR0ckJvdW5kYXJ5KSBhdHRyQm91bmRhcnkgPSAiIjsKICAgICAgICB9IGVsc2UgaWYgKGNoID09PSAnIicgfHwgY2ggPT09ICInIikgewogICAgICAgICAgICBhdHRyQm91bmRhcnkgPSBjaDsKICAgICAgICB9IGVsc2UgaWYgKGNoID09PSAiPiIpIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGRhdGE6IHRhZ0V4cCwKICAgICAgICAgICAgICAgIGluZGV4CiAgICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gIgkiKSB7CiAgICAgICAgICAgIGNoID0gIiAiOwogICAgICAgIH0KICAgICAgICB0YWdFeHAgKz0gY2g7CiAgICB9Cn0KZnVuY3Rpb24gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCBzdHIsIGksIGVyck1zZykgewogICAgY29uc3QgY2xvc2luZ0luZGV4ID0geG1sRGF0YS5pbmRleE9mKHN0ciwgaSk7CiAgICBpZiAoY2xvc2luZ0luZGV4ID09PSAtMSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gY2xvc2luZ0luZGV4ICsgc3RyLmxlbmd0aCAtIDE7CiAgICB9Cn0KdmFyIGdldFRyYXZlcnNhbE9ial8xID0gZ2V0VHJhdmVyc2FsT2JqOwp2YXIgeG1sc3RyMnhtbG5vZGUgPSB7CiAgICBkZWZhdWx0T3B0aW9uczogZGVmYXVsdE9wdGlvbnNfMSwKICAgIHByb3BzOiBwcm9wc18xLAogICAgZ2V0VHJhdmVyc2FsT2JqOiBnZXRUcmF2ZXJzYWxPYmpfMQp9Owpjb25zdCBkZWZhdWx0T3B0aW9ucyQxID0gewogICAgYWxsb3dCb29sZWFuQXR0cmlidXRlczogZmFsc2UKfTsKY29uc3QgcHJvcHMkMSA9IFsKICAgICJhbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzIgpdOwp2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbih4bWxEYXRhLCBvcHRpb25zKSB7CiAgICBvcHRpb25zID0gdXRpbC5idWlsZE9wdGlvbnMob3B0aW9ucywgZGVmYXVsdE9wdGlvbnMkMSwgcHJvcHMkMSk7CiAgICBjb25zdCB0YWdzID0gW107CiAgICBsZXQgdGFnRm91bmQgPSBmYWxzZTsKICAgIGxldCByZWFjaGVkUm9vdCA9IGZhbHNlOwogICAgaWYgKHhtbERhdGFbMF0gPT09ICJcdUZFRkYiKSB7CiAgICAgICAgeG1sRGF0YSA9IHhtbERhdGEuc3Vic3RyKDEpOwogICAgfQogICAgZm9yKGxldCBpID0gMDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspewogICAgICAgIGlmICh4bWxEYXRhW2ldID09PSAiPCIgJiYgeG1sRGF0YVtpICsgMV0gPT09ICI/IikgewogICAgICAgICAgICBpICs9IDI7CiAgICAgICAgICAgIGkgPSByZWFkUEkoeG1sRGF0YSwgaSk7CiAgICAgICAgICAgIGlmIChpLmVycikgcmV0dXJuIGk7CiAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAiPCIpIHsKICAgICAgICAgICAgbGV0IHRhZ1N0YXJ0UG9zID0gaTsKICAgICAgICAgICAgaSsrOwogICAgICAgICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gIiEiKSB7CiAgICAgICAgICAgICAgICBpID0gcmVhZENvbW1lbnRBbmRDREFUQSh4bWxEYXRhLCBpKTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbGV0IGNsb3NpbmdUYWcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmICh4bWxEYXRhW2ldID09PSAiLyIpIHsKICAgICAgICAgICAgICAgICAgICBjbG9zaW5nVGFnID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBpKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgdGFnTmFtZSA9ICIiOwogICAgICAgICAgICAgICAgZm9yKDsgaSA8IHhtbERhdGEubGVuZ3RoICYmIHhtbERhdGFbaV0gIT09ICI+IiAmJiB4bWxEYXRhW2ldICE9PSAiICIgJiYgeG1sRGF0YVtpXSAhPT0gIgkiICYmIHhtbERhdGFbaV0gIT09ICJcbiIgJiYgeG1sRGF0YVtpXSAhPT0gIlxyIjsgaSsrKXsKICAgICAgICAgICAgICAgICAgICB0YWdOYW1lICs9IHhtbERhdGFbaV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS50cmltKCk7CiAgICAgICAgICAgICAgICBpZiAodGFnTmFtZVt0YWdOYW1lLmxlbmd0aCAtIDFdID09PSAiLyIpIHsKICAgICAgICAgICAgICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS5zdWJzdHJpbmcoMCwgdGFnTmFtZS5sZW5ndGggLSAxKTsKICAgICAgICAgICAgICAgICAgICBpLS07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkYXRlVGFnTmFtZSh0YWdOYW1lKSkgewogICAgICAgICAgICAgICAgICAgIGxldCBtc2c7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZ05hbWUudHJpbSgpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSAiSW52YWxpZCBzcGFjZSBhZnRlciAnPCcuIjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSAiVGFnICciICsgdGFnTmFtZSArICInIGlzIGFuIGludmFsaWQgbmFtZS4iOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoIkludmFsaWRUYWciLCBtc2csIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSByZWFkQXR0cmlidXRlU3RyKHhtbERhdGEsIGkpOwogICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoIkludmFsaWRBdHRyIiwgIkF0dHJpYnV0ZXMgZm9yICciICsgdGFnTmFtZSArICInIGhhdmUgb3BlbiBxdW90ZS4iLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IGF0dHJTdHIgPSByZXN1bHQudmFsdWU7CiAgICAgICAgICAgICAgICBpID0gcmVzdWx0LmluZGV4OwogICAgICAgICAgICAgICAgaWYgKGF0dHJTdHJbYXR0clN0ci5sZW5ndGggLSAxXSA9PT0gIi8iKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0clN0clN0YXJ0ID0gaSAtIGF0dHJTdHIubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIGF0dHJTdHIgPSBhdHRyU3RyLnN1YnN0cmluZygwLCBhdHRyU3RyLmxlbmd0aCAtIDEpOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0ZUF0dHJpYnV0ZVN0cmluZyhhdHRyU3RyLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0YWdGb3VuZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KGlzVmFsaWQuZXJyLmNvZGUsIGlzVmFsaWQuZXJyLm1zZywgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGF0dHJTdHJTdGFydCArIGlzVmFsaWQuZXJyLmxpbmUpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNsb3NpbmdUYWcpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdC50YWdDbG9zZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCJJbnZhbGlkVGFnIiwgIkNsb3NpbmcgdGFnICciICsgdGFnTmFtZSArICInIGRvZXNuJ3QgaGF2ZSBwcm9wZXIgY2xvc2luZy4iLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0clN0ci50cmltKCkubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoIkludmFsaWRUYWciLCAiQ2xvc2luZyB0YWcgJyIgKyB0YWdOYW1lICsgIicgY2FuJ3QgaGF2ZSBhdHRyaWJ1dGVzIG9yIGludmFsaWQgc3RhcnRpbmcuIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIHRhZ1N0YXJ0UG9zKSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3RnID0gdGFncy5wb3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhZ05hbWUgIT09IG90Zy50YWdOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3BlblBvcyA9IGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBvdGcudGFnU3RhcnRQb3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCJJbnZhbGlkVGFnIiwgIkV4cGVjdGVkIGNsb3NpbmcgdGFnICciICsgb3RnLnRhZ05hbWUgKyAiJyAob3BlbmVkIGluIGxpbmUgIiArIG9wZW5Qb3MubGluZSArICIsIGNvbCAiICsgb3BlblBvcy5jb2wgKyAiKSBpbnN0ZWFkIG9mIGNsb3NpbmcgdGFnICciICsgdGFnTmFtZSArICInLiIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCB0YWdTdGFydFBvcykpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWdzLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFjaGVkUm9vdCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0ZUF0dHJpYnV0ZVN0cmluZyhhdHRyU3RyLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCAhPT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoaXNWYWxpZC5lcnIuY29kZSwgaXNWYWxpZC5lcnIubXNnLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSAtIGF0dHJTdHIubGVuZ3RoICsgaXNWYWxpZC5lcnIubGluZSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAocmVhY2hlZFJvb3QgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCJJbnZhbGlkWG1sIiwgIk11bHRpcGxlIHBvc3NpYmxlIHJvb3Qgbm9kZXMgZm91bmQuIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB0YWdzLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnTmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1N0YXJ0UG9zCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0YWdGb3VuZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IoaSsrOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICI8IikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoeG1sRGF0YVtpICsgMV0gPT09ICIhIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHJlYWRDb21tZW50QW5kQ0RBVEEoeG1sRGF0YSwgaSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2kgKyAxXSA9PT0gIj8iKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gcmVhZFBJKHhtbERhdGEsICsraSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS5lcnIpIHJldHVybiBpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICImIikgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZnRlckFtcCA9IHZhbGlkYXRlQW1wZXJzYW5kKHhtbERhdGEsIGkpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZ0ZXJBbXAgPT0gLTEpIHJldHVybiBnZXRFcnJvck9iamVjdCgiSW52YWxpZENoYXIiLCAiY2hhciAnJicgaXMgbm90IGV4cGVjdGVkLiIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBhZnRlckFtcDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gIjwiKSB7CiAgICAgICAgICAgICAgICAgICAgaS0tOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICIgIiB8fCB4bWxEYXRhW2ldID09PSAiCSIgfHwgeG1sRGF0YVtpXSA9PT0gIlxuIiB8fCB4bWxEYXRhW2ldID09PSAiXHIiKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoIkludmFsaWRDaGFyIiwgImNoYXIgJyIgKyB4bWxEYXRhW2ldICsgIicgaXMgbm90IGV4cGVjdGVkLiIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7CiAgICAgICAgfQogICAgfQogICAgaWYgKCF0YWdGb3VuZCkgewogICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgiSW52YWxpZFhtbCIsICJTdGFydCB0YWcgZXhwZWN0ZWQuIiwgMSk7CiAgICB9IGVsc2UgaWYgKHRhZ3MubGVuZ3RoID09IDEpIHsKICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoIkludmFsaWRUYWciLCAiVW5jbG9zZWQgdGFnICciICsgdGFnc1swXS50YWdOYW1lICsgIicuIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIHRhZ3NbMF0udGFnU3RhcnRQb3MpKTsKICAgIH0gZWxzZSBpZiAodGFncy5sZW5ndGggPiAwKSB7CiAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCJJbnZhbGlkWG1sIiwgIkludmFsaWQgJyIgKyBKU09OLnN0cmluZ2lmeSh0YWdzLm1hcCgodCk9PnQudGFnTmFtZQogICAgICAgICksIG51bGwsIDQpLnJlcGxhY2UoL1xyP1xuL2csICIiKSArICInIGZvdW5kLiIsIHsKICAgICAgICAgICAgbGluZTogMSwKICAgICAgICAgICAgY29sOiAxCiAgICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKfTsKZnVuY3Rpb24gcmVhZFBJKHhtbERhdGEsIGkpIHsKICAgIGNvbnN0IHN0YXJ0ID0gaTsKICAgIGZvcig7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKXsKICAgICAgICBpZiAoeG1sRGF0YVtpXSA9PSAiPyIgfHwgeG1sRGF0YVtpXSA9PSAiICIpIHsKICAgICAgICAgICAgY29uc3QgdGFnbmFtZSA9IHhtbERhdGEuc3Vic3RyKHN0YXJ0LCBpIC0gc3RhcnQpOwogICAgICAgICAgICBpZiAoaSA+IDUgJiYgdGFnbmFtZSA9PT0gInhtbCIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgiSW52YWxpZFhtbCIsICJYTUwgZGVjbGFyYXRpb24gYWxsb3dlZCBvbmx5IGF0IHRoZSBzdGFydCBvZiB0aGUgZG9jdW1lbnQuIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09ICI/IiAmJiB4bWxEYXRhW2kgKyAxXSA9PSAiPiIpIHsKICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gaTsKfQpmdW5jdGlvbiByZWFkQ29tbWVudEFuZENEQVRBKHhtbERhdGEsIGkpIHsKICAgIGlmICh4bWxEYXRhLmxlbmd0aCA+IGkgKyA1ICYmIHhtbERhdGFbaSArIDFdID09PSAiLSIgJiYgeG1sRGF0YVtpICsgMl0gPT09ICItIikgewogICAgICAgIGZvcihpICs9IDM7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICItIiAmJiB4bWxEYXRhW2kgKyAxXSA9PT0gIi0iICYmIHhtbERhdGFbaSArIDJdID09PSAiPiIpIHsKICAgICAgICAgICAgICAgIGkgKz0gMjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSBlbHNlIGlmICh4bWxEYXRhLmxlbmd0aCA+IGkgKyA4ICYmIHhtbERhdGFbaSArIDFdID09PSAiRCIgJiYgeG1sRGF0YVtpICsgMl0gPT09ICJPIiAmJiB4bWxEYXRhW2kgKyAzXSA9PT0gIkMiICYmIHhtbERhdGFbaSArIDRdID09PSAiVCIgJiYgeG1sRGF0YVtpICsgNV0gPT09ICJZIiAmJiB4bWxEYXRhW2kgKyA2XSA9PT0gIlAiICYmIHhtbERhdGFbaSArIDddID09PSAiRSIpIHsKICAgICAgICBsZXQgYW5nbGVCcmFja2V0c0NvdW50ID0gMTsKICAgICAgICBmb3IoaSArPSA4OyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgIGlmICh4bWxEYXRhW2ldID09PSAiPCIpIHsKICAgICAgICAgICAgICAgIGFuZ2xlQnJhY2tldHNDb3VudCsrOwogICAgICAgICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICI+IikgewogICAgICAgICAgICAgICAgYW5nbGVCcmFja2V0c0NvdW50LS07CiAgICAgICAgICAgICAgICBpZiAoYW5nbGVCcmFja2V0c0NvdW50ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9IGVsc2UgaWYgKHhtbERhdGEubGVuZ3RoID4gaSArIDkgJiYgeG1sRGF0YVtpICsgMV0gPT09ICJbIiAmJiB4bWxEYXRhW2kgKyAyXSA9PT0gIkMiICYmIHhtbERhdGFbaSArIDNdID09PSAiRCIgJiYgeG1sRGF0YVtpICsgNF0gPT09ICJBIiAmJiB4bWxEYXRhW2kgKyA1XSA9PT0gIlQiICYmIHhtbERhdGFbaSArIDZdID09PSAiQSIgJiYgeG1sRGF0YVtpICsgN10gPT09ICJbIikgewogICAgICAgIGZvcihpICs9IDg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICJdIiAmJiB4bWxEYXRhW2kgKyAxXSA9PT0gIl0iICYmIHhtbERhdGFbaSArIDJdID09PSAiPiIpIHsKICAgICAgICAgICAgICAgIGkgKz0gMjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGk7Cn0KY29uc3QgZG91YmxlUXVvdGUgPSAnIic7CmNvbnN0IHNpbmdsZVF1b3RlID0gIiciOwpmdW5jdGlvbiByZWFkQXR0cmlidXRlU3RyKHhtbERhdGEsIGkpIHsKICAgIGxldCBhdHRyU3RyID0gIiI7CiAgICBsZXQgc3RhcnRDaGFyID0gIiI7CiAgICBsZXQgdGFnQ2xvc2VkID0gZmFsc2U7CiAgICBmb3IoOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKyl7CiAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09IGRvdWJsZVF1b3RlIHx8IHhtbERhdGFbaV0gPT09IHNpbmdsZVF1b3RlKSB7CiAgICAgICAgICAgIGlmIChzdGFydENoYXIgPT09ICIiKSB7CiAgICAgICAgICAgICAgICBzdGFydENoYXIgPSB4bWxEYXRhW2ldOwogICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0Q2hhciAhPT0geG1sRGF0YVtpXSkgOwogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHN0YXJ0Q2hhciA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAiPiIpIHsKICAgICAgICAgICAgaWYgKHN0YXJ0Q2hhciA9PT0gIiIpIHsKICAgICAgICAgICAgICAgIHRhZ0Nsb3NlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBhdHRyU3RyICs9IHhtbERhdGFbaV07CiAgICB9CiAgICBpZiAoc3RhcnRDaGFyICE9PSAiIikgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgICAgdmFsdWU6IGF0dHJTdHIsCiAgICAgICAgaW5kZXg6IGksCiAgICAgICAgdGFnQ2xvc2VkCiAgICB9Owp9CmNvbnN0IHZhbGlkQXR0clN0clJlZ3hwID0gbmV3IFJlZ0V4cChgKFxccyopKFteXFxzPV0rKShcXHMqPSk/KFxccyooWyciXSkoKFtcXHNcXFNdKSo/KVxcNSk/YCwgImciKTsKZnVuY3Rpb24gdmFsaWRhdGVBdHRyaWJ1dGVTdHJpbmcoYXR0clN0ciwgb3B0aW9ucykgewogICAgY29uc3QgbWF0Y2hlcyA9IHV0aWwuZ2V0QWxsTWF0Y2hlcyhhdHRyU3RyLCB2YWxpZEF0dHJTdHJSZWd4cCk7CiAgICBjb25zdCBhdHRyTmFtZXMgPSB7fTsKICAgIGZvcihsZXQgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKXsKICAgICAgICBpZiAobWF0Y2hlc1tpXVsxXS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCJJbnZhbGlkQXR0ciIsICJBdHRyaWJ1dGUgJyIgKyBtYXRjaGVzW2ldWzJdICsgIicgaGFzIG5vIHNwYWNlIGluIHN0YXJ0aW5nLiIsIGdldFBvc2l0aW9uRnJvbU1hdGNoKG1hdGNoZXNbaV0pKTsKICAgICAgICB9IGVsc2UgaWYgKG1hdGNoZXNbaV1bM10gPT09IHZvaWQgMCAmJiAhb3B0aW9ucy5hbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgiSW52YWxpZEF0dHIiLCAiYm9vbGVhbiBhdHRyaWJ1dGUgJyIgKyBtYXRjaGVzW2ldWzJdICsgIicgaXMgbm90IGFsbG93ZWQuIiwgZ2V0UG9zaXRpb25Gcm9tTWF0Y2gobWF0Y2hlc1tpXSkpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyTmFtZSA9IG1hdGNoZXNbaV1bMl07CiAgICAgICAgaWYgKCF2YWxpZGF0ZUF0dHJOYW1lKGF0dHJOYW1lKSkgewogICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoIkludmFsaWRBdHRyIiwgIkF0dHJpYnV0ZSAnIiArIGF0dHJOYW1lICsgIicgaXMgYW4gaW52YWxpZCBuYW1lLiIsIGdldFBvc2l0aW9uRnJvbU1hdGNoKG1hdGNoZXNbaV0pKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFhdHRyTmFtZXMuaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpKSB7CiAgICAgICAgICAgIGF0dHJOYW1lc1thdHRyTmFtZV0gPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgiSW52YWxpZEF0dHIiLCAiQXR0cmlidXRlICciICsgYXR0ck5hbWUgKyAiJyBpcyByZXBlYXRlZC4iLCBnZXRQb3NpdGlvbkZyb21NYXRjaChtYXRjaGVzW2ldKSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRydWU7Cn0KZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXJBbXBlcnNhbmQoeG1sRGF0YSwgaSkgewogICAgbGV0IHJlID0gL1xkLzsKICAgIGlmICh4bWxEYXRhW2ldID09PSAieCIpIHsKICAgICAgICBpKys7CiAgICAgICAgcmUgPSAvW1xkYS1mQS1GXS87CiAgICB9CiAgICBmb3IoOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKyl7CiAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICI7IikgcmV0dXJuIGk7CiAgICAgICAgaWYgKCF4bWxEYXRhW2ldLm1hdGNoKHJlKSkgYnJlYWs7CiAgICB9CiAgICByZXR1cm4gLTE7Cn0KZnVuY3Rpb24gdmFsaWRhdGVBbXBlcnNhbmQoeG1sRGF0YSwgaSkgewogICAgaSsrOwogICAgaWYgKHhtbERhdGFbaV0gPT09ICI7IikgcmV0dXJuIC0xOwogICAgaWYgKHhtbERhdGFbaV0gPT09ICIjIikgewogICAgICAgIGkrKzsKICAgICAgICByZXR1cm4gdmFsaWRhdGVOdW1iZXJBbXBlcnNhbmQoeG1sRGF0YSwgaSk7CiAgICB9CiAgICBsZXQgY291bnQgPSAwOwogICAgZm9yKDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyssIGNvdW50KyspewogICAgICAgIGlmICh4bWxEYXRhW2ldLm1hdGNoKC9cdy8pICYmIGNvdW50IDwgMjApIGNvbnRpbnVlOwogICAgICAgIGlmICh4bWxEYXRhW2ldID09PSAiOyIpIGJyZWFrOwogICAgICAgIHJldHVybiAtMTsKICAgIH0KICAgIHJldHVybiBpOwp9CmZ1bmN0aW9uIGdldEVycm9yT2JqZWN0KGNvZGUsIG1lc3NhZ2UsIGxpbmVOdW1iZXIpIHsKICAgIHJldHVybiB7CiAgICAgICAgZXJyOiB7CiAgICAgICAgICAgIGNvZGUsCiAgICAgICAgICAgIG1zZzogbWVzc2FnZSwKICAgICAgICAgICAgbGluZTogbGluZU51bWJlci5saW5lIHx8IGxpbmVOdW1iZXIsCiAgICAgICAgICAgIGNvbDogbGluZU51bWJlci5jb2wKICAgICAgICB9CiAgICB9Owp9CmZ1bmN0aW9uIHZhbGlkYXRlQXR0ck5hbWUoYXR0ck5hbWUpIHsKICAgIHJldHVybiB1dGlsLmlzTmFtZShhdHRyTmFtZSk7Cn0KZnVuY3Rpb24gdmFsaWRhdGVUYWdOYW1lKHRhZ25hbWUpIHsKICAgIHJldHVybiB1dGlsLmlzTmFtZSh0YWduYW1lKTsKfQpmdW5jdGlvbiBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaW5kZXgpIHsKICAgIGNvbnN0IGxpbmVzID0geG1sRGF0YS5zdWJzdHJpbmcoMCwgaW5kZXgpLnNwbGl0KC9ccj9cbi8pOwogICAgcmV0dXJuIHsKICAgICAgICBsaW5lOiBsaW5lcy5sZW5ndGgsCiAgICAgICAgY29sOiBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGggKyAxCiAgICB9Owp9CmZ1bmN0aW9uIGdldFBvc2l0aW9uRnJvbU1hdGNoKG1hdGNoKSB7CiAgICByZXR1cm4gbWF0Y2guc3RhcnRJbmRleCArIG1hdGNoWzFdLmxlbmd0aDsKfQp2YXIgdmFsaWRhdG9yID0gewogICAgdmFsaWRhdGUKfTsKY29uc3QgX19jaGFyID0gZnVuY3Rpb24oYSkgewogICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYSk7Cn07CmNvbnN0IGNoYXJzID0gewogICAgbmlsQ2hhcjogX19jaGFyKDE3NiksCiAgICBtaXNzaW5nQ2hhcjogX19jaGFyKDIwMSksCiAgICBuaWxQcmVtaXRpdmU6IF9fY2hhcigxNzUpLAogICAgbWlzc2luZ1ByZW1pdGl2ZTogX19jaGFyKDIwMCksCiAgICBlbXB0eUNoYXI6IF9fY2hhcigxNzgpLAogICAgZW1wdHlWYWx1ZTogX19jaGFyKDE3NyksCiAgICBib3VuZHJ5Q2hhcjogX19jaGFyKDE3OSksCiAgICBvYmpTdGFydDogX19jaGFyKDE5OCksCiAgICBhcnJTdGFydDogX19jaGFyKDIwNCksCiAgICBhcnJheUVuZDogX19jaGFyKDE4NSkKfTsKY29uc3QgY2hhcnNBcnIgPSBbCiAgICBjaGFycy5uaWxDaGFyLAogICAgY2hhcnMubmlsUHJlbWl0aXZlLAogICAgY2hhcnMubWlzc2luZ0NoYXIsCiAgICBjaGFycy5taXNzaW5nUHJlbWl0aXZlLAogICAgY2hhcnMuYm91bmRyeUNoYXIsCiAgICBjaGFycy5lbXB0eUNoYXIsCiAgICBjaGFycy5lbXB0eVZhbHVlLAogICAgY2hhcnMuYXJyYXlFbmQsCiAgICBjaGFycy5vYmpTdGFydCwKICAgIGNoYXJzLmFyclN0YXJ0Cl07CmNvbnN0IF9lID0gZnVuY3Rpb24obm9kZSwgZV9zY2hlbWEsIG9wdGlvbnMpIHsKICAgIGlmICh0eXBlb2YgZV9zY2hlbWEgPT09ICJzdHJpbmciKSB7CiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZVswXSAmJiBub2RlWzBdLnZhbCAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJldHVybiBnZXRWYWx1ZShub2RlWzBdLnZhbCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlKG5vZGUpOwogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgaGFzVmFsaWREYXRhID0gaGFzRGF0YShub2RlKTsKICAgICAgICBpZiAoaGFzVmFsaWREYXRhID09PSB0cnVlKSB7CiAgICAgICAgICAgIGxldCBzdHIgPSAiIjsKICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZV9zY2hlbWEpKSB7CiAgICAgICAgICAgICAgICBzdHIgKz0gY2hhcnMuYXJyU3RhcnQ7CiAgICAgICAgICAgICAgICBjb25zdCBpdGVtU2NoZW1hID0gZV9zY2hlbWFbMF07CiAgICAgICAgICAgICAgICBjb25zdCBhcnJfbGVuID0gbm9kZS5sZW5ndGg7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW1TY2hlbWEgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBhcnJfaSA9IDA7IGFycl9pIDwgYXJyX2xlbjsgYXJyX2krKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBnZXRWYWx1ZShub2RlW2Fycl9pXS52YWwpOwogICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBwcm9jZXNzVmFsdWUoc3RyLCByKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZvcihsZXQgYXJyX2kgPSAwOyBhcnJfaSA8IGFycl9sZW47IGFycl9pKyspewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gX2Uobm9kZVthcnJfaV0sIGl0ZW1TY2hlbWEsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBwcm9jZXNzVmFsdWUoc3RyLCByKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdHIgKz0gY2hhcnMuYXJyYXlFbmQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzdHIgKz0gY2hhcnMub2JqU3RhcnQ7CiAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZV9zY2hlbWEpOwogICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHsKICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZVswXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvcihsZXQgaSBpbiBrZXlzKXsKICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldOwogICAgICAgICAgICAgICAgICAgIGxldCByOwogICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzICYmIG5vZGUuYXR0cnNNYXAgJiYgbm9kZS5hdHRyc01hcFtrZXldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBfZShub2RlLmF0dHJzTWFwW2tleV0sIGVfc2NoZW1hW2tleV0sIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBvcHRpb25zLnRleHROb2RlTmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICByID0gX2Uobm9kZS52YWwsIGVfc2NoZW1hW2tleV0sIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBfZShub2RlLmNoaWxkW2tleV0sIGVfc2NoZW1hW2tleV0sIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBzdHIgPSBwcm9jZXNzVmFsdWUoc3RyLCByKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc3RyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBoYXNWYWxpZERhdGE7CiAgICAgICAgfQogICAgfQp9Owpjb25zdCBnZXRWYWx1ZSA9IGZ1bmN0aW9uKGEpIHsKICAgIHN3aXRjaChhKXsKICAgICAgICBjYXNlIHZvaWQgMDoKICAgICAgICAgICAgcmV0dXJuIGNoYXJzLm1pc3NpbmdQcmVtaXRpdmU7CiAgICAgICAgY2FzZSBudWxsOgogICAgICAgICAgICByZXR1cm4gY2hhcnMubmlsUHJlbWl0aXZlOwogICAgICAgIGNhc2UgIiI6CiAgICAgICAgICAgIHJldHVybiBjaGFycy5lbXB0eVZhbHVlOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHJldHVybiBhOwogICAgfQp9Owpjb25zdCBwcm9jZXNzVmFsdWUgPSBmdW5jdGlvbihzdHIsIHIpIHsKICAgIGlmICghaXNBcHBDaGFyKHJbMF0pICYmICFpc0FwcENoYXIoc3RyW3N0ci5sZW5ndGggLSAxXSkpIHsKICAgICAgICBzdHIgKz0gY2hhcnMuYm91bmRyeUNoYXI7CiAgICB9CiAgICByZXR1cm4gc3RyICsgcjsKfTsKY29uc3QgaXNBcHBDaGFyID0gZnVuY3Rpb24oY2gpIHsKICAgIHJldHVybiBjaGFyc0Fyci5pbmRleE9mKGNoKSAhPT0gLTE7Cn07CmZ1bmN0aW9uIGhhc0RhdGEoak9iaikgewogICAgaWYgKGpPYmogPT09IHZvaWQgMCkgewogICAgICAgIHJldHVybiBjaGFycy5taXNzaW5nQ2hhcjsKICAgIH0gZWxzZSBpZiAoak9iaiA9PT0gbnVsbCkgewogICAgICAgIHJldHVybiBjaGFycy5uaWxDaGFyOwogICAgfSBlbHNlIGlmIChqT2JqLmNoaWxkICYmIE9iamVjdC5rZXlzKGpPYmouY2hpbGQpLmxlbmd0aCA9PT0gMCAmJiAoIWpPYmouYXR0cnNNYXAgfHwgT2JqZWN0LmtleXMoak9iai5hdHRyc01hcCkubGVuZ3RoID09PSAwKSkgewogICAgICAgIHJldHVybiBjaGFycy5lbXB0eUNoYXI7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9CmNvbnN0IGJ1aWxkT3B0aW9ucyQxID0gdXRpbC5idWlsZE9wdGlvbnM7CmNvbnN0IGNvbnZlcnQybmltbiA9IGZ1bmN0aW9uKG5vZGUsIGVfc2NoZW1hLCBvcHRpb25zKSB7CiAgICBvcHRpb25zID0gYnVpbGRPcHRpb25zJDEob3B0aW9ucywgeG1sc3RyMnhtbG5vZGUuZGVmYXVsdE9wdGlvbnMsIHhtbHN0cjJ4bWxub2RlLnByb3BzKTsKICAgIHJldHVybiBfZShub2RlLCBlX3NjaGVtYSwgb3B0aW9ucyk7Cn07CnZhciBjb252ZXJ0Mm5pbW5fMSA9IGNvbnZlcnQybmltbjsKdmFyIG5pbW5kYXRhID0gewogICAgY29udmVydDJuaW1uOiBjb252ZXJ0Mm5pbW5fMQp9Owpjb25zdCBidWlsZE9wdGlvbnMkMiA9IHV0aWwuYnVpbGRPcHRpb25zOwpjb25zdCBjb252ZXJ0VG9Kc29uU3RyaW5nID0gZnVuY3Rpb24obm9kZSwgb3B0aW9ucykgewogICAgb3B0aW9ucyA9IGJ1aWxkT3B0aW9ucyQyKG9wdGlvbnMsIHhtbHN0cjJ4bWxub2RlLmRlZmF1bHRPcHRpb25zLCB4bWxzdHIyeG1sbm9kZS5wcm9wcyk7CiAgICBvcHRpb25zLmluZGVudEJ5ID0gb3B0aW9ucy5pbmRlbnRCeSB8fCAiIjsKICAgIHJldHVybiBfY1RvSnNvblN0cihub2RlLCBvcHRpb25zKTsKfTsKY29uc3QgX2NUb0pzb25TdHIgPSBmdW5jdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkgewogICAgbGV0IGpPYmogPSAieyI7CiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobm9kZS5jaGlsZCk7CiAgICBmb3IobGV0IGluZGV4ID0gMDsgaW5kZXggPCBrZXlzLmxlbmd0aDsgaW5kZXgrKyl7CiAgICAgICAgY29uc3QgdGFnbmFtZSA9IGtleXNbaW5kZXhdOwogICAgICAgIGlmIChub2RlLmNoaWxkW3RhZ25hbWVdICYmIG5vZGUuY2hpbGRbdGFnbmFtZV0ubGVuZ3RoID4gMSkgewogICAgICAgICAgICBqT2JqICs9ICciJyArIHRhZ25hbWUgKyAnIiA6IFsgJzsKICAgICAgICAgICAgZm9yKGxldCB0YWcgaW4gbm9kZS5jaGlsZFt0YWduYW1lXSl7CiAgICAgICAgICAgICAgICBqT2JqICs9IF9jVG9Kc29uU3RyKG5vZGUuY2hpbGRbdGFnbmFtZV1bdGFnXSwgb3B0aW9ucykgKyAiICwgIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBqT2JqID0gak9iai5zdWJzdHIoMCwgak9iai5sZW5ndGggLSAxKSArICIgXSAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGpPYmogKz0gJyInICsgdGFnbmFtZSArICciIDogJyArIF9jVG9Kc29uU3RyKG5vZGUuY2hpbGRbdGFnbmFtZV1bMF0sIG9wdGlvbnMpICsgIiAsIjsKICAgICAgICB9CiAgICB9CiAgICB1dGlsLm1lcmdlKGpPYmosIG5vZGUuYXR0cnNNYXApOwogICAgaWYgKHV0aWwuaXNFbXB0eU9iamVjdChqT2JqKSkgewogICAgICAgIHJldHVybiB1dGlsLmlzRXhpc3Qobm9kZS52YWwpID8gbm9kZS52YWwgOiAiIjsKICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHV0aWwuaXNFeGlzdChub2RlLnZhbCkpIHsKICAgICAgICAgICAgaWYgKCEodHlwZW9mIG5vZGUudmFsID09PSAic3RyaW5nIiAmJiAobm9kZS52YWwgPT09ICIiIHx8IG5vZGUudmFsID09PSBvcHRpb25zLmNkYXRhUG9zaXRpb25DaGFyKSkpIHsKICAgICAgICAgICAgICAgIGpPYmogKz0gJyInICsgb3B0aW9ucy50ZXh0Tm9kZU5hbWUgKyAnIiA6ICcgKyBzdHJpbmd2YWwobm9kZS52YWwpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgaWYgKGpPYmpbak9iai5sZW5ndGggLSAxXSA9PT0gIiwiKSB7CiAgICAgICAgak9iaiA9IGpPYmouc3Vic3RyKDAsIGpPYmoubGVuZ3RoIC0gMik7CiAgICB9CiAgICByZXR1cm4gak9iaiArICJ9IjsKfTsKZnVuY3Rpb24gc3RyaW5ndmFsKHYpIHsKICAgIGlmICh2ID09PSB0cnVlIHx8IHYgPT09IGZhbHNlIHx8ICFpc05hTih2KSkgewogICAgICAgIHJldHVybiB2OwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gJyInICsgdiArICciJzsKICAgIH0KfQp2YXIgY29udmVydFRvSnNvblN0cmluZ18xID0gY29udmVydFRvSnNvblN0cmluZzsKdmFyIG5vZGUyanNvbl9zdHIgPSB7CiAgICBjb252ZXJ0VG9Kc29uU3RyaW5nOiBjb252ZXJ0VG9Kc29uU3RyaW5nXzEKfTsKY29uc3QgYnVpbGRPcHRpb25zJDMgPSB1dGlsLmJ1aWxkT3B0aW9uczsKY29uc3QgZGVmYXVsdE9wdGlvbnMkMiA9IHsKICAgIGF0dHJpYnV0ZU5hbWVQcmVmaXg6ICJAXyIsCiAgICBhdHRyTm9kZU5hbWU6IGZhbHNlLAogICAgdGV4dE5vZGVOYW1lOiAiI3RleHQiLAogICAgaWdub3JlQXR0cmlidXRlczogdHJ1ZSwKICAgIGNkYXRhVGFnTmFtZTogZmFsc2UsCiAgICBjZGF0YVBvc2l0aW9uQ2hhcjogIlxcYyIsCiAgICBmb3JtYXQ6IGZhbHNlLAogICAgaW5kZW50Qnk6ICIgICIsCiAgICBzdXByZXNzRW1wdHlOb2RlOiBmYWxzZSwKICAgIHRhZ1ZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbihhKSB7CiAgICAgICAgcmV0dXJuIGE7CiAgICB9LAogICAgYXR0clZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbihhKSB7CiAgICAgICAgcmV0dXJuIGE7CiAgICB9Cn07CmNvbnN0IHByb3BzJDIgPSBbCiAgICAiYXR0cmlidXRlTmFtZVByZWZpeCIsCiAgICAiYXR0ck5vZGVOYW1lIiwKICAgICJ0ZXh0Tm9kZU5hbWUiLAogICAgImlnbm9yZUF0dHJpYnV0ZXMiLAogICAgImNkYXRhVGFnTmFtZSIsCiAgICAiY2RhdGFQb3NpdGlvbkNoYXIiLAogICAgImZvcm1hdCIsCiAgICAiaW5kZW50QnkiLAogICAgInN1cHJlc3NFbXB0eU5vZGUiLAogICAgInRhZ1ZhbHVlUHJvY2Vzc29yIiwKICAgICJhdHRyVmFsdWVQcm9jZXNzb3IiLAogICAgInJvb3ROb2RlTmFtZSIKXTsKZnVuY3Rpb24gUGFyc2VyKG9wdGlvbnMpIHsKICAgIHRoaXMub3B0aW9ucyA9IGJ1aWxkT3B0aW9ucyQzKG9wdGlvbnMsIGRlZmF1bHRPcHRpb25zJDIsIHByb3BzJDIpOwogICAgaWYgKHRoaXMub3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzIHx8IHRoaXMub3B0aW9ucy5hdHRyTm9kZU5hbWUpIHsKICAgICAgICB0aGlzLmlzQXR0cmlidXRlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmF0dHJQcmVmaXhMZW4gPSB0aGlzLm9wdGlvbnMuYXR0cmlidXRlTmFtZVByZWZpeC5sZW5ndGg7CiAgICAgICAgdGhpcy5pc0F0dHJpYnV0ZSA9IGlzQXR0cmlidXRlOwogICAgfQogICAgaWYgKHRoaXMub3B0aW9ucy5jZGF0YVRhZ05hbWUpIHsKICAgICAgICB0aGlzLmlzQ0RBVEEgPSBpc0NEQVRBOwogICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmlzQ0RBVEEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH07CiAgICB9CiAgICB0aGlzLnJlcGxhY2VDREFUQXN0ciA9IHJlcGxhY2VDREFUQXN0cjsKICAgIHRoaXMucmVwbGFjZUNEQVRBYXJyID0gcmVwbGFjZUNEQVRBYXJyOwogICAgdGhpcy5wcm9jZXNzVGV4dE9yT2JqTm9kZSA9IHByb2Nlc3NUZXh0T3JPYmpOb2RlOwogICAgaWYgKHRoaXMub3B0aW9ucy5mb3JtYXQpIHsKICAgICAgICB0aGlzLmluZGVudGF0ZSA9IGluZGVudGF0ZTsKICAgICAgICB0aGlzLnRhZ0VuZENoYXIgPSAiPlxuIjsKICAgICAgICB0aGlzLm5ld0xpbmUgPSAiXG4iOwogICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmluZGVudGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgfTsKICAgICAgICB0aGlzLnRhZ0VuZENoYXIgPSAiPiI7CiAgICAgICAgdGhpcy5uZXdMaW5lID0gIiI7CiAgICB9CiAgICBpZiAodGhpcy5vcHRpb25zLnN1cHJlc3NFbXB0eU5vZGUpIHsKICAgICAgICB0aGlzLmJ1aWxkVGV4dE5vZGUgPSBidWlsZEVtcHR5VGV4dE5vZGU7CiAgICAgICAgdGhpcy5idWlsZE9iak5vZGUgPSBidWlsZEVtcHR5T2JqTm9kZTsKICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5idWlsZFRleHROb2RlID0gYnVpbGRUZXh0VmFsTm9kZTsKICAgICAgICB0aGlzLmJ1aWxkT2JqTm9kZSA9IGJ1aWxkT2JqZWN0Tm9kZTsKICAgIH0KICAgIHRoaXMuYnVpbGRUZXh0VmFsTm9kZSA9IGJ1aWxkVGV4dFZhbE5vZGU7CiAgICB0aGlzLmJ1aWxkT2JqZWN0Tm9kZSA9IGJ1aWxkT2JqZWN0Tm9kZTsKfQpQYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24oak9iaikgewogICAgaWYgKEFycmF5LmlzQXJyYXkoak9iaikgJiYgdGhpcy5vcHRpb25zLnJvb3ROb2RlTmFtZSAmJiB0aGlzLm9wdGlvbnMucm9vdE5vZGVOYW1lLmxlbmd0aCA+IDEpIHsKICAgICAgICBqT2JqID0gewogICAgICAgICAgICBbdGhpcy5vcHRpb25zLnJvb3ROb2RlTmFtZV06IGpPYmoKICAgICAgICB9OwogICAgfQogICAgcmV0dXJuIHRoaXMuajJ4KGpPYmosIDApLnZhbDsKfTsKUGFyc2VyLnByb3RvdHlwZS5qMnggPSBmdW5jdGlvbihqT2JqLCBsZXZlbCkgewogICAgbGV0IGF0dHJTdHIgPSAiIjsKICAgIGxldCB2YWwgPSAiIjsKICAgIGZvcihsZXQga2V5IGluIGpPYmopewogICAgICAgIGlmICh0eXBlb2Ygak9ialtrZXldID09PSAidW5kZWZpbmVkIikgOwogICAgICAgIGVsc2UgaWYgKGpPYmpba2V5XSA9PT0gbnVsbCkgewogICAgICAgICAgICB2YWwgKz0gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgIjwiICsga2V5ICsgIi8iICsgdGhpcy50YWdFbmRDaGFyOwogICAgICAgIH0gZWxzZSBpZiAoak9ialtrZXldIGluc3RhbmNlb2YgRGF0ZSkgewogICAgICAgICAgICB2YWwgKz0gdGhpcy5idWlsZFRleHROb2RlKGpPYmpba2V5XSwga2V5LCAiIiwgbGV2ZWwpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGpPYmpba2V5XSAhPT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuaXNBdHRyaWJ1dGUoa2V5KTsKICAgICAgICAgICAgaWYgKGF0dHIpIHsKICAgICAgICAgICAgICAgIGF0dHJTdHIgKz0gIiAiICsgYXR0ciArICc9IicgKyB0aGlzLm9wdGlvbnMuYXR0clZhbHVlUHJvY2Vzc29yKCIiICsgak9ialtrZXldKSArICciJzsKICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQ0RBVEEoa2V5KSkgewogICAgICAgICAgICAgICAgaWYgKGpPYmpbdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZV0pIHsKICAgICAgICAgICAgICAgICAgICB2YWwgKz0gdGhpcy5yZXBsYWNlQ0RBVEFzdHIoak9ialt0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lXSwgak9ialtrZXldKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsICs9IHRoaXMucmVwbGFjZUNEQVRBc3RyKCIiLCBqT2JqW2tleV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChqT2JqW3RoaXMub3B0aW9ucy5jZGF0YVRhZ05hbWVdKSA7CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCArPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IoIiIgKyBqT2JqW2tleV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsICs9IHRoaXMuYnVpbGRUZXh0Tm9kZShqT2JqW2tleV0sIGtleSwgIiIsIGxldmVsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShqT2JqW2tleV0pKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmlzQ0RBVEEoa2V5KSkgewogICAgICAgICAgICAgICAgdmFsICs9IHRoaXMuaW5kZW50YXRlKGxldmVsKTsKICAgICAgICAgICAgICAgIGlmIChqT2JqW3RoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWVdKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsICs9IHRoaXMucmVwbGFjZUNEQVRBYXJyKGpPYmpbdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZV0sIGpPYmpba2V5XSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhbCArPSB0aGlzLnJlcGxhY2VDREFUQWFycigiIiwgak9ialtrZXldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbnN0IGFyckxlbiA9IGpPYmpba2V5XS5sZW5ndGg7CiAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgYXJyTGVuOyBqKyspewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBqT2JqW2tleV1bal07CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAidW5kZWZpbmVkIikgOwogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0gPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsICs9IHRoaXMuaW5kZW50YXRlKGxldmVsKSArICI8IiArIGtleSArICIvIiArIHRoaXMudGFnRW5kQ2hhcjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICB2YWwgKz0gdGhpcy5wcm9jZXNzVGV4dE9yT2JqTm9kZShpdGVtLCBrZXksIGxldmVsKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB2YWwgKz0gdGhpcy5idWlsZFRleHROb2RlKGl0ZW0sIGtleSwgIiIsIGxldmVsKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF0dHJOb2RlTmFtZSAmJiBrZXkgPT09IHRoaXMub3B0aW9ucy5hdHRyTm9kZU5hbWUpIHsKICAgICAgICAgICAgICAgIGNvbnN0IEtzID0gT2JqZWN0LmtleXMoak9ialtrZXldKTsKICAgICAgICAgICAgICAgIGNvbnN0IEwgPSBLcy5sZW5ndGg7CiAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgTDsgaisrKXsKICAgICAgICAgICAgICAgICAgICBhdHRyU3RyICs9ICIgIiArIEtzW2pdICsgJz0iJyArIHRoaXMub3B0aW9ucy5hdHRyVmFsdWVQcm9jZXNzb3IoIiIgKyBqT2JqW2tleV1bS3Nbal1dKSArICciJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhbCArPSB0aGlzLnByb2Nlc3NUZXh0T3JPYmpOb2RlKGpPYmpba2V5XSwga2V5LCBsZXZlbCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gewogICAgICAgIGF0dHJTdHIsCiAgICAgICAgdmFsCiAgICB9Owp9OwpmdW5jdGlvbiBwcm9jZXNzVGV4dE9yT2JqTm9kZShvYmplY3QsIGtleSwgbGV2ZWwpIHsKICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuajJ4KG9iamVjdCwgbGV2ZWwgKyAxKTsKICAgIGlmIChvYmplY3RbdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZV0gIT09IHZvaWQgMCAmJiBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCA9PT0gMSkgewogICAgICAgIHJldHVybiB0aGlzLmJ1aWxkVGV4dE5vZGUocmVzdWx0LnZhbCwga2V5LCByZXN1bHQuYXR0clN0ciwgbGV2ZWwpOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5idWlsZE9iak5vZGUocmVzdWx0LnZhbCwga2V5LCByZXN1bHQuYXR0clN0ciwgbGV2ZWwpOwogICAgfQp9CmZ1bmN0aW9uIHJlcGxhY2VDREFUQXN0cihzdHIsIGNkYXRhKSB7CiAgICBzdHIgPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IoIiIgKyBzdHIpOwogICAgaWYgKHRoaXMub3B0aW9ucy5jZGF0YVBvc2l0aW9uQ2hhciA9PT0gIiIgfHwgc3RyID09PSAiIikgewogICAgICAgIHJldHVybiBzdHIgKyAiPCFbQ0RBVEFbIiArIGNkYXRhICsgIl1dIiArIHRoaXMudGFnRW5kQ2hhcjsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKHRoaXMub3B0aW9ucy5jZGF0YVBvc2l0aW9uQ2hhciwgIjwhW0NEQVRBWyIgKyBjZGF0YSArICJdXSIgKyB0aGlzLnRhZ0VuZENoYXIpOwogICAgfQp9CmZ1bmN0aW9uIHJlcGxhY2VDREFUQWFycihzdHIsIGNkYXRhKSB7CiAgICBzdHIgPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IoIiIgKyBzdHIpOwogICAgaWYgKHRoaXMub3B0aW9ucy5jZGF0YVBvc2l0aW9uQ2hhciA9PT0gIiIgfHwgc3RyID09PSAiIikgewogICAgICAgIHJldHVybiBzdHIgKyAiPCFbQ0RBVEFbIiArIGNkYXRhLmpvaW4oIl1dPjwhW0NEQVRBWyIpICsgIl1dIiArIHRoaXMudGFnRW5kQ2hhcjsKICAgIH0gZWxzZSB7CiAgICAgICAgZm9yKGxldCB2IGluIGNkYXRhKXsKICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UodGhpcy5vcHRpb25zLmNkYXRhUG9zaXRpb25DaGFyLCAiPCFbQ0RBVEFbIiArIGNkYXRhW3ZdICsgIl1dPiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RyICsgdGhpcy5uZXdMaW5lOwogICAgfQp9CmZ1bmN0aW9uIGJ1aWxkT2JqZWN0Tm9kZSh2YWwsIGtleSwgYXR0clN0ciwgbGV2ZWwpIHsKICAgIGlmIChhdHRyU3RyICYmIHZhbC5pbmRleE9mKCI8IikgPT09IC0xKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICI8IiArIGtleSArIGF0dHJTdHIgKyAiPiIgKyB2YWwgKyAiPC8iICsga2V5ICsgdGhpcy50YWdFbmRDaGFyOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgIjwiICsga2V5ICsgYXR0clN0ciArIHRoaXMudGFnRW5kQ2hhciArIHZhbCArIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICI8LyIgKyBrZXkgKyB0aGlzLnRhZ0VuZENoYXI7CiAgICB9Cn0KZnVuY3Rpb24gYnVpbGRFbXB0eU9iak5vZGUodmFsLCBrZXksIGF0dHJTdHIsIGxldmVsKSB7CiAgICBpZiAodmFsICE9PSAiIikgewogICAgICAgIHJldHVybiB0aGlzLmJ1aWxkT2JqZWN0Tm9kZSh2YWwsIGtleSwgYXR0clN0ciwgbGV2ZWwpOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgIjwiICsga2V5ICsgYXR0clN0ciArICIvIiArIHRoaXMudGFnRW5kQ2hhcjsKICAgIH0KfQpmdW5jdGlvbiBidWlsZFRleHRWYWxOb2RlKHZhbCwga2V5LCBhdHRyU3RyLCBsZXZlbCkgewogICAgcmV0dXJuIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICI8IiArIGtleSArIGF0dHJTdHIgKyAiPiIgKyB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IodmFsKSArICI8LyIgKyBrZXkgKyB0aGlzLnRhZ0VuZENoYXI7Cn0KZnVuY3Rpb24gYnVpbGRFbXB0eVRleHROb2RlKHZhbCwga2V5LCBhdHRyU3RyLCBsZXZlbCkgewogICAgaWYgKHZhbCAhPT0gIiIpIHsKICAgICAgICByZXR1cm4gdGhpcy5idWlsZFRleHRWYWxOb2RlKHZhbCwga2V5LCBhdHRyU3RyLCBsZXZlbCk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAiPCIgKyBrZXkgKyBhdHRyU3RyICsgIi8iICsgdGhpcy50YWdFbmRDaGFyOwogICAgfQp9CmZ1bmN0aW9uIGluZGVudGF0ZShsZXZlbCkgewogICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pbmRlbnRCeS5yZXBlYXQobGV2ZWwpOwp9CmZ1bmN0aW9uIGlzQXR0cmlidXRlKG5hbWUpIHsKICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgodGhpcy5vcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXgpKSB7CiAgICAgICAgcmV0dXJuIG5hbWUuc3Vic3RyKHRoaXMuYXR0clByZWZpeExlbik7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KfQpmdW5jdGlvbiBpc0NEQVRBKG5hbWUpIHsKICAgIHJldHVybiBuYW1lID09PSB0aGlzLm9wdGlvbnMuY2RhdGFUYWdOYW1lOwp9CnZhciBqc29uMnhtbCA9IFBhcnNlcjsKdmFyIHBhcnNlciA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewogICAgY29uc3QgeDJ4bWxub2RlID0geG1sc3RyMnhtbG5vZGU7CiAgICBjb25zdCBidWlsZE9wdGlvbnMyID0gdXRpbC5idWlsZE9wdGlvbnM7CiAgICBleHBvcnRzLnBhcnNlID0gZnVuY3Rpb24oeG1sRGF0YSwgZ2l2ZW5PcHRpb25zID0ge30sIHZhbGlkYXRpb25PcHRpb24pIHsKICAgICAgICBpZiAodmFsaWRhdGlvbk9wdGlvbikgewogICAgICAgICAgICBpZiAodmFsaWRhdGlvbk9wdGlvbiA9PT0gdHJ1ZSkgdmFsaWRhdGlvbk9wdGlvbiA9IHt9OwogICAgICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0b3IudmFsaWRhdGUoeG1sRGF0YSwgdmFsaWRhdGlvbk9wdGlvbik7CiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHsKICAgICAgICAgICAgICAgIHRocm93IEVycm9yKHJlc3VsdC5lcnIubXNnKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoZ2l2ZW5PcHRpb25zLnBhcnNlVHJ1ZU51bWJlck9ubHkgJiYgZ2l2ZW5PcHRpb25zLnBhcnNlTm9kZVZhbHVlICE9PSBmYWxzZSAmJiAhZ2l2ZW5PcHRpb25zLm51bVBhcnNlT3B0aW9ucykgewogICAgICAgICAgICBnaXZlbk9wdGlvbnMubnVtUGFyc2VPcHRpb25zID0gewogICAgICAgICAgICAgICAgbGVhZGluZ1plcm9zOiBmYWxzZQogICAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBsZXQgb3B0aW9ucyA9IGJ1aWxkT3B0aW9uczIoZ2l2ZW5PcHRpb25zLCB4MnhtbG5vZGUuZGVmYXVsdE9wdGlvbnMsIHgyeG1sbm9kZS5wcm9wcyk7CiAgICAgICAgY29uc3QgdHJhdmVyc2FibGVPYmogPSB4bWxzdHIyeG1sbm9kZS5nZXRUcmF2ZXJzYWxPYmooeG1sRGF0YSwgb3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIG5vZGUyanNvbi5jb252ZXJ0VG9Kc29uKHRyYXZlcnNhYmxlT2JqLCBvcHRpb25zKTsKICAgIH07CiAgICBleHBvcnRzLmNvbnZlcnRUb25pbW4gPSBuaW1uZGF0YS5jb252ZXJ0Mm5pbW47CiAgICBleHBvcnRzLmdldFRyYXZlcnNhbE9iaiA9IHhtbHN0cjJ4bWxub2RlLmdldFRyYXZlcnNhbE9iajsKICAgIGV4cG9ydHMuY29udmVydFRvSnNvbiA9IG5vZGUyanNvbi5jb252ZXJ0VG9Kc29uOwogICAgZXhwb3J0cy5jb252ZXJ0VG9Kc29uU3RyaW5nID0gbm9kZTJqc29uX3N0ci5jb252ZXJ0VG9Kc29uU3RyaW5nOwogICAgZXhwb3J0cy52YWxpZGF0ZSA9IHZhbGlkYXRvci52YWxpZGF0ZTsKICAgIGV4cG9ydHMuajJ4UGFyc2VyID0ganNvbjJ4bWw7CiAgICBleHBvcnRzLnBhcnNlVG9OaW1uID0gZnVuY3Rpb24oeG1sRGF0YSwgc2NoZW1hLCBvcHRpb25zKSB7CiAgICAgICAgcmV0dXJuIGV4cG9ydHMuY29udmVydFRvbmltbihleHBvcnRzLmdldFRyYXZlcnNhbE9iaih4bWxEYXRhLCBvcHRpb25zKSwgc2NoZW1hLCBvcHRpb25zKTsKICAgIH07Cn0pOwpwYXJzZXIuY29udmVydFRvSnNvbjsKcGFyc2VyLmNvbnZlcnRUb0pzb25TdHJpbmc7CnBhcnNlci5jb252ZXJ0VG9uaW1uOwp2YXIgZ2V0VHJhdmVyc2FsT2JqJDEgPSBwYXJzZXIuZ2V0VHJhdmVyc2FsT2JqOwpwYXJzZXIuajJ4UGFyc2VyOwpwYXJzZXIucGFyc2U7CnBhcnNlci5wYXJzZVRvTmltbjsKcGFyc2VyLnZhbGlkYXRlOwpmdW5jdGlvbiBwYXJzZVhtbCh4bWwpIHsKICAgIGNvbnN0IHJ0ID0gZ2V0VHJhdmVyc2FsT2JqJDEoeG1sLCB7CiAgICAgICAgaWdub3JlQXR0cmlidXRlczogZmFsc2UsCiAgICAgICAgcGFyc2VBdHRyaWJ1dGVWYWx1ZTogZmFsc2UsCiAgICAgICAgcGFyc2VOb2RlVmFsdWU6IGZhbHNlCiAgICB9KTsKICAgIGNvbnN0IG5hbWVzcGFjZXMgPSBuZXcgWG1sTmFtZXNwYWNlcygpOwogICAgYXBwbHlRbmFtZXMocnQsIG5hbWVzcGFjZXMpOwogICAgY2hlY2tFcXVhbCgnbmFtZXNwYWNlcy5zdGFja1NpemUnLCBuYW1lc3BhY2VzLnN0YWNrU2l6ZSwgMCk7CiAgICByZXR1cm4gcnQ7Cn0KZnVuY3Rpb24gY29tcHV0ZUF0dHJpYnV0ZU1hcChhdHRyc01hcCkgewogICAgbGV0IG1hcDsKICAgIGlmIChhdHRyc01hcCkgewogICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhhdHRyc01hcCkpewogICAgICAgICAgICBpZiAoIW5hbWUuc3RhcnRzV2l0aCgnQF8nKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgYXR0cnNNYXAgbmFtZTogJHtuYW1lfSwgJHthdHRyc01hcH1gKTsKICAgICAgICAgICAgbWFwID0gbWFwIHx8IG5ldyBNYXAoKTsKICAgICAgICAgICAgbWFwLnNldChuYW1lLnN1YnN0cmluZygyKSwgdmFsdWUpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBtYXAgfHwgRU1QVFlfU1RSSU5HX01BUDsKfQpmdW5jdGlvbiBmaW5kQ2hpbGRFbGVtZW50cyhub2RlLCAuLi5xbmFtZXMpIHsKICAgIGxldCBydDsKICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhub2RlLmNoaWxkKSl7CiAgICAgICAgZm9yIChjb25zdCBxbmFtZSBvZiBxbmFtZXMpewogICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHZhbHVlKXsKICAgICAgICAgICAgICAgIGNvbnN0IGV4dENoaWxkID0gY2hpbGQ7CiAgICAgICAgICAgICAgICBpZiAocW5hbWUubmFtZSA9PT0gJyonID8gcW5hbWUubmFtZXNwYWNlVXJpID09PSBleHRDaGlsZC5xbmFtZS5uYW1lc3BhY2VVcmkgOiBxbmFtZUVxKHFuYW1lLCBleHRDaGlsZC5xbmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICBydCA9IHJ0IHx8IFtdOwogICAgICAgICAgICAgICAgICAgIHJ0LnB1c2goZXh0Q2hpbGQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHJ0IHx8IEVNUFRZX1hNTF9OT0RFX0FSUkFZOwp9CmZ1bmN0aW9uIGZpbmRFbGVtZW50UmVjdXJzaXZlKHJvb3QsIHRlc3QpIHsKICAgIGlmICh0ZXN0KHJvb3QpKSByZXR1cm4gcm9vdDsKICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhyb290LmNoaWxkKSl7CiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB2YWx1ZSl7CiAgICAgICAgICAgIGNvbnN0IGV4dENoaWxkID0gY2hpbGQ7CiAgICAgICAgICAgIGNvbnN0IHJ0ID0gZmluZEVsZW1lbnRSZWN1cnNpdmUoZXh0Q2hpbGQsIHRlc3QpOwogICAgICAgICAgICBpZiAocnQpIHJldHVybiBydDsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdW5kZWZpbmVkOwp9CmZ1bmN0aW9uIHFuYW1lRXEobGhzLCByaHMpIHsKICAgIHJldHVybiBsaHMubmFtZSA9PT0gcmhzLm5hbWUgJiYgbGhzLm5hbWVzcGFjZVVyaSA9PT0gcmhzLm5hbWVzcGFjZVVyaTsKfQpmdW5jdGlvbiBxbmFtZXNJbmNsdWRlKGxocywgcmhzKSB7CiAgICByZXR1cm4gbGhzLnNvbWUoKHYpPT5xbmFtZUVxKHYsIHJocykKICAgICk7Cn0KY29uc3QgRU1QVFlfU1RSSU5HX01BUCA9IG5ldyBNYXAoKTsKY29uc3QgRU1QVFlfWE1MX05PREVfQVJSQVkgPSBbXTsKZnVuY3Rpb24gYXBwbHlRbmFtZXMobm9kZSwgbmFtZXNwYWNlcykgewogICAgdHJ5IHsKICAgICAgICBjb25zdCBhdHRzID0gbmFtZXNwYWNlcy5wdXNoKG5vZGUuYXR0cnNNYXApOwogICAgICAgIGNvbnN0IG5vZGVBc0FueSA9IG5vZGU7CiAgICAgICAgbm9kZUFzQW55LmF0dHMgPSBhdHRzOwogICAgICAgIG5vZGVBc0FueS5xbmFtZSA9IGNvbXB1dGVRbmFtZShub2RlLnRhZ25hbWUsIG5hbWVzcGFjZXMpOwogICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhub2RlLmNoaWxkKSl7CiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGROb2RlIG9mIHZhbHVlKXsKICAgICAgICAgICAgICAgIGFwcGx5UW5hbWVzKGNoaWxkTm9kZSwgbmFtZXNwYWNlcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9IGZpbmFsbHl7CiAgICAgICAgbmFtZXNwYWNlcy5wb3AoKTsKICAgIH0KfQpmdW5jdGlvbiBjb21wdXRlUW5hbWUobmFtZVdpdGhPcHRpb25hbFByZWZpeCwgbmFtZXNwYWNlcykgewogICAgY29uc3QgaSA9IG5hbWVXaXRoT3B0aW9uYWxQcmVmaXguaW5kZXhPZignOicpOwogICAgaWYgKGkgPCAwKSByZXR1cm4gewogICAgICAgIG5hbWU6IG5hbWVXaXRoT3B0aW9uYWxQcmVmaXgsCiAgICAgICAgbmFtZXNwYWNlVXJpOiBuYW1lc3BhY2VzLmZpbmROYW1lc3BhY2VVcmkoJycpCiAgICB9OwogICAgcmV0dXJuIHsKICAgICAgICBuYW1lOiBuYW1lV2l0aE9wdGlvbmFsUHJlZml4LnN1YnN0cmluZyhpICsgMSksCiAgICAgICAgbmFtZXNwYWNlVXJpOiBuYW1lc3BhY2VzLmdldE5hbWVzcGFjZVVyaShuYW1lV2l0aE9wdGlvbmFsUHJlZml4LnN1YnN0cmluZygwLCBpKSkKICAgIH07Cn0KY2xhc3MgWG1sTmFtZXNwYWNlcyB7CiAgICBzdGFjayA9IFtdOwogICAgZ2V0IHN0YWNrU2l6ZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGg7CiAgICB9CiAgICBwdXNoKGF0dHJzTWFwKSB7CiAgICAgICAgY29uc3QgYXR0cnMgPSBjb21wdXRlQXR0cmlidXRlTWFwKGF0dHJzTWFwKTsKICAgICAgICBsZXQgbWFwOwogICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBhdHRycy5lbnRyaWVzKCkpewogICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3htbG5zJykgewogICAgICAgICAgICAgICAgbWFwID0gbWFwIHx8IG5ldyBNYXAoKTsKICAgICAgICAgICAgICAgIG1hcC5zZXQoJycsIHZhbHVlKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ3htbG5zOicpKSB7CiAgICAgICAgICAgICAgICBtYXAgPSBtYXAgfHwgbmV3IE1hcCgpOwogICAgICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gbmFtZS5zdWJzdHJpbmcoNik7CiAgICAgICAgICAgICAgICBtYXAuc2V0KHByZWZpeCwgdmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRoaXMuc3RhY2sucHVzaChtYXAgfHwgRU1QVFlfU1RSSU5HX01BUCk7CiAgICAgICAgcmV0dXJuIGF0dHJzOwogICAgfQogICAgcG9wKCkgewogICAgICAgIHRoaXMuc3RhY2sucG9wKCk7CiAgICB9CiAgICBmaW5kTmFtZXNwYWNlVXJpKHByZWZpeCkgewogICAgICAgIGZvcihsZXQgaSA9IHRoaXMuc3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pewogICAgICAgICAgICBjb25zdCBydCA9IHRoaXMuc3RhY2tbaV0uZ2V0KHByZWZpeCk7CiAgICAgICAgICAgIGlmIChydCkgcmV0dXJuIHJ0OwogICAgICAgIH0KICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogICAgZ2V0TmFtZXNwYWNlVXJpKHByZWZpeCkgewogICAgICAgIGZvcihsZXQgaSA9IHRoaXMuc3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pewogICAgICAgICAgICBjb25zdCBydCA9IHRoaXMuc3RhY2tbaV0uZ2V0KHByZWZpeCk7CiAgICAgICAgICAgIGlmIChydCkgcmV0dXJuIHJ0OwogICAgICAgIH0KICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGdldE5hbWVzcGFjZVVyaTogcHJlZml4IG5vdCBmb3VuZDogJHtwcmVmaXh9YCk7CiAgICB9Cn0KZnVuY3Rpb24gaXNSZWFkb25seUFycmF5KGFyZykgewogICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTsKfQpmdW5jdGlvbiBpc1BvZGNhc3RJbWFnZXNTcmNTZXQodHJpbW1lZFRleHQpIHsKICAgIGNvbnN0IHdpZHRocyA9IG5ldyBTZXQoKTsKICAgIGNvbnN0IGRlbnNpdGllcyA9IG5ldyBTZXQoKTsKICAgIGxldCB3aXRoV2lkdGhDb3VudCA9IDA7CiAgICBjb25zdCBwaWVjZXMgPSB0cmltbWVkVGV4dC5zcGxpdCgvLFxzKy8pOwogICAgZm9yIChjb25zdCBwaWVjZSBvZiBwaWVjZXMpewogICAgICAgIGNvbnN0IG0gPSAvXihbXlxzXSspKFxzKyhcZCt3fFxkKyhcLlxkKyk/eCkpPyQvLmV4ZWMocGllY2UpOwogICAgICAgIGlmICghbSkgcmV0dXJuIGZhbHNlOwogICAgICAgIGNvbnN0IHVybCA9IG1bMV07CiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IG1bM10gfHwgJyc7CiAgICAgICAgaWYgKCFpc1VybCh1cmwpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgaWYgKGRlc2NyaXB0b3IuZW5kc1dpdGgoJ3cnKSkgewogICAgICAgICAgICB3aXRoV2lkdGhDb3VudCsrOwogICAgICAgICAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KGRlc2NyaXB0b3Iuc3Vic3RyaW5nKDAsIGRlc2NyaXB0b3IubGVuZ3RoIC0gMSkpOwogICAgICAgICAgICBpZiAod2lkdGggPD0gMCkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBpZiAod2lkdGhzLmhhcyh3aWR0aCkpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgd2lkdGhzLmFkZCh3aWR0aCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc3QgZGVuc2l0eSA9IGRlc2NyaXB0b3IuZW5kc1dpdGgoJ3gnKSA/IHBhcnNlRmxvYXQoZGVzY3JpcHRvci5zdWJzdHJpbmcoMCwgZGVzY3JpcHRvci5sZW5ndGggLSAxKSkgOiAxOwogICAgICAgICAgICBpZiAoZGVuc2l0eSA8PSAwKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGlmIChkZW5zaXRpZXMuaGFzKGRlbnNpdHkpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGRlbnNpdGllcy5hZGQoZGVuc2l0eSk7CiAgICAgICAgfQogICAgfQogICAgaWYgKHdpdGhXaWR0aENvdW50ID4gMCAmJiB3aXRoV2lkdGhDb3VudCAhPT0gcGllY2VzLmxlbmd0aCkgcmV0dXJuIGZhbHNlOwogICAgcmV0dXJuIHRydWU7Cn0KZnVuY3Rpb24gaXNOb3RFbXB0eSh0cmltbWVkVGV4dCkgewogICAgcmV0dXJuIHRyaW1tZWRUZXh0Lmxlbmd0aCA+IDA7Cn0KZnVuY3Rpb24gaXNVcmwodHJpbW1lZFRleHQpIHsKICAgIGNvbnN0IHUgPSB0cnlQYXJzZVVybCh0cmltbWVkVGV4dCk7CiAgICByZXR1cm4gdSAmJiB1LnByb3RvY29sID09PSAnaHR0cHM6JyB8fCB1Py5wcm90b2NvbCA9PT0gJ2h0dHA6JzsKfQpmdW5jdGlvbiBpc1VyaSh0cmltbWVkVGV4dCkgewogICAgcmV0dXJuIHRyeVBhcnNlVXJsKHRyaW1tZWRUZXh0KSAhPT0gdW5kZWZpbmVkOwp9CmZ1bmN0aW9uIGlzTWltZVR5cGUodHJpbW1lZFRleHQpIHsKICAgIHJldHVybiAvXlx3K1wvWy0rLlx3XSskLy50ZXN0KHRyaW1tZWRUZXh0KTsKfQpmdW5jdGlvbiBpc1V1aWQodHJpbW1lZFRleHQpIHsKICAgIHJldHVybiAvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVswLTlhLWZdezR9LVswLTlhLWZdezR9LVswLTlhLWZdezEyfSQvLnRlc3QodHJpbW1lZFRleHQpOwp9CmZ1bmN0aW9uIGlzRW1haWxBZGRyZXNzKHRyaW1tZWRUZXh0KSB7CiAgICByZXR1cm4gL15bXkBcc10rQFteQFxzXSskLy50ZXN0KHRyaW1tZWRUZXh0KTsKfQpmdW5jdGlvbiBpc0F0TW9zdENoYXJhY3RlcnMobWF4Q2hhcmFjdGVycykgewogICAgcmV0dXJuICh0cmltbWVkVGV4dCk9PnRyaW1tZWRUZXh0Lmxlbmd0aCA8PSBtYXhDaGFyYWN0ZXJzCiAgICA7Cn0KZnVuY3Rpb24gaXNTZWNvbmRzKHRyaW1tZWRUZXh0KSB7CiAgICByZXR1cm4gL15cZCsoXC5cZCspPyQvLnRlc3QodHJpbW1lZFRleHQpOwp9CmZ1bmN0aW9uIGlzR2VvTGF0TG9uKHRyaW1tZWRUZXh0KSB7CiAgICByZXR1cm4gL15nZW86LT9cZHsxLDJ9KFwuXGQrKT8sLT9cZHsxLDN9KFwuXGQrKT8kLy50ZXN0KHRyaW1tZWRUZXh0KTsKfQpmdW5jdGlvbiBpc09wZW5TdHJlZXRNYXBJZGVudGlmaWVyKHRyaW1tZWRUZXh0KSB7CiAgICByZXR1cm4gL15bTldSXVxkKygjXGQrKT8kLy50ZXN0KHRyaW1tZWRUZXh0KTsKfQpmdW5jdGlvbiBpc05vbk5lZ2F0aXZlSW50ZWdlcih0cmltbWVkVGV4dCkgewogICAgcmV0dXJuIC9eXGQrJC8udGVzdCh0cmltbWVkVGV4dCkgJiYgcGFyc2VJbnQodHJpbW1lZFRleHQpID49IDAgJiYgcGFyc2VJbnQodHJpbW1lZFRleHQpLnRvU3RyaW5nKCkgPT09IHRyaW1tZWRUZXh0Owp9CmZ1bmN0aW9uIGlzRGVjaW1hbCh0cmltbWVkVGV4dCkgewogICAgcmV0dXJuIC9eXGQrKFwuXGQrKT8kLy50ZXN0KHRyaW1tZWRUZXh0KTsKfQpmdW5jdGlvbiBpc1JmYzI4MjIodHJpbW1lZFRleHQpIHsKICAgIHJldHVybiAvXlswLTlBLVphLXosIF0rIFxkezJ9OlxkezJ9KDpcZHsyfSk/ICgtP1swLTldK3xbQS1aXXszLH0pJC8udGVzdCh0cmltbWVkVGV4dCk7Cn0KZnVuY3Rpb24gaXNJc284NjAxKHRyaW1tZWRUZXh0KSB7CiAgICByZXR1cm4gL15cZHs0fS1cZHsyfS1cZHsyfVRcZHsyfTpcZHsyfTpcZHsyfShcLlxkKyk/WiQvLnRlc3QodHJpbW1lZFRleHQpOwp9CmZ1bmN0aW9uIGlzQm9vbGVhbih0cmltbWVkVGV4dCkgewogICAgcmV0dXJuIC9eKHRydWV8ZmFsc2UpJC8udGVzdCh0cmltbWVkVGV4dCk7Cn0KZnVuY3Rpb24gaXNQb2RjYXN0VmFsdWVUeXBlU2x1Zyh0cmltbWVkVGV4dCkgewogICAgcmV0dXJuIC9eW2Etel0rJC8udGVzdCh0cmltbWVkVGV4dCk7Cn0KZnVuY3Rpb24gaXNQb2RjYXN0TWVkaXVtKHRyaW1tZWRUZXh0KSB7CiAgICByZXR1cm4gL15bYS16XSskLy50ZXN0KHRyaW1tZWRUZXh0KTsKfQpmdW5jdGlvbiB0cnlQYXJzZVVybChzdHIsIGJhc2UpIHsKICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIG5ldyBVUkwoc3RyLCBiYXNlKTsKICAgIH0gY2F0Y2ggIHsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQp9CmZ1bmN0aW9uIHZhbGlkYXRlRmVlZFhtbCh4bWwsIGNhbGxiYWNrcykgewogICAgaWYgKHhtbC50YWduYW1lICE9PSAnIXhtbCcpIHJldHVybiBjYWxsYmFja3Mub25FcnJvcih4bWwsIGBCYWQgeG1sLnRhZ25hbWU6ICR7eG1sLnRhZ25hbWV9YCk7CiAgICBpZiAoT2JqZWN0LmtleXMoeG1sLmF0dHJzTWFwKS5sZW5ndGggPiAwKSByZXR1cm4gY2FsbGJhY2tzLm9uRXJyb3IoeG1sLCBgQmFkIHhtbC5hdHRyc01hcDogJHt4bWwuYXR0cnNNYXB9YCk7CiAgICBjb25zdCBkb2NFbGVtZW50ID0gT2JqZWN0LnZhbHVlcyh4bWwuY2hpbGQpLmZsYXRNYXAoKHYpPT52CiAgICApWzBdOwogICAgaWYgKCFkb2NFbGVtZW50KSByZXR1cm4gY2FsbGJhY2tzLm9uRXJyb3IoeG1sLCBgTm8geG1sIHJvb3QgZWxlbWVudGApOwogICAgdmFsaWRhdGVSc3MoZG9jRWxlbWVudCwgY2FsbGJhY2tzKTsKfQpmdW5jdGlvbiBwb2RjYXN0SW5kZXhSZWZlcmVuY2UoaHJlZikgewogICAgcmV0dXJuIHsKICAgICAgICBydWxlc2V0OiAncG9kY2FzdGluZGV4JywKICAgICAgICBocmVmCiAgICB9Owp9CmZ1bmN0aW9uIGdldFNpbmdsZUNoaWxkKG5vZGUsIG5hbWUsIGNhbGxiYWNrcywgb3B0cyA9IHt9KSB7CiAgICBjb25zdCBjaGlsZHJlbiA9IGZpbmRDaGlsZEVsZW1lbnRzKG5vZGUsIHsKICAgICAgICBuYW1lCiAgICB9KTsKICAgIGlmIChjaGlsZHJlbi5sZW5ndGggIT09IDEpIHsKICAgICAgICBjYWxsYmFja3Mub25XYXJuaW5nKG5vZGUsIGBFeHBlY3RlZCBzaW5nbGUgPCR7bmFtZX0+IGNoaWxkIGVsZW1lbnQgdW5kZXIgPCR7bm9kZS50YWduYW1lfT4sIGZvdW5kICR7Y2hpbGRyZW4ubGVuZ3RoID09PSAwID8gJ25vbmUnIDogY2hpbGRyZW4ubGVuZ3RofWAsIG9wdHMpOwogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CiAgICByZXR1cm4gY2hpbGRyZW5bMF07Cn0KZnVuY3Rpb24gdmFsaWRhdGVSc3MocnNzLCBjYWxsYmFja3MpIHsKICAgIGNvbnN0IG9wdHMgPSB7CiAgICAgICAgcmVmZXJlbmNlOiB7CiAgICAgICAgICAgIHJ1bGVzZXQ6ICdyc3MnLAogICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9jeWJlci5oYXJ2YXJkLmVkdS9yc3MvcnNzLmh0bWwjd2hhdElzUnNzJwogICAgICAgIH0KICAgIH07CiAgICBpZiAocnNzLnRhZ25hbWUgIT09ICdyc3MnKSByZXR1cm4gY2FsbGJhY2tzLm9uRXJyb3IocnNzLCBgQmFkIHhtbCByb290IHRhZzogJHtyc3MudGFnbmFtZX0sIGV4cGVjdGVkIHJzc2AsIG9wdHMpOwogICAgY29uc3QgdmVyc2lvbiA9IHJzcy5hdHRzLmdldCgndmVyc2lvbicpOwogICAgaWYgKHZlcnNpb24gIT09ICcyLjAnKSBjYWxsYmFja3Mub25XYXJuaW5nKHJzcywgYEJhZCByc3MudmVyc2lvbjogJHt2ZXJzaW9ufSwgZXhwZWN0ZWQgMi4wYCwgb3B0cyk7CiAgICBjb25zdCBpdHVuZXNPcHRzID0gewogICAgICAgIHJlZmVyZW5jZTogewogICAgICAgICAgICBydWxlc2V0OiAnaXR1bmVzJywKICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9kY2FzdGVycy5hcHBsZS5jb20vc3VwcG9ydC84MjMtcG9kY2FzdC1yZXF1aXJlbWVudHMjOn46dGV4dD1Qb2RjYXN0JTIwUlNTJTIwZmVlZCUyMHRlY2huaWNhbCUyMHJlcXVpcmVtZW50cycKICAgICAgICB9CiAgICB9OwogICAgY29uc3QgaGFzSXR1bmVzUHJlZml4ID0gZmluZEVsZW1lbnRSZWN1cnNpdmUocnNzLCAodik9PnYudGFnbmFtZS5zdGFydHNXaXRoKCdpdHVuZXM6JykKICAgICkgIT09IHVuZGVmaW5lZDsKICAgIGlmIChoYXNJdHVuZXNQcmVmaXgpIGNoZWNrQXR0cmlidXRlRXF1YWwocnNzLCAneG1sbnM6aXR1bmVzJywgJ2h0dHA6Ly93d3cuaXR1bmVzLmNvbS9kdGRzL3BvZGNhc3QtMS4wLmR0ZCcsIGNhbGxiYWNrcywgaXR1bmVzT3B0cyk7CiAgICBjb25zdCBoYXNDb250ZW50UHJlZml4ID0gZmluZEVsZW1lbnRSZWN1cnNpdmUocnNzLCAodik9PnYudGFnbmFtZS5zdGFydHNXaXRoKCdjb250ZW50OicpCiAgICApICE9PSB1bmRlZmluZWQ7CiAgICBpZiAoaGFzQ29udGVudFByZWZpeCkgY2hlY2tBdHRyaWJ1dGVFcXVhbChyc3MsICd4bWxuczpjb250ZW50JywgJ2h0dHA6Ly9wdXJsLm9yZy9yc3MvMS4wL21vZHVsZXMvY29udGVudC8nLCBjYWxsYmFja3MsIGl0dW5lc09wdHMpOwogICAgY29uc3QgY2hhbm5lbCA9IGdldFNpbmdsZUNoaWxkKHJzcywgJ2NoYW5uZWwnLCBjYWxsYmFja3MsIG9wdHMpOwogICAgaWYgKCFjaGFubmVsKSByZXR1cm47CiAgICB2YWxpZGF0ZUNoYW5uZWwoY2hhbm5lbCwgY2FsbGJhY2tzKTsKfQpmdW5jdGlvbiB2YWxpZGF0ZUNoYW5uZWwoY2hhbm5lbCwgY2FsbGJhY2tzKSB7CiAgICBjb25zdCBvcHRzID0gewogICAgICAgIHJlZmVyZW5jZTogewogICAgICAgICAgICBydWxlc2V0OiAncnNzJywKICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vY3liZXIuaGFydmFyZC5lZHUvcnNzL3Jzcy5odG1sI3JlcXVpcmVkQ2hhbm5lbEVsZW1lbnRzJwogICAgICAgIH0KICAgIH07CiAgICBjb25zdCB0aXRsZSA9IGdldFNpbmdsZUNoaWxkKGNoYW5uZWwsICd0aXRsZScsIGNhbGxiYWNrcywgb3B0cyk7CiAgICBjaGVja1RleHQodGl0bGUsIGlzTm90RW1wdHksIGNhbGxiYWNrcywgb3B0cyk7CiAgICBjb25zdCBsaW5rID0gZ2V0U2luZ2xlQ2hpbGQoY2hhbm5lbCwgJ2xpbmsnLCBjYWxsYmFja3MsIG9wdHMpOwogICAgY2hlY2tUZXh0KGxpbmssIGlzVXJsLCBjYWxsYmFja3MsIG9wdHMpOwogICAgY29uc3QgZGVzY3JpcHRpb24gPSBnZXRTaW5nbGVDaGlsZChjaGFubmVsLCAnZGVzY3JpcHRpb24nLCBjYWxsYmFja3MsIG9wdHMpOwogICAgY2hlY2tUZXh0KGRlc2NyaXB0aW9uLCBpc05vdEVtcHR5LCBjYWxsYmFja3MsIG9wdHMpOwogICAgRWxlbWVudFZhbGlkYXRpb24uZm9yU2luZ2xlQ2hpbGQoJ2NoYW5uZWwnLCBjaGFubmVsLCBjYWxsYmFja3MsIHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI2d1aWQnKSwgLi4uUW5hbWVzLlBvZGNhc3RJbmRleC5ndWlkKS5jaGVja1ZhbHVlKGlzVXVpZCwgKGd1aWRUZXh0KT0+ewogICAgICAgIGNvbnN0IHZlcnNpb24gPSBndWlkVGV4dC5jaGFyQXQoMTQpOwogICAgICAgIGlmICh2ZXJzaW9uICE9PSAnNScpIHsKICAgICAgICAgICAgcmV0dXJuIGBleHBlY3RlZCBhIFVVSUR2NSwgZm91bmQgYSBVVUlEdiR7dmVyc2lvbn1gOwogICAgICAgIH0KICAgIH0pLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwogICAgRWxlbWVudFZhbGlkYXRpb24uZm9yU2luZ2xlQ2hpbGQoJ2NoYW5uZWwnLCBjaGFubmVsLCBjYWxsYmFja3MsIHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI2xvY2tlZCcpLCAuLi5RbmFtZXMuUG9kY2FzdEluZGV4LmxvY2tlZCkuY2hlY2tWYWx1ZSgodik9Pi9eKHllc3xubykkLy50ZXN0KHYpCiAgICApLmNoZWNrUmVxdWlyZWRBdHRyaWJ1dGUoJ293bmVyJywgaXNFbWFpbEFkZHJlc3MpLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwogICAgZm9yIChjb25zdCBmdW5kaW5nIG9mIGZpbmRDaGlsZEVsZW1lbnRzKGNoYW5uZWwsIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXguZnVuZGluZykpewogICAgICAgIEVsZW1lbnRWYWxpZGF0aW9uLmZvckVsZW1lbnQoJ2NoYW5uZWwnLCBmdW5kaW5nLCBjYWxsYmFja3MsIHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI2Z1bmRpbmcnKSkuY2hlY2tWYWx1ZShpc05vdEVtcHR5KS5jaGVja1ZhbHVlKGlzQXRNb3N0Q2hhcmFjdGVycygxMjgpKS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCd1cmwnLCBpc1VybCkuY2hlY2tSZW1haW5pbmdBdHRyaWJ1dGVzKCk7CiAgICB9CiAgICBjaGVja1BvZGNhc3RQZXJzb24oJ2NoYW5uZWwnLCBjaGFubmVsLCBjYWxsYmFja3MpOwogICAgY2hlY2tQb2RjYXN0TG9jYXRpb24oJ2NoYW5uZWwnLCBjaGFubmVsLCBjYWxsYmFja3MpOwogICAgZm9yIChjb25zdCB0cmFpbGVyIG9mIGZpbmRDaGlsZEVsZW1lbnRzKGNoYW5uZWwsIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXgudHJhaWxlcikpewogICAgICAgIEVsZW1lbnRWYWxpZGF0aW9uLmZvckVsZW1lbnQoJ2NoYW5uZWwnLCB0cmFpbGVyLCBjYWxsYmFja3MsIHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI3RyYWlsZXInKSkuY2hlY2tWYWx1ZShpc05vdEVtcHR5KS5jaGVja1ZhbHVlKGlzQXRNb3N0Q2hhcmFjdGVycygxMjgpKS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCd1cmwnLCBpc1VybCkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgncHViZGF0ZScsIGlzUmZjMjgyMikuY2hlY2tPcHRpb25hbEF0dHJpYnV0ZSgnbGVuZ3RoJywgaXNOb25OZWdhdGl2ZUludGVnZXIpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ3R5cGUnLCBpc01pbWVUeXBlKS5jaGVja09wdGlvbmFsQXR0cmlidXRlKCdzZWFzb24nLCBpc05vbk5lZ2F0aXZlSW50ZWdlcikuY2hlY2tSZW1haW5pbmdBdHRyaWJ1dGVzKCk7CiAgICB9CiAgICBjaGVja1BvZGNhc3RMaWNlbnNlKCdjaGFubmVsJywgY2hhbm5lbCwgY2FsbGJhY2tzKTsKICAgIGNoZWNrUG9kY2FzdFZhbHVlKCdjaGFubmVsJywgY2hhbm5lbCwgY2FsbGJhY2tzKTsKICAgIEVsZW1lbnRWYWxpZGF0aW9uLmZvclNpbmdsZUNoaWxkKCdjaGFubmVsJywgY2hhbm5lbCwgY2FsbGJhY2tzLCBwb2RjYXN0SW5kZXhSZWZlcmVuY2UoJ2h0dHBzOi8vZ2l0aHViLmNvbS9Qb2RjYXN0aW5kZXgtb3JnL3BvZGNhc3QtbmFtZXNwYWNlL2Jsb2IvbWFpbi9kb2NzLzEuMC5tZCNtZWRpdW0nKSwgLi4uUW5hbWVzLlBvZGNhc3RJbmRleC5tZWRpdW0pLmNoZWNrVmFsdWUoaXNQb2RjYXN0TWVkaXVtKS5jaGVja1JlbWFpbmluZ0F0dHJpYnV0ZXMoKTsKICAgIGNoZWNrUG9kY2FzdEltYWdlcygnY2hhbm5lbCcsIGNoYW5uZWwsIGNhbGxiYWNrcyk7CiAgICBjb25zdCBzb2NpYWxzID0gZmluZENoaWxkRWxlbWVudHMoY2hhbm5lbCwgLi4uUW5hbWVzLlBvZGNhc3RJbmRleC5zb2NpYWwpOwogICAgY29uc3Qgc29jaWFsUmVmZXJlbmNlID0gcG9kY2FzdEluZGV4UmVmZXJlbmNlKCdodHRwczovL2dpdGh1Yi5jb20vUG9kY2FzdGluZGV4LW9yZy9wb2RjYXN0LW5hbWVzcGFjZS9ibG9iL21haW4vcHJvcG9zYWwtZG9jcy9zb2NpYWwvc29jaWFsLm1kI3NvY2lhbC1lbGVtZW50Jyk7CiAgICBjb25zdCBzb2NpYWxTaWduVXBSZWZlcmVuY2UgPSBwb2RjYXN0SW5kZXhSZWZlcmVuY2UoJ2h0dHBzOi8vZ2l0aHViLmNvbS9Qb2RjYXN0aW5kZXgtb3JnL3BvZGNhc3QtbmFtZXNwYWNlL2Jsb2IvbWFpbi9wcm9wb3NhbC1kb2NzL3NvY2lhbC9zb2NpYWwubWQjc29jaWFsc2lnbnVwLWVsZW1lbnQnKTsKICAgIGZvciAoY29uc3Qgc29jaWFsIG9mIHNvY2lhbHMpewogICAgICAgIEVsZW1lbnRWYWxpZGF0aW9uLmZvckVsZW1lbnQoJ2NoYW5uZWwnLCBzb2NpYWwsIGNhbGxiYWNrcywgc29jaWFsUmVmZXJlbmNlKS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCdwbGF0Zm9ybScsIGlzTm90RW1wdHkpLmNoZWNrUmVxdWlyZWRBdHRyaWJ1dGUoJ3Byb3RvY29sJywgaXNOb3RFbXB0eSkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgnYWNjb3VudElkJywgaXNOb3RFbXB0eSkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgnYWNjb3VudFVybCcsIGlzVXJsKS5jaGVja09wdGlvbmFsQXR0cmlidXRlKCdwcmlvcml0eScsIGlzTm9uTmVnYXRpdmVJbnRlZ2VyKS5jaGVja1JlbWFpbmluZ0F0dHJpYnV0ZXMoKTsKICAgICAgICBjb25zdCBzb2NpYWxTaWduVXBzID0gZmluZENoaWxkRWxlbWVudHMoY2hhbm5lbCwgLi4uUW5hbWVzLlBvZGNhc3RJbmRleC5zb2NpYWxTaWduVXApOwogICAgICAgIGZvciAoY29uc3Qgc29jaWFsU2lnblVwIG9mIHNvY2lhbFNpZ25VcHMpewogICAgICAgICAgICBFbGVtZW50VmFsaWRhdGlvbi5mb3JFbGVtZW50KCdzb2NpYWwnLCBzb2NpYWxTaWduVXAsIGNhbGxiYWNrcywgc29jaWFsU2lnblVwUmVmZXJlbmNlKS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCdob21lVXJsJywgaXNVcmwpLmNoZWNrUmVxdWlyZWRBdHRyaWJ1dGUoJ3NpZ25VcFVybCcsIGlzVXJsKS5jaGVja09wdGlvbmFsQXR0cmlidXRlKCdwcmlvcml0eScsIGlzTm9uTmVnYXRpdmVJbnRlZ2VyKS5jaGVja1JlbWFpbmluZ0F0dHJpYnV0ZXMoKTsKICAgICAgICB9CiAgICB9CiAgICBjb25zdCBiYWRTb2NpYWxTaWdudXBzID0gZmluZENoaWxkRWxlbWVudHMoY2hhbm5lbCwgLi4uUW5hbWVzLlBvZGNhc3RJbmRleC5zb2NpYWxTaWduVXApOwogICAgaWYgKGJhZFNvY2lhbFNpZ251cHMubGVuZ3RoID4gMCkgewogICAgICAgIGNhbGxiYWNrcy5vbldhcm5pbmcoYmFkU29jaWFsU2lnbnVwc1swXSwgYEJhZCA8JHtiYWRTb2NpYWxTaWdudXBzWzBdLnRhZ25hbWV9Pjogc2hvdWxkIGJlIGEgY2hpbGQgb2YgPHBvZGNhc3Q6c29jaWFsPiwgbm90IGNoYW5uZWxgKTsKICAgIH0KICAgIGNvbnN0IHBvZHBpbmdSZWZlcmVuY2UgPSBwb2RjYXN0SW5kZXhSZWZlcmVuY2UoJ2h0dHBzOi8vZ2l0aHViLmNvbS9Qb2RjYXN0aW5kZXgtb3JnL3BvZGNhc3QtbmFtZXNwYWNlL2Jsb2IvbWFpbi9wcm9wb3NhbC1kb2NzL3BvZHBpbmcvcG9kcGluZy5tZCNzcGVjaWZpY2F0aW9uJyk7CiAgICBjb25zdCBwb2RwaW5nID0gRWxlbWVudFZhbGlkYXRpb24uZm9yU2luZ2xlQ2hpbGQoJ2NoYW5uZWwnLCBjaGFubmVsLCBjYWxsYmFja3MsIHBvZHBpbmdSZWZlcmVuY2UsIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXgucG9kcGluZykuY2hlY2tPcHRpb25hbEF0dHJpYnV0ZSgndXNlc1BvZHBpbmcnLCBpc0Jvb2xlYW4pLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpLm5vZGU7CiAgICBpZiAocG9kcGluZykgewogICAgICAgIGZvciAoY29uc3QgaGl2ZUFjY291bnQgb2YgZmluZENoaWxkRWxlbWVudHMocG9kcGluZywgLi4uUW5hbWVzLlBvZGNhc3RJbmRleC5oaXZlQWNjb3VudCkpewogICAgICAgICAgICBFbGVtZW50VmFsaWRhdGlvbi5mb3JFbGVtZW50KCdwb2RwaW5nJywgaGl2ZUFjY291bnQsIGNhbGxiYWNrcywgcG9kcGluZ1JlZmVyZW5jZSkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgnYWNjb3VudCcsIGlzTm90RW1wdHkpLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwogICAgICAgIH0KICAgIH0KICAgIGNoZWNrUG9kY2FzdFRhZ1VzYWdlKGNoYW5uZWwsIGNhbGxiYWNrcyk7CiAgICBjb25zdCBpdGVtcyA9IGNoYW5uZWwuY2hpbGQuaXRlbSB8fCBbXTsKICAgIGxldCBpdGVtc1dpdGhFbmNsb3N1cmVzQ291bnQgPSAwOwogICAgbGV0IGl0ZW1zVmFsaWRhdGVkID0gMDsKICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcyl7CiAgICAgICAgaWYgKGl0ZW1zVmFsaWRhdGVkIDwgMSkgewogICAgICAgICAgICB2YWxpZGF0ZUl0ZW0oaXRlbSwgY2FsbGJhY2tzKTsKICAgICAgICAgICAgaXRlbXNWYWxpZGF0ZWQrKzsKICAgICAgICB9CiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBmaW5kQ2hpbGRFbGVtZW50cyhpdGVtLCB7CiAgICAgICAgICAgIG5hbWU6ICdlbmNsb3N1cmUnCiAgICAgICAgfSk7CiAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA+IDApIGl0ZW1zV2l0aEVuY2xvc3VyZXNDb3VudCsrOwogICAgfQogICAgY2FsbGJhY2tzLm9uUnNzSXRlbXNGb3VuZChpdGVtcy5sZW5ndGgsIGl0ZW1zV2l0aEVuY2xvc3VyZXNDb3VudCk7Cn0KZnVuY3Rpb24gY2hlY2tQb2RjYXN0UGVyc29uKGxldmVsLCBub2RlLCBjYWxsYmFja3MpIHsKICAgIGZvciAoY29uc3QgcGVyc29uIG9mIGZpbmRDaGlsZEVsZW1lbnRzKG5vZGUsIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXgucGVyc29uKSl7CiAgICAgICAgRWxlbWVudFZhbGlkYXRpb24uZm9yRWxlbWVudChsZXZlbCwgcGVyc29uLCBjYWxsYmFja3MsIHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI3BlcnNvbicpKS5jaGVja1ZhbHVlKGlzTm90RW1wdHkpLmNoZWNrVmFsdWUoaXNBdE1vc3RDaGFyYWN0ZXJzKDEyOCkpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ3JvbGUnLCBpc05vdEVtcHR5KS5jaGVja09wdGlvbmFsQXR0cmlidXRlKCdncm91cCcsIGlzTm90RW1wdHkpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ2ltZycsIGlzVXJsKS5jaGVja09wdGlvbmFsQXR0cmlidXRlKCdocmVmJywgaXNVcmwpLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwogICAgfQp9CmZ1bmN0aW9uIGNoZWNrUG9kY2FzdExvY2F0aW9uKGxldmVsLCBub2RlLCBjYWxsYmFja3MpIHsKICAgIEVsZW1lbnRWYWxpZGF0aW9uLmZvclNpbmdsZUNoaWxkKGxldmVsLCBub2RlLCBjYWxsYmFja3MsIHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI2xvY2F0aW9uJyksIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXgubG9jYXRpb24pLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ2dlbycsIGlzR2VvTGF0TG9uKS5jaGVja09wdGlvbmFsQXR0cmlidXRlKCdvc20nLCBpc09wZW5TdHJlZXRNYXBJZGVudGlmaWVyKS5jaGVja1ZhbHVlKGlzTm90RW1wdHkpLmNoZWNrVmFsdWUoaXNBdE1vc3RDaGFyYWN0ZXJzKDEyOCkpLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwp9CmZ1bmN0aW9uIGNoZWNrUG9kY2FzdExpY2Vuc2UobGV2ZWwsIG5vZGUsIGNhbGxiYWNrcykgewogICAgRWxlbWVudFZhbGlkYXRpb24uZm9yU2luZ2xlQ2hpbGQobGV2ZWwsIG5vZGUsIGNhbGxiYWNrcywgcG9kY2FzdEluZGV4UmVmZXJlbmNlKCdodHRwczovL2dpdGh1Yi5jb20vUG9kY2FzdGluZGV4LW9yZy9wb2RjYXN0LW5hbWVzcGFjZS9ibG9iL21haW4vZG9jcy8xLjAubWQjbGljZW5zZScpLCAuLi5RbmFtZXMuUG9kY2FzdEluZGV4LmxpY2Vuc2UpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ3VybCcsIGlzVXJsKS5jaGVja1ZhbHVlKGlzTm90RW1wdHkpLmNoZWNrVmFsdWUoaXNBdE1vc3RDaGFyYWN0ZXJzKDEyOCkpLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwp9CmZ1bmN0aW9uIGNoZWNrUG9kY2FzdFZhbHVlKGxldmVsLCBub2RlLCBjYWxsYmFja3MpIHsKICAgIGNvbnN0IHZhbHVlID0gRWxlbWVudFZhbGlkYXRpb24uZm9yU2luZ2xlQ2hpbGQobGV2ZWwsIG5vZGUsIGNhbGxiYWNrcywgcG9kY2FzdEluZGV4UmVmZXJlbmNlKCdodHRwczovL2dpdGh1Yi5jb20vUG9kY2FzdGluZGV4LW9yZy9wb2RjYXN0LW5hbWVzcGFjZS9ibG9iL21haW4vZG9jcy8xLjAubWQjdmFsdWUnKSwgLi4uUW5hbWVzLlBvZGNhc3RJbmRleC52YWx1ZSkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgndHlwZScsIGlzUG9kY2FzdFZhbHVlVHlwZVNsdWcpLmNoZWNrUmVxdWlyZWRBdHRyaWJ1dGUoJ21ldGhvZCcsIGlzTm90RW1wdHkpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ3N1Z2dlc3RlZCcsIGlzRGVjaW1hbCkuY2hlY2tSZW1haW5pbmdBdHRyaWJ1dGVzKCkubm9kZTsKICAgIGlmICh2YWx1ZSkgewogICAgICAgIGZvciAoY29uc3QgdmFsdWVSZWNpcGllbnQgb2YgZmluZENoaWxkRWxlbWVudHModmFsdWUsIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXgudmFsdWVSZWNpcGllbnQpKXsKICAgICAgICAgICAgRWxlbWVudFZhbGlkYXRpb24uZm9yRWxlbWVudCgndmFsdWUnLCB2YWx1ZVJlY2lwaWVudCwgY2FsbGJhY2tzLCBwb2RjYXN0SW5kZXhSZWZlcmVuY2UoJ2h0dHBzOi8vZ2l0aHViLmNvbS9Qb2RjYXN0aW5kZXgtb3JnL3BvZGNhc3QtbmFtZXNwYWNlL2Jsb2IvbWFpbi9kb2NzLzEuMC5tZCN2YWx1ZS1yZWNpcGllbnQnKSkuY2hlY2tPcHRpb25hbEF0dHJpYnV0ZSgnbmFtZScsIGlzTm90RW1wdHkpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ2N1c3RvbUtleScsIGlzTm90RW1wdHkpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ2N1c3RvbVZhbHVlJywgaXNOb3RFbXB0eSkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgndHlwZScsIGlzUG9kY2FzdFZhbHVlVHlwZVNsdWcpLmNoZWNrUmVxdWlyZWRBdHRyaWJ1dGUoJ2FkZHJlc3MnLCBpc05vdEVtcHR5KS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCdzcGxpdCcsIGlzTm9uTmVnYXRpdmVJbnRlZ2VyKS5jaGVja09wdGlvbmFsQXR0cmlidXRlKCdmZWUnLCBpc0Jvb2xlYW4pLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwogICAgICAgIH0KICAgIH0KfQpmdW5jdGlvbiBjaGVja1BvZGNhc3RJbWFnZXMobGV2ZWwsIG5vZGUsIGNhbGxiYWNrcykgewogICAgRWxlbWVudFZhbGlkYXRpb24uZm9yU2luZ2xlQ2hpbGQobGV2ZWwsIG5vZGUsIGNhbGxiYWNrcywgcG9kY2FzdEluZGV4UmVmZXJlbmNlKCdodHRwczovL2dpdGh1Yi5jb20vUG9kY2FzdGluZGV4LW9yZy9wb2RjYXN0LW5hbWVzcGFjZS9ibG9iL21haW4vZG9jcy8xLjAubWQjaW1hZ2VzJyksIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXguaW1hZ2VzKS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCdzcmNzZXQnLCBpc1BvZGNhc3RJbWFnZXNTcmNTZXQpLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwp9CmZ1bmN0aW9uIGNoZWNrUG9kY2FzdFRhZ1VzYWdlKG5vZGUsIGNhbGxiYWNrcykgewogICAgY29uc3Qga25vd24gPSBuZXcgU2V0KCk7CiAgICBjb25zdCB1bmtub3duID0gbmV3IFNldCgpOwogICAgY29uc3QgbmFtZXNwYWNlVXJpcyA9IG5ldyBTZXQoKTsKICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBmaW5kQ2hpbGRFbGVtZW50cyhub2RlLCAuLi5RbmFtZXMuUG9kY2FzdEluZGV4Lk5BTUVTUEFDRVMubWFwKCh2KT0+KHsKICAgICAgICAgICAgbmFtZTogJyonLAogICAgICAgICAgICBuYW1lc3BhY2VVcmk6IHYKICAgICAgICB9KQogICAgKSkpewogICAgICAgIGNvbnN0IGlzS25vd24gPSBRbmFtZXMuUG9kY2FzdEluZGV4LktOT1dOX05BTUVTLmhhcyhlbGVtZW50LnFuYW1lLm5hbWUpOwogICAgICAgIChpc0tub3duID8ga25vd24gOiB1bmtub3duKS5hZGQoZWxlbWVudC5xbmFtZS5uYW1lKTsKICAgICAgICBpZiAoZWxlbWVudC5xbmFtZS5uYW1lc3BhY2VVcmkpIG5hbWVzcGFjZVVyaXMuYWRkKGVsZW1lbnQucW5hbWUubmFtZXNwYWNlVXJpKTsKICAgIH0KICAgIGlmIChrbm93bi5zaXplICsgdW5rbm93bi5zaXplID4gMCkgewogICAgICAgIGNhbGxiYWNrcy5vblBvZGNhc3RJbmRleFRhZ05hbWVzRm91bmQoa25vd24sIHVua25vd24sIG5hbWVzcGFjZVVyaXMpOwogICAgfQp9CmZ1bmN0aW9uIGNoZWNrQXR0cmlidXRlRXF1YWwobm9kZSwgYXR0TmFtZSwgYXR0RXhwZWN0ZWRWYWx1ZSwgY2FsbGJhY2tzLCBvcHRzID0ge30pIHsKICAgIGNvbnN0IGF0dFZhbHVlID0gbm9kZS5hdHRzLmdldChhdHROYW1lKTsKICAgIGlmICghYXR0VmFsdWUpIHsKICAgICAgICBjYWxsYmFja3Mub25XYXJuaW5nKG5vZGUsIGBNaXNzaW5nIDwke25vZGUudGFnbmFtZX0+ICR7YXR0TmFtZX0gYXR0cmlidXRlLCBleHBlY3RlZCAke2F0dEV4cGVjdGVkVmFsdWV9YCwgb3B0cyk7CiAgICB9IGVsc2UgaWYgKGF0dFZhbHVlICE9PSBhdHRFeHBlY3RlZFZhbHVlKSB7CiAgICAgICAgY2FsbGJhY2tzLm9uV2FybmluZyhub2RlLCBgQmFkIDwke25vZGUudGFnbmFtZX0+ICR7YXR0TmFtZX0gYXR0cmlidXRlIHZhbHVlOiAke2F0dFZhbHVlfSwgZXhwZWN0ZWQgJHthdHRFeHBlY3RlZFZhbHVlfWAsIG9wdHMpOwogICAgfQp9CmZ1bmN0aW9uIGNoZWNrVGV4dChub2RlLCB0ZXN0LCBjYWxsYmFja3MsIG9wdHMgPSB7fSkgewogICAgaWYgKG5vZGUpIHsKICAgICAgICBjb25zdCB0cmltbWVkVGV4dCA9IChub2RlLnZhbCB8fCAnJykudHJpbSgpOwogICAgICAgIGlmICghdGVzdCh0cmltbWVkVGV4dCkpIHsKICAgICAgICAgICAgY2FsbGJhY2tzLm9uV2FybmluZyhub2RlLCBgQmFkIDwke25vZGUudGFnbmFtZX0+IHZhbHVlOiAke3RyaW1tZWRUZXh0ID09PSAnJyA/ICc8ZW1wdHk+JyA6IHRyaW1tZWRUZXh0fWAsIG9wdHMpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJpbW1lZFRleHQ7CiAgICB9CiAgICByZXR1cm4gdW5kZWZpbmVkOwp9CmZ1bmN0aW9uIGZpbmRGaXJzdENoaWxkRWxlbWVudChub2RlLCBxbmFtZSwgY2FsbGJhY2tzLCBvcHRzID0ge30pIHsKICAgIGNvbnN0IGVsZW1lbnRzID0gZmluZENoaWxkRWxlbWVudHMobm9kZSwgcW5hbWUpOwogICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIGNhbGxiYWNrcy5vbldhcm5pbmcobm9kZSwgYEl0ZW0gaXMgbWlzc2luZyBhbiA8JHtxbmFtZS5uYW1lfT4gZWxlbWVudGAsIG9wdHMpOwogICAgfSBlbHNlIHsKICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMSkgY2FsbGJhY2tzLm9uV2FybmluZyhub2RlLCBgSXRlbSBoYXMgbXVsdGlwbGUgPCR7cW5hbWUubmFtZX0+IGVsZW1lbnRzYCwgb3B0cyk7CiAgICAgICAgcmV0dXJuIGVsZW1lbnRzWzBdOwogICAgfQogICAgcmV0dXJuIHVuZGVmaW5lZDsKfQpmdW5jdGlvbiB2YWxpZGF0ZUl0ZW0oaXRlbSwgY2FsbGJhY2tzKSB7CiAgICBjb25zdCBpdHVuZXNPcHRzMSA9IHsKICAgICAgICByZWZlcmVuY2U6IHsKICAgICAgICAgICAgcnVsZXNldDogJ2l0dW5lcycsCiAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvZGNhc3RlcnMuYXBwbGUuY29tL3N1cHBvcnQvODIzLXBvZGNhc3QtcmVxdWlyZW1lbnRzIzp+OnRleHQ9UG9kY2FzdCUyMFJTUyUyMGZlZWQlMjB0ZWNobmljYWwlMjByZXF1aXJlbWVudHMnCiAgICAgICAgfQogICAgfTsKICAgIGNvbnN0IGl0dW5lc09wdHMyID0gewogICAgICAgIHJlZmVyZW5jZTogewogICAgICAgICAgICBydWxlc2V0OiAnaXR1bmVzJywKICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vaGVscC5hcHBsZS5jb20vaXRjL3BvZGNhc3RzX2Nvbm5lY3QvIy9pdGNiNTQzNTMzOTAnCiAgICAgICAgfQogICAgfTsKICAgIGNvbnN0IHRpdGxlID0gZmluZEZpcnN0Q2hpbGRFbGVtZW50KGl0ZW0sIHsKICAgICAgICBuYW1lOiAndGl0bGUnCiAgICB9LCBjYWxsYmFja3MsIGl0dW5lc09wdHMyKTsKICAgIGlmICh0aXRsZSkgewogICAgICAgIGNoZWNrVGV4dCh0aXRsZSwgaXNOb3RFbXB0eSwgY2FsbGJhY2tzLCBpdHVuZXNPcHRzMik7CiAgICB9CiAgICBjb25zdCBlbmNsb3N1cmUgPSBmaW5kRmlyc3RDaGlsZEVsZW1lbnQoaXRlbSwgewogICAgICAgIG5hbWU6ICdlbmNsb3N1cmUnCiAgICB9LCBjYWxsYmFja3MsIGl0dW5lc09wdHMyKTsKICAgIGlmIChlbmNsb3N1cmUpIHsKICAgICAgICBjb25zdCByc3NFbmNsb3N1cmVPcHRzID0gewogICAgICAgICAgICByZWZlcmVuY2U6IHsKICAgICAgICAgICAgICAgIHJ1bGVzZXQ6ICdyc3MnLAogICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vY3liZXIuaGFydmFyZC5lZHUvcnNzL3Jzcy5odG1sI2x0ZW5jbG9zdXJlZ3RTdWJlbGVtZW50T2ZMdGl0ZW1ndCcKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgY29uc3QgdXJsID0gZW5jbG9zdXJlLmF0dHMuZ2V0KCd1cmwnKTsKICAgICAgICBpZiAoIXVybCkgY2FsbGJhY2tzLm9uV2FybmluZyhlbmNsb3N1cmUsIGBNaXNzaW5nIGl0ZW0gPGVuY2xvc3VyZT4gdXJsIGF0dHJpYnV0ZWAsIHJzc0VuY2xvc3VyZU9wdHMpOwogICAgICAgIGlmICh1cmwgJiYgIWlzVXJsKHVybCkpIGNhbGxiYWNrcy5vbldhcm5pbmcoZW5jbG9zdXJlLCBgQmFkIGl0ZW0gPGVuY2xvc3VyZT4gdXJsIGF0dHJpYnV0ZSB2YWx1ZTogJHt1cmx9LCBleHBlY3RlZCB1cmxgLCByc3NFbmNsb3N1cmVPcHRzKTsKICAgICAgICBjb25zdCBsZW5ndGggPSBlbmNsb3N1cmUuYXR0cy5nZXQoJ2xlbmd0aCcpOwogICAgICAgIGlmICghbGVuZ3RoKSBjYWxsYmFja3Mub25XYXJuaW5nKGVuY2xvc3VyZSwgYE1pc3NpbmcgPGVuY2xvc3VyZT4gbGVuZ3RoIGF0dHJpYnV0ZWAsIHJzc0VuY2xvc3VyZU9wdHMpOwogICAgICAgIGlmIChsZW5ndGggJiYgIWlzTm9uTmVnYXRpdmVJbnRlZ2VyKGxlbmd0aCkpIGNhbGxiYWNrcy5vbldhcm5pbmcoZW5jbG9zdXJlLCBgQmFkIGl0ZW0gPGVuY2xvc3VyZT4gbGVuZ3RoIGF0dHJpYnV0ZSB2YWx1ZTogJHtsZW5ndGh9LCBleHBlY3RlZCBub24tbmVnYXRpdmUgaW50ZWdlcmAsIHJzc0VuY2xvc3VyZU9wdHMpOwogICAgICAgIGNvbnN0IHR5cGUgPSBlbmNsb3N1cmUuYXR0cy5nZXQoJ3R5cGUnKTsKICAgICAgICBpZiAoIXR5cGUpIGNhbGxiYWNrcy5vbldhcm5pbmcoZW5jbG9zdXJlLCBgTWlzc2luZyA8ZW5jbG9zdXJlPiB0eXBlIGF0dHJpYnV0ZWAsIHJzc0VuY2xvc3VyZU9wdHMpOwogICAgICAgIGlmICh0eXBlICYmICFpc01pbWVUeXBlKHR5cGUpKSBjYWxsYmFja3Mub25XYXJuaW5nKGVuY2xvc3VyZSwgYEJhZCBpdGVtIDxlbmNsb3N1cmU+IHR5cGUgYXR0cmlidXRlIHZhbHVlOiAke3R5cGV9LCBleHBlY3RlZCBNSU1FIHR5cGVgLCByc3NFbmNsb3N1cmVPcHRzKTsKICAgIH0KICAgIGNvbnN0IGd1aWQgPSBmaW5kRmlyc3RDaGlsZEVsZW1lbnQoaXRlbSwgewogICAgICAgIG5hbWU6ICdndWlkJwogICAgfSwgY2FsbGJhY2tzLCBpdHVuZXNPcHRzMSk7CiAgICBpZiAoZ3VpZCkgewogICAgICAgIGNvbnN0IGd1aWRUZXh0ID0gY2hlY2tUZXh0KGd1aWQsIGlzTm90RW1wdHksIGNhbGxiYWNrcywgaXR1bmVzT3B0czEpOwogICAgICAgIGNvbnN0IHJzc0d1aWRPcHRzID0gewogICAgICAgICAgICByZWZlcmVuY2U6IHsKICAgICAgICAgICAgICAgIHJ1bGVzZXQ6ICdyc3MnLAogICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vY3liZXIuaGFydmFyZC5lZHUvcnNzL3Jzcy5odG1sI2x0Z3VpZGd0U3ViZWxlbWVudE9mTHRpdGVtZ3QnCiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGNvbnN0IG1pc3NwZWxsaW5ncyA9IFsKICAgICAgICAgICAgLi4uZ3VpZC5hdHRzLmtleXMoKQogICAgICAgIF0uZmlsdGVyKCh2KT0+diAhPT0gJ2lzUGVybWFMaW5rJyAmJiB2LnRvTG93ZXJDYXNlKCkgPT09ICdpc3Blcm1hbGluaycKICAgICAgICApOwogICAgICAgIGZvciAoY29uc3QgbWlzc3BlbGxpbmcgb2YgbWlzc3BlbGxpbmdzKXsKICAgICAgICAgICAgY2FsbGJhY2tzLm9uV2FybmluZyhndWlkLCBgQmFkIGl0ZW0gPGd1aWQ+IGlzUGVybWFMaW5rIGF0dHJpYnV0ZSBzcGVsbGluZzogJHttaXNzcGVsbGluZ31gLCByc3NHdWlkT3B0cyk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGlzUGVybWFMaW5rID0gZ3VpZC5hdHRzLmdldCgnaXNQZXJtYUxpbmsnKSB8fCAndHJ1ZSc7CiAgICAgICAgaWYgKGlzUGVybWFMaW5rID09PSAndHJ1ZScgJiYgZ3VpZFRleHQgJiYgIWlzVXJsKGd1aWRUZXh0KSAmJiBtaXNzcGVsbGluZ3MubGVuZ3RoID09PSAwKSBjYWxsYmFja3Mub25XYXJuaW5nKGd1aWQsIGBCYWQgaXRlbSA8Z3VpZD4gdmFsdWU6ICR7Z3VpZFRleHR9LCBleHBlY3RlZCB1cmwgd2hlbiBpc1Blcm1hTGluaz0idHJ1ZSIgb3IgdW5zcGVjaWZpZWRgLCByc3NHdWlkT3B0cyk7CiAgICB9CiAgICBjb25zdCB0cmFuc2NyaXB0cyA9IGZpbmRDaGlsZEVsZW1lbnRzKGl0ZW0sIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXgudHJhbnNjcmlwdCk7CiAgICBmb3IgKGNvbnN0IHRyYW5zY3JpcHQgb2YgdHJhbnNjcmlwdHMpewogICAgICAgIEVsZW1lbnRWYWxpZGF0aW9uLmZvckVsZW1lbnQoJ2l0ZW0nLCB0cmFuc2NyaXB0LCBjYWxsYmFja3MsIHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI3RyYW5zY3JpcHQnKSkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgndXJsJywgaXNVcmwpLmNoZWNrUmVxdWlyZWRBdHRyaWJ1dGUoJ3R5cGUnLCBpc01pbWVUeXBlKS5jaGVja09wdGlvbmFsQXR0cmlidXRlKCdsYW5ndWFnZScsIGlzTm90RW1wdHkpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ3JlbCcsIGlzTm90RW1wdHkpLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwogICAgfQogICAgRWxlbWVudFZhbGlkYXRpb24uZm9yU2luZ2xlQ2hpbGQoJ2l0ZW0nLCBpdGVtLCBjYWxsYmFja3MsIHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI2NoYXB0ZXJzJyksIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXguY2hhcHRlcnMpLmNoZWNrUmVxdWlyZWRBdHRyaWJ1dGUoJ3VybCcsIGlzVXJsKS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCd0eXBlJywgaXNNaW1lVHlwZSkuY2hlY2tSZW1haW5pbmdBdHRyaWJ1dGVzKCk7CiAgICBjb25zdCBzb3VuZGJpdGVzID0gZmluZENoaWxkRWxlbWVudHMoaXRlbSwgLi4uUW5hbWVzLlBvZGNhc3RJbmRleC5zb3VuZGJpdGUpOwogICAgZm9yIChjb25zdCBzb3VuZGJpdGUgb2Ygc291bmRiaXRlcyl7CiAgICAgICAgRWxlbWVudFZhbGlkYXRpb24uZm9yRWxlbWVudCgnaXRlbScsIHNvdW5kYml0ZSwgY2FsbGJhY2tzLCBwb2RjYXN0SW5kZXhSZWZlcmVuY2UoJ2h0dHBzOi8vZ2l0aHViLmNvbS9Qb2RjYXN0aW5kZXgtb3JnL3BvZGNhc3QtbmFtZXNwYWNlL2Jsb2IvbWFpbi9kb2NzLzEuMC5tZCNzb3VuZGJpdGUnKSkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgnc3RhcnRUaW1lJywgaXNTZWNvbmRzKS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCdkdXJhdGlvbicsIGlzU2Vjb25kcykuY2hlY2tWYWx1ZShpc0F0TW9zdENoYXJhY3RlcnMoMTI4KSkuY2hlY2tSZW1haW5pbmdBdHRyaWJ1dGVzKCk7CiAgICB9CiAgICBjaGVja1BvZGNhc3RQZXJzb24oJ2l0ZW0nLCBpdGVtLCBjYWxsYmFja3MpOwogICAgY2hlY2tQb2RjYXN0TG9jYXRpb24oJ2l0ZW0nLCBpdGVtLCBjYWxsYmFja3MpOwogICAgRWxlbWVudFZhbGlkYXRpb24uZm9yU2luZ2xlQ2hpbGQoJ2l0ZW0nLCBpdGVtLCBjYWxsYmFja3MsIHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI3NlYXNvbicpLCAuLi5RbmFtZXMuUG9kY2FzdEluZGV4LnNlYXNvbikuY2hlY2tPcHRpb25hbEF0dHJpYnV0ZSgnbmFtZScsICh2KT0+aXNOb3RFbXB0eSh2KSAmJiBpc0F0TW9zdENoYXJhY3RlcnMoMTI4KSh2KQogICAgKS5jaGVja1ZhbHVlKGlzTm9uTmVnYXRpdmVJbnRlZ2VyKS5jaGVja1JlbWFpbmluZ0F0dHJpYnV0ZXMoKTsKICAgIEVsZW1lbnRWYWxpZGF0aW9uLmZvclNpbmdsZUNoaWxkKCdpdGVtJywgaXRlbSwgY2FsbGJhY2tzLCBwb2RjYXN0SW5kZXhSZWZlcmVuY2UoJ2h0dHBzOi8vZ2l0aHViLmNvbS9Qb2RjYXN0aW5kZXgtb3JnL3BvZGNhc3QtbmFtZXNwYWNlL2Jsb2IvbWFpbi9kb2NzLzEuMC5tZCNlcGlzb2RlJyksIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXguZXBpc29kZSkuY2hlY2tPcHRpb25hbEF0dHJpYnV0ZSgnZGlzcGxheScsICh2KT0+aXNOb3RFbXB0eSh2KSAmJiBpc0F0TW9zdENoYXJhY3RlcnMoMzIpKHYpCiAgICApLmNoZWNrVmFsdWUoaXNEZWNpbWFsKS5jaGVja1JlbWFpbmluZ0F0dHJpYnV0ZXMoKTsKICAgIGNoZWNrUG9kY2FzdExpY2Vuc2UoJ2l0ZW0nLCBpdGVtLCBjYWxsYmFja3MpOwogICAgY29uc3QgYWx0ZXJuYXRlRW5jbG9zdXJlcyA9IGZpbmRDaGlsZEVsZW1lbnRzKGl0ZW0sIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXguYWx0ZXJuYXRlRW5jbG9zdXJlKTsKICAgIGZvciAoY29uc3QgYWx0ZXJuYXRlRW5jbG9zdXJlIG9mIGFsdGVybmF0ZUVuY2xvc3VyZXMpewogICAgICAgIEVsZW1lbnRWYWxpZGF0aW9uLmZvckVsZW1lbnQoJ2l0ZW0nLCBhbHRlcm5hdGVFbmNsb3N1cmUsIGNhbGxiYWNrcywgcG9kY2FzdEluZGV4UmVmZXJlbmNlKCdodHRwczovL2dpdGh1Yi5jb20vUG9kY2FzdGluZGV4LW9yZy9wb2RjYXN0LW5hbWVzcGFjZS9ibG9iL21haW4vZG9jcy8xLjAubWQjYWx0ZXJuYXRlLWVuY2xvc3VyZScpKS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCd0eXBlJywgaXNNaW1lVHlwZSkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgnbGVuZ3RoJywgaXNOb25OZWdhdGl2ZUludGVnZXIpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ2JpdHJhdGUnLCBpc0RlY2ltYWwpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ2hlaWdodCcsIGlzTm9uTmVnYXRpdmVJbnRlZ2VyKS5jaGVja09wdGlvbmFsQXR0cmlidXRlKCdsYW5nJywgaXNOb3RFbXB0eSkuY2hlY2tPcHRpb25hbEF0dHJpYnV0ZSgndGl0bGUnLCAodik9PmlzTm90RW1wdHkodikgJiYgaXNBdE1vc3RDaGFyYWN0ZXJzKDMyKSh2KQogICAgICAgICkuY2hlY2tPcHRpb25hbEF0dHJpYnV0ZSgncmVsJywgKHYpPT5pc05vdEVtcHR5KHYpICYmIGlzQXRNb3N0Q2hhcmFjdGVycygzMikodikKICAgICAgICApLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ2NvZGVjcycsIGlzTm90RW1wdHkpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ2RlZmF1bHQnLCBpc0Jvb2xlYW4pLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwogICAgICAgIEVsZW1lbnRWYWxpZGF0aW9uLmZvclNpbmdsZUNoaWxkKCdhbHRlcm5hdGVFbmNsb3N1cmUnLCBhbHRlcm5hdGVFbmNsb3N1cmUsIGNhbGxiYWNrcywgcG9kY2FzdEluZGV4UmVmZXJlbmNlKCdodHRwczovL2dpdGh1Yi5jb20vUG9kY2FzdGluZGV4LW9yZy9wb2RjYXN0LW5hbWVzcGFjZS9ibG9iL21haW4vZG9jcy8xLjAubWQjaW50ZWdyaXR5JyksIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXguaW50ZWdyaXR5KS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCd0eXBlJywgKHYpPT4vXihzcml8cGdwLXNpZ25hdHVyZSkkLy50ZXN0KHYpCiAgICAgICAgKS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCd2YWx1ZScsIGlzTm90RW1wdHkpLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwogICAgICAgIGNvbnN0IHNvdXJjZXMgPSBmaW5kQ2hpbGRFbGVtZW50cyhhbHRlcm5hdGVFbmNsb3N1cmUsIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXguc291cmNlKTsKICAgICAgICBmb3IgKGNvbnN0IHNvdXJjZSBvZiBzb3VyY2VzKXsKICAgICAgICAgICAgRWxlbWVudFZhbGlkYXRpb24uZm9yRWxlbWVudCgnYWx0ZXJuYXRlRW5jbG9zdXJlJywgc291cmNlLCBjYWxsYmFja3MsIHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI2FsdGVybmF0ZS1lbmNsb3N1cmUnKSkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgndXJpJywgaXNVcmkpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ2NvbnRlbnRUeXBlJywgaXNNaW1lVHlwZSkuY2hlY2tSZW1haW5pbmdBdHRyaWJ1dGVzKCk7CiAgICAgICAgfQogICAgfQogICAgY2hlY2tQb2RjYXN0VmFsdWUoJ2l0ZW0nLCBpdGVtLCBjYWxsYmFja3MpOwogICAgY2hlY2tQb2RjYXN0SW1hZ2VzKCdpdGVtJywgaXRlbSwgY2FsbGJhY2tzKTsKICAgIGNvbnN0IHNvY2lhbEludGVyYWN0cyA9IGZpbmRDaGlsZEVsZW1lbnRzKGl0ZW0sIC4uLlFuYW1lcy5Qb2RjYXN0SW5kZXguc29jaWFsSW50ZXJhY3QpOwogICAgY29uc3Qgc29jaWFsSW50ZXJhY3RSZWZlcmVuY2UgPSBwb2RjYXN0SW5kZXhSZWZlcmVuY2UoJ2h0dHBzOi8vZ2l0aHViLmNvbS9Qb2RjYXN0aW5kZXgtb3JnL3BvZGNhc3QtbmFtZXNwYWNlL2Jsb2IvbWFpbi9wcm9wb3NhbC1kb2NzL3NvY2lhbC9zb2NpYWwubWQjc29jaWFsaW50ZXJhY3QtZWxlbWVudCcpOwogICAgZm9yIChjb25zdCBzb2NpYWxJbnRlcmFjdCBvZiBzb2NpYWxJbnRlcmFjdHMpewogICAgICAgIEVsZW1lbnRWYWxpZGF0aW9uLmZvckVsZW1lbnQoJ2l0ZW0nLCBzb2NpYWxJbnRlcmFjdCwgY2FsbGJhY2tzLCBzb2NpYWxJbnRlcmFjdFJlZmVyZW5jZSkuY2hlY2tSZXF1aXJlZEF0dHJpYnV0ZSgncGxhdGZvcm0nLCBpc05vdEVtcHR5KS5jaGVja1JlcXVpcmVkQXR0cmlidXRlKCdwcm90b2NvbCcsIGlzTm90RW1wdHkpLmNoZWNrUmVxdWlyZWRBdHRyaWJ1dGUoJ2FjY291bnRJZCcsIGlzTm90RW1wdHkpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ3B1YkRhdGUnLCBpc0lzbzg2MDEpLmNoZWNrT3B0aW9uYWxBdHRyaWJ1dGUoJ3ByaW9yaXR5JywgaXNOb25OZWdhdGl2ZUludGVnZXIpLmNoZWNrVmFsdWUoaXNVcmkpLmNoZWNrUmVtYWluaW5nQXR0cmlidXRlcygpOwogICAgICAgIGNhbGxiYWNrcy5vbkdvb2Qoc29jaWFsSW50ZXJhY3QsICdGb3VuZCA8cG9kY2FzdDpzb2NpYWxJbnRlcmFjdD4sIG5pY2UhJywgewogICAgICAgICAgICB0YWc6ICdzb2NpYWwtaW50ZXJhY3QnLAogICAgICAgICAgICByZWZlcmVuY2U6IHNvY2lhbEludGVyYWN0UmVmZXJlbmNlCiAgICAgICAgfSk7CiAgICB9CiAgICBjaGVja1BvZGNhc3RUYWdVc2FnZShpdGVtLCBjYWxsYmFja3MpOwp9CmNsYXNzIEVsZW1lbnRWYWxpZGF0aW9uIHsKICAgIHN0YXRpYyBFTVBUWV9TVFJJTkdfU0VUID0gbmV3IFNldCgpOwogICAgbm9kZTsKICAgIGxldmVsOwogICAgY2FsbGJhY2tzOwogICAgb3B0czsKICAgIHJlbWFpbmluZ0F0dE5hbWVzOwogICAgY29uc3RydWN0b3IobGV2ZWwsIG5vZGUsIGNhbGxiYWNrcywgb3B0cyl7CiAgICAgICAgdGhpcy5sZXZlbCA9IGxldmVsOwogICAgICAgIHRoaXMubm9kZSA9IG5vZGU7CiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBjYWxsYmFja3M7CiAgICAgICAgdGhpcy5vcHRzID0gb3B0czsKICAgICAgICB0aGlzLnJlbWFpbmluZ0F0dE5hbWVzID0gbm9kZSA/IG5ldyBTZXQobm9kZS5hdHRzLmtleXMoKSkgOiBFbGVtZW50VmFsaWRhdGlvbi5FTVBUWV9TVFJJTkdfU0VUOwogICAgfQogICAgc3RhdGljIGZvckVsZW1lbnQobGV2ZWwsIG5vZGUsIGNhbGxiYWNrcywgcmVmZXJlbmNlKSB7CiAgICAgICAgcmV0dXJuIG5ldyBFbGVtZW50VmFsaWRhdGlvbihsZXZlbCwgbm9kZSwgY2FsbGJhY2tzLCB7CiAgICAgICAgICAgIHJlZmVyZW5jZQogICAgICAgIH0pOwogICAgfQogICAgc3RhdGljIGZvclNpbmdsZUNoaWxkKGxldmVsLCBwYXJlbnQsIGNhbGxiYWNrcywgcmVmZXJlbmNlLCAuLi5xbmFtZXMpIHsKICAgICAgICBjaGVja1RydWUoJ3FuYW1lcy5sZW5ndGgnLCBxbmFtZXMubGVuZ3RoLCBxbmFtZXMubGVuZ3RoID4gMCk7CiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBmaW5kQ2hpbGRFbGVtZW50cyhwYXJlbnQsIC4uLnFuYW1lcyk7CiAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA+IDEpIGNhbGxiYWNrcy5vbldhcm5pbmcoZWxlbWVudHNbMV0sIGBNdWx0aXBsZSAke2xldmVsfSA8JHtlbGVtZW50c1sxXS50YWduYW1lfT4gZWxlbWVudHMgYXJlIG5vdCBhbGxvd2VkYCwgewogICAgICAgICAgICAgICAgcmVmZXJlbmNlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbMF07CiAgICAgICAgICAgIHJldHVybiBuZXcgRWxlbWVudFZhbGlkYXRpb24obGV2ZWwsIGVsZW1lbnQsIGNhbGxiYWNrcywgewogICAgICAgICAgICAgICAgcmVmZXJlbmNlCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEVsZW1lbnRWYWxpZGF0aW9uKGxldmVsLCB1bmRlZmluZWQsIGNhbGxiYWNrcywgewogICAgICAgICAgICByZWZlcmVuY2UKICAgICAgICB9KTsKICAgIH0KICAgIGNoZWNrVmFsdWUodGVzdCwgYWRkaXRpb25hbFRlc3QpIHsKICAgICAgICBjb25zdCB7IG5vZGUgLCBjYWxsYmFja3MgLCBvcHRzICB9ID0gdGhpczsKICAgICAgICBpZiAobm9kZSkgewogICAgICAgICAgICBjb25zdCB0cmltbWVkVGV4dCA9IGNoZWNrVGV4dChub2RlLCB0ZXN0LCBjYWxsYmFja3MsIG9wdHMpOwogICAgICAgICAgICBpZiAodHJpbW1lZFRleHQgJiYgYWRkaXRpb25hbFRlc3QpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHdhcm5pbmdTdWZmaXggPSBhZGRpdGlvbmFsVGVzdCh0cmltbWVkVGV4dCk7CiAgICAgICAgICAgICAgICBpZiAod2FybmluZ1N1ZmZpeCkgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbldhcm5pbmcobm9kZSwgYEJhZCA8JHtub2RlLnRhZ25hbWV9PiB2YWx1ZTogJHt0cmltbWVkVGV4dCA9PT0gJycgPyAnPGVtcHR5PicgOiB0cmltbWVkVGV4dH0sICR7d2FybmluZ1N1ZmZpeH1gLCBvcHRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIGNoZWNrUmVxdWlyZWRBdHRyaWJ1dGUobmFtZSwgdGVzdCkgewogICAgICAgIGNvbnN0IHsgbm9kZSAsIGNhbGxiYWNrcyAsIG9wdHMgLCBsZXZlbCAgfSA9IHRoaXM7CiAgICAgICAgaWYgKG5vZGUpIHsKICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBub2RlLmF0dHMuZ2V0KG5hbWUpOwogICAgICAgICAgICBpZiAoIXZhbHVlKSBjYWxsYmFja3Mub25XYXJuaW5nKG5vZGUsIGBNaXNzaW5nICR7bGV2ZWx9IDwke25vZGUudGFnbmFtZX0+ICR7bmFtZX0gYXR0cmlidXRlYCwgb3B0cyk7CiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiAhdGVzdCh2YWx1ZSkpIGNhbGxiYWNrcy5vbldhcm5pbmcobm9kZSwgYEJhZCAke2xldmVsfSA8JHtub2RlLnRhZ25hbWV9PiAke25hbWV9IGF0dHJpYnV0ZSB2YWx1ZTogJHt2YWx1ZX1gLCBvcHRzKTsKICAgICAgICAgICAgdGhpcy5yZW1haW5pbmdBdHROYW1lcy5kZWxldGUobmFtZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgY2hlY2tPcHRpb25hbEF0dHJpYnV0ZShuYW1lLCB0ZXN0KSB7CiAgICAgICAgY29uc3QgeyBub2RlICwgY2FsbGJhY2tzICwgb3B0cyAsIGxldmVsICB9ID0gdGhpczsKICAgICAgICBpZiAobm9kZSkgewogICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG5vZGUuYXR0cy5nZXQobmFtZSk7CiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiAhdGVzdCh2YWx1ZSkpIGNhbGxiYWNrcy5vbldhcm5pbmcobm9kZSwgYEJhZCAke2xldmVsfSA8JHtub2RlLnRhZ25hbWV9PiAke25hbWV9IGF0dHJpYnV0ZSB2YWx1ZTogJHt2YWx1ZX1gLCBvcHRzKTsKICAgICAgICAgICAgdGhpcy5yZW1haW5pbmdBdHROYW1lcy5kZWxldGUobmFtZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgY2hlY2tSZW1haW5pbmdBdHRyaWJ1dGVzKCkgewogICAgICAgIGNvbnN0IHsgcmVtYWluaW5nQXR0TmFtZXMgLCBjYWxsYmFja3MgLCBub2RlICwgb3B0cyAsIGxldmVsICB9ID0gdGhpczsKICAgICAgICBpZiAobm9kZSkgewogICAgICAgICAgICBpZiAocmVtYWluaW5nQXR0TmFtZXMuc2l6ZSA+IDApIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbldhcm5pbmcobm9kZSwgYEJhZCAke2xldmVsfSA8JHtub2RlLnRhZ25hbWV9PiBhdHRyaWJ1dGUgbmFtZSR7cmVtYWluaW5nQXR0TmFtZXMuc2l6ZSA+IDEgPyAncycgOiAnJ306ICR7WwogICAgICAgICAgICAgICAgICAgIC4uLnJlbWFpbmluZ0F0dE5hbWVzCiAgICAgICAgICAgICAgICBdLmpvaW4oJywgJyl9YCwgb3B0cyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9Cn0KZnVuY3Rpb24gc2V0SW50ZXJzZWN0KGxocywgcmhzKSB7CiAgICBjb25zdCBydCA9IG5ldyBTZXQoKTsKICAgIGZvciAoY29uc3QgaXRlbSBvZiBsaHMpewogICAgICAgIGlmIChyaHMuaGFzKGl0ZW0pKSBydC5hZGQoaXRlbSk7CiAgICB9CiAgICBmb3IgKGNvbnN0IGl0ZW0xIG9mIHJocyl7CiAgICAgICAgaWYgKGxocy5oYXMoaXRlbTEpKSBydC5hZGQoaXRlbTEpOwogICAgfQogICAgcmV0dXJuIHJ0Owp9CmZ1bmN0aW9uIGlzU3RyaW5nUmVjb3JkMShvYmopIHsKICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkob2JqKSAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDsKfQpmdW5jdGlvbiBpc1JlYWRvbmx5QXJyYXkxKGFyZykgewogICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTsKfQpmdW5jdGlvbiBpc1ZhbGlkSXNvODYwMSh0ZXh0KSB7CiAgICByZXR1cm4gL15cZHs0fS1cZHsyfS1cZHsyfVRcZHsyfTpcZHsyfTpcZHsyfShcLlxkKyk/WiQvLnRlc3QodGV4dCk7Cn0KYXN5bmMgZnVuY3Rpb24gbWFrZVRocmVhZGNhcCh1cmwsIG9wdHMpIHsKICAgIGNvbnN0IHsgY2FjaGUgLCB1c2VyQWdlbnQgIH0gPSBvcHRzOwogICAgY29uc3QgZmV0Y2hlciA9IG1ha2VGZXRjaGVyV2l0aFVzZXJBZ2VudChvcHRzLmZldGNoZXIsIHVzZXJBZ2VudCk7CiAgICBjb25zdCBvYmplY3QgPSBhd2FpdCBmaW5kT3JGZXRjaEFjdGl2aXR5UHViT2JqZWN0KHVybCwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpLCBmZXRjaGVyLCBjYWNoZSk7CiAgICBjb25zdCB7IGlkICwgdHlwZSAgfSA9IG9iamVjdDsKICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCB0eXBlIGZvciBvYmplY3Q6ICR7SlNPTi5zdHJpbmdpZnkob2JqZWN0KX1gKTsKICAgIGlmICghL14oTm90ZXxBcnRpY2xlfFZpZGVvfFBvZGNhc3RFcGlzb2RlKSQvLnRlc3QodHlwZSkpIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCB0eXBlOiAke3R5cGV9YCk7CiAgICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGlkIGZvciBvYmplY3Q6ICR7SlNPTi5zdHJpbmdpZnkob2JqZWN0KX1gKTsKICAgIHJldHVybiB7CiAgICAgICAgcm9vdDogaWQsCiAgICAgICAgbm9kZXM6IHt9LAogICAgICAgIGNvbW1lbnRlcnM6IHt9CiAgICB9Owp9CmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVRocmVhZGNhcCh0aHJlYWRjYXAsIG9wdHMpIHsKICAgIGNvbnN0IHsgdXNlckFnZW50ICwgY2FjaGUgLCB1cGRhdGVUaW1lICwgY2FsbGJhY2tzICwgbWF4TGV2ZWxzICwgbWF4Tm9kZXM6IG1heE5vZGVzSW5wdXQgLCBzdGFydE5vZGUgLCBrZWVwR29pbmcgIH0gPSBvcHRzOwogICAgY29uc3QgZmV0Y2hlciA9IG1ha2VGZXRjaGVyV2l0aFVzZXJBZ2VudChvcHRzLmZldGNoZXIsIHVzZXJBZ2VudCk7CiAgICBjb25zdCBtYXhMZXZlbCA9IE1hdGgubWluKE1hdGgubWF4KG1heExldmVscyA9PT0gdW5kZWZpbmVkID8gMTAwMCA6IE1hdGgucm91bmQobWF4TGV2ZWxzKSwgMCksIDEwMDApOwogICAgY29uc3QgbWF4Tm9kZXMgPSBtYXhOb2Rlc0lucHV0ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBNYXRoLm1heChNYXRoLnJvdW5kKG1heE5vZGVzSW5wdXQpLCAwKTsKICAgIGlmIChzdGFydE5vZGUgJiYgIXRocmVhZGNhcC5ub2Rlc1tzdGFydE5vZGVdKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc3RhcnQgbm9kZTogJHtzdGFydE5vZGV9YCk7CiAgICBpZiAobWF4TGV2ZWwgPT09IDApIHJldHVybjsKICAgIGlmIChtYXhOb2RlcyA9PT0gMCkgcmV0dXJuOwogICAgY29uc3QgaWRzQnlsZXZlbCA9IFsKICAgICAgICBbCiAgICAgICAgICAgIHN0YXJ0Tm9kZSB8fCB0aHJlYWRjYXAucm9vdAogICAgICAgIF0KICAgIF07CiAgICBsZXQgcmVtYWluaW5nID0gMTsKICAgIGxldCBwcm9jZXNzZWQgPSAwOwogICAgY29uc3QgcHJvY2Vzc0xldmVsID0gYXN5bmMgKGxldmVsKT0+ewogICAgICAgIGNhbGxiYWNrcz8ub25FdmVudCh7CiAgICAgICAgICAgIGtpbmQ6ICdwcm9jZXNzLWxldmVsJywKICAgICAgICAgICAgcGhhc2U6ICdiZWZvcmUnLAogICAgICAgICAgICBsZXZlbDogbGV2ZWwgKyAxCiAgICAgICAgfSk7CiAgICAgICAgY29uc3QgbmV4dExldmVsID0gbGV2ZWwgKyAxOwogICAgICAgIGZvciAoY29uc3QgaWQgb2YgaWRzQnlsZXZlbFtsZXZlbF0gfHwgW10pewogICAgICAgICAgICBjb25zdCBwcm9jZXNzUmVwbGllcyA9IG5leHRMZXZlbCA8IG1heExldmVsOwogICAgICAgICAgICBjb25zdCBub2RlID0gYXdhaXQgcHJvY2Vzc05vZGUoaWQsIHByb2Nlc3NSZXBsaWVzLCB0aHJlYWRjYXAsIHVwZGF0ZVRpbWUsIGZldGNoZXIsIGNhY2hlLCBjYWxsYmFja3MpOwogICAgICAgICAgICByZW1haW5pbmctLTsKICAgICAgICAgICAgcHJvY2Vzc2VkKys7CiAgICAgICAgICAgIGlmIChtYXhOb2RlcyAmJiBwcm9jZXNzZWQgPj0gbWF4Tm9kZXMpIHJldHVybjsKICAgICAgICAgICAgaWYgKGtlZXBHb2luZyAmJiAha2VlcEdvaW5nKCkpIHJldHVybjsKICAgICAgICAgICAgaWYgKG5vZGUucmVwbGllcyAmJiBuZXh0TGV2ZWwgPCBtYXhMZXZlbCkgewogICAgICAgICAgICAgICAgaWYgKCFpZHNCeWxldmVsW25leHRMZXZlbF0pIGlkc0J5bGV2ZWxbbmV4dExldmVsXSA9IFtdOwogICAgICAgICAgICAgICAgaWRzQnlsZXZlbFtuZXh0TGV2ZWxdLnB1c2goLi4ubm9kZS5yZXBsaWVzKTsKICAgICAgICAgICAgICAgIHJlbWFpbmluZyArPSBub2RlLnJlcGxpZXMubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhbGxiYWNrcz8ub25FdmVudCh7CiAgICAgICAgICAgICAgICBraW5kOiAnbm9kZXMtcmVtYWluaW5nJywKICAgICAgICAgICAgICAgIHJlbWFpbmluZwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgY2FsbGJhY2tzPy5vbkV2ZW50KHsKICAgICAgICAgICAga2luZDogJ3Byb2Nlc3MtbGV2ZWwnLAogICAgICAgICAgICBwaGFzZTogJ2FmdGVyJywKICAgICAgICAgICAgbGV2ZWw6IGxldmVsICsgMQogICAgICAgIH0pOwogICAgICAgIGlmIChpZHNCeWxldmVsW25leHRMZXZlbF0pIGF3YWl0IHByb2Nlc3NMZXZlbChuZXh0TGV2ZWwpOwogICAgfTsKICAgIGF3YWl0IHByb2Nlc3NMZXZlbCgwKTsKfQpjbGFzcyBJbk1lbW9yeUNhY2hlIHsKICAgIG1hcCA9IG5ldyBNYXAoKTsKICAgIGdldChpZCwgYWZ0ZXIpIHsKICAgICAgICBjb25zdCB7IHJlc3BvbnNlICwgZmV0Y2hlZCAgfSA9IHRoaXMubWFwLmdldChpZCkgfHwge307CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSAmJiBmZXRjaGVkICYmIGZldGNoZWQgPiBhZnRlciA/IHJlc3BvbnNlLmNsb25lKCkgOiB1bmRlZmluZWQpOwogICAgfQogICAgcHV0KGlkLCBmZXRjaGVkLCByZXNwb25zZSkgewogICAgICAgIHRoaXMubWFwLnNldChpZCwgewogICAgICAgICAgICByZXNwb25zZSwKICAgICAgICAgICAgZmV0Y2hlZAogICAgICAgIH0pOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgIH0KfQpmdW5jdGlvbiBjb21wdXRlRGVmYXVsdE1pbGxpc1RvV2FpdChpbnB1dCkgewogICAgY29uc3QgeyByZW1haW5pbmcgLCBtaWxsaXNUaWxsUmVzZXQgIH0gPSBpbnB1dDsKICAgIGlmIChyZW1haW5pbmcgPj0gMTAwKSByZXR1cm4gMDsKICAgIHJldHVybiByZW1haW5pbmcgPiAwID8gTWF0aC5yb3VuZChtaWxsaXNUaWxsUmVzZXQgLyByZW1haW5pbmcpIDogbWlsbGlzVGlsbFJlc2V0Owp9CmZ1bmN0aW9uIG1ha2VSYXRlTGltaXRlZEZldGNoZXIoZmV0Y2hlciwgb3B0czEgPSB7fSkgewogICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRzMTsKICAgIGNvbnN0IGNvbXB1dGVNaWxsaXNUb1dhaXQgPSBvcHRzMS5jb21wdXRlTWlsbGlzVG9XYWl0IHx8IGNvbXB1dGVEZWZhdWx0TWlsbGlzVG9XYWl0OwogICAgY29uc3QgaG9zdExpbWl0cyA9IG5ldyBNYXAoKTsKICAgIHJldHVybiBhc3luYyAodXJsLCBvcHRzKT0+ewogICAgICAgIGNvbnN0IGhvc3RuYW1lID0gbmV3IFVSTCh1cmwpLmhvc3RuYW1lOwogICAgICAgIGNvbnN0IGxpbWl0cyA9IGhvc3RMaW1pdHMuZ2V0KGhvc3RuYW1lKTsKICAgICAgICBpZiAobGltaXRzKSB7CiAgICAgICAgICAgIGNvbnN0IHsgbGltaXQgLCByZW1haW5pbmcgLCByZXNldCAgfSA9IGxpbWl0czsKICAgICAgICAgICAgY29uc3QgbWlsbGlzVGlsbFJlc2V0ID0gbmV3IERhdGUocmVzZXQpLmdldFRpbWUoKSAtIERhdGUubm93KCk7CiAgICAgICAgICAgIGNvbnN0IG1pbGxpc1RvV2FpdCA9IGNvbXB1dGVNaWxsaXNUb1dhaXQoewogICAgICAgICAgICAgICAgaG9zdG5hbWUsCiAgICAgICAgICAgICAgICBsaW1pdCwKICAgICAgICAgICAgICAgIHJlbWFpbmluZywKICAgICAgICAgICAgICAgIHJlc2V0LAogICAgICAgICAgICAgICAgbWlsbGlzVGlsbFJlc2V0CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZiAobWlsbGlzVG9XYWl0ID4gMCkgewogICAgICAgICAgICAgICAgY2FsbGJhY2tzPy5vbkV2ZW50KHsKICAgICAgICAgICAgICAgICAgICBraW5kOiAnd2FpdGluZy1mb3ItcmF0ZS1saW1pdCcsCiAgICAgICAgICAgICAgICAgICAgaG9zdG5hbWUsCiAgICAgICAgICAgICAgICAgICAgbWlsbGlzVG9XYWl0LAogICAgICAgICAgICAgICAgICAgIG1pbGxpc1RpbGxSZXNldCwKICAgICAgICAgICAgICAgICAgICBsaW1pdCwKICAgICAgICAgICAgICAgICAgICByZW1haW5pbmcsCiAgICAgICAgICAgICAgICAgICAgcmVzZXQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgYXdhaXQgc2xlZXAobWlsbGlzVG9XYWl0KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaGVyKHVybCwgb3B0cyk7CiAgICAgICAgY29uc3QgbGltaXQgPSB0cnlQYXJzZUludChyZXMuaGVhZGVycy5nZXQoJ3gtcmF0ZWxpbWl0LWxpbWl0JykgfHwgJycpOwogICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IHRyeVBhcnNlSW50KHJlcy5oZWFkZXJzLmdldCgneC1yYXRlbGltaXQtcmVtYWluaW5nJykgfHwgJycpOwogICAgICAgIGNvbnN0IHJlc2V0ID0gdHJ5UGFyc2VJc284NjAxKHJlcy5oZWFkZXJzLmdldCgneC1yYXRlbGltaXQtcmVzZXQnKSB8fCAnJyk7CiAgICAgICAgaWYgKGxpbWl0ICE9PSB1bmRlZmluZWQgJiYgcmVtYWluaW5nICE9PSB1bmRlZmluZWQgJiYgcmVzZXQgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBob3N0TGltaXRzLnNldChob3N0bmFtZSwgewogICAgICAgICAgICAgICAgbGltaXQsCiAgICAgICAgICAgICAgICByZW1haW5pbmcsCiAgICAgICAgICAgICAgICByZXNldAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlczsKICAgIH07Cn0KY29uc3QgQVBQTElDQVRJT05fQUNUSVZJVFlfSlNPTiA9ICdhcHBsaWNhdGlvbi9hY3Rpdml0eStqc29uJzsKYXN5bmMgZnVuY3Rpb24gZmluZE9yRmV0Y2hBY3Rpdml0eVB1Yk9iamVjdCh1cmwsIGFmdGVyLCBmZXRjaGVyLCBjYWNoZSkgewogICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmaW5kT3JGZXRjaEFjdGl2aXR5UHViUmVzcG9uc2UodXJsLCBhZnRlciwgZmV0Y2hlciwgY2FjaGUpOwogICAgY29uc3QgeyBzdGF0dXMgLCBoZWFkZXJzICB9ID0gcmVzcG9uc2U7CiAgICBpZiAoc3RhdHVzICE9PSAyMDApIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgMjAwIHJlc3BvbnNlIGZvciAke3VybH0sIGZvdW5kICR7c3RhdHVzfSBib2R5PSR7YXdhaXQgcmVzcG9uc2UudGV4dCgpfWApOwogICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldCgnY29udGVudC10eXBlJykgfHwgJzxub25lPic7CiAgICBpZiAoIWNvbnRlbnRUeXBlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2pzb24nKSkgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBqc29uIHJlc3BvbnNlIGZvciAke3VybH0sIGZvdW5kICR7Y29udGVudFR5cGV9IGJvZHk9JHthd2FpdCByZXNwb25zZS50ZXh0KCl9YCk7CiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpOwp9CmFzeW5jIGZ1bmN0aW9uIGZpbmRPckZldGNoQWN0aXZpdHlQdWJSZXNwb25zZSh1cmwsIGFmdGVyLCBmZXRjaGVyLCBjYWNoZSkgewogICAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBjYWNoZS5nZXQodXJsLCBhZnRlcik7CiAgICBpZiAoZXhpc3RpbmcpIHJldHVybiBleGlzdGluZzsKICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoZXIodXJsLCB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICBhY2NlcHQ6IEFQUExJQ0FUSU9OX0FDVElWSVRZX0pTT04KICAgICAgICB9CiAgICB9KTsKICAgIGF3YWl0IGNhY2hlLnB1dCh1cmwsIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSwgcmVzLmNsb25lKCkpOwogICAgcmV0dXJuIHJlczsKfQphc3luYyBmdW5jdGlvbiBwcm9jZXNzTm9kZShpZCwgcHJvY2Vzc1JlcGxpZXMsIHRocmVhZGNhcCwgdXBkYXRlVGltZSwgZmV0Y2hlciwgY2FjaGUsIGNhbGxiYWNrcykgewogICAgbGV0IG5vZGUgPSB0aHJlYWRjYXAubm9kZXNbaWRdOwogICAgaWYgKCFub2RlKSB7CiAgICAgICAgbm9kZSA9IHt9OwogICAgICAgIHRocmVhZGNhcC5ub2Rlc1tpZF0gPSBub2RlOwogICAgfQogICAgY29uc3QgdXBkYXRlQ29tbWVudCA9ICFub2RlLmNvbW1lbnRBc29mIHx8IG5vZGUuY29tbWVudEFzb2YgPCB1cGRhdGVUaW1lOwogICAgaWYgKHVwZGF0ZUNvbW1lbnQpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBub2RlLmNvbW1lbnQgPSBhd2FpdCBmZXRjaENvbW1lbnQoaWQsIHVwZGF0ZVRpbWUsIGZldGNoZXIsIGNhY2hlLCBjYWxsYmFja3MpOwogICAgICAgICAgICBjb25zdCB7IGF0dHJpYnV0ZWRUbyAgfSA9IG5vZGUuY29tbWVudDsKICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdDb21tZW50ZXIgPSB0aHJlYWRjYXAuY29tbWVudGVyc1thdHRyaWJ1dGVkVG9dOwogICAgICAgICAgICBpZiAoIWV4aXN0aW5nQ29tbWVudGVyIHx8IGV4aXN0aW5nQ29tbWVudGVyLmFzb2YgPCB1cGRhdGVUaW1lKSB7CiAgICAgICAgICAgICAgICB0aHJlYWRjYXAuY29tbWVudGVyc1thdHRyaWJ1dGVkVG9dID0gYXdhaXQgZmV0Y2hDb21tZW50ZXIoYXR0cmlidXRlZFRvLCB1cGRhdGVUaW1lLCBmZXRjaGVyLCBjYWNoZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbm9kZS5jb21tZW50RXJyb3IgPSB1bmRlZmluZWQ7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICBub2RlLmNvbW1lbnQgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIG5vZGUuY29tbWVudEVycm9yID0gYCR7ZS5zdGFjayB8fCBlfWA7CiAgICAgICAgfQogICAgICAgIG5vZGUuY29tbWVudEFzb2YgPSB1cGRhdGVUaW1lOwogICAgfQogICAgY2FsbGJhY2tzPy5vbkV2ZW50KHsKICAgICAgICBraW5kOiAnbm9kZS1wcm9jZXNzZWQnLAogICAgICAgIHBhcnQ6ICdjb21tZW50JywKICAgICAgICB1cGRhdGVkOiB1cGRhdGVDb21tZW50CiAgICB9KTsKICAgIGlmIChwcm9jZXNzUmVwbGllcykgewogICAgICAgIGNvbnN0IHVwZGF0ZVJlcGxpZXMgPSAhbm9kZS5yZXBsaWVzQXNvZiB8fCBub2RlLnJlcGxpZXNBc29mIDwgdXBkYXRlVGltZTsKICAgICAgICBpZiAodXBkYXRlUmVwbGllcykgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgbm9kZS5yZXBsaWVzID0gYXdhaXQgZmV0Y2hSZXBsaWVzKGlkLCB1cGRhdGVUaW1lLCBmZXRjaGVyLCBjYWNoZSwgY2FsbGJhY2tzKTsKICAgICAgICAgICAgICAgIG5vZGUucmVwbGllc0Vycm9yID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBub2RlLnJlcGxpZXMgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBub2RlLnJlcGxpZXNFcnJvciA9IGAke2Uuc3RhY2sgfHwgZX1gOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG5vZGUucmVwbGllc0Fzb2YgPSB1cGRhdGVUaW1lOwogICAgICAgIH0KICAgICAgICBjYWxsYmFja3M/Lm9uRXZlbnQoewogICAgICAgICAgICBraW5kOiAnbm9kZS1wcm9jZXNzZWQnLAogICAgICAgICAgICBwYXJ0OiAncmVwbGllcycsCiAgICAgICAgICAgIHVwZGF0ZWQ6IHVwZGF0ZVJlcGxpZXMKICAgICAgICB9KTsKICAgIH0KICAgIHJldHVybiBub2RlOwp9CmFzeW5jIGZ1bmN0aW9uIGZldGNoQ29tbWVudChpZCwgdXBkYXRlVGltZSwgZmV0Y2hlciwgY2FjaGUsIGNhbGxiYWNrcykgewogICAgY29uc3Qgb2JqZWN0ID0gYXdhaXQgZmluZE9yRmV0Y2hBY3Rpdml0eVB1Yk9iamVjdChpZCwgdXBkYXRlVGltZSwgZmV0Y2hlciwgY2FjaGUpOwogICAgcmV0dXJuIGNvbXB1dGVDb21tZW50KG9iamVjdCwgaWQsIGNhbGxiYWNrcyk7Cn0KYXN5bmMgZnVuY3Rpb24gZmV0Y2hDb21tZW50ZXIoYXR0cmlidXRlZFRvLCB1cGRhdGVUaW1lLCBmZXRjaGVyLCBjYWNoZSkgewogICAgY29uc3Qgb2JqZWN0ID0gYXdhaXQgZmluZE9yRmV0Y2hBY3Rpdml0eVB1Yk9iamVjdChhdHRyaWJ1dGVkVG8sIHVwZGF0ZVRpbWUsIGZldGNoZXIsIGNhY2hlKTsKICAgIHJldHVybiBjb21wdXRlQ29tbWVudGVyKG9iamVjdCwgdXBkYXRlVGltZSk7Cn0KYXN5bmMgZnVuY3Rpb24gZmV0Y2hSZXBsaWVzKGlkLCB1cGRhdGVUaW1lLCBmZXRjaGVyLCBjYWNoZSwgY2FsbGJhY2tzKSB7CiAgICBjb25zdCBmZXRjaGVkT2JqZWN0ID0gYXdhaXQgZmluZE9yRmV0Y2hBY3Rpdml0eVB1Yk9iamVjdChpZCwgdXBkYXRlVGltZSwgZmV0Y2hlciwgY2FjaGUpOwogICAgY29uc3Qgb2JqZWN0ID0gdW53cmFwQWN0aXZpdHlJZk5lY2Vzc2FyeShmZXRjaGVkT2JqZWN0LCBpZCwgY2FsbGJhY2tzKTsKICAgIGNvbnN0IHJlcGxpZXMgPSBvYmplY3QudHlwZSA9PT0gJ1BvZGNhc3RFcGlzb2RlJyA/IG9iamVjdC5jb21tZW50cyA6IG9iamVjdC5yZXBsaWVzOwogICAgaWYgKHJlcGxpZXMgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBvYmplY3QudHlwZSA9PT0gJ1BvZGNhc3RFcGlzb2RlJyA/IGBObyAnY29tbWVudHMnIGZvdW5kIG9uIFBvZGNhc3RFcGlzb2RlIG9iamVjdGAgOiBgTm8gJ3JlcGxpZXMnIGZvdW5kIG9uIG9iamVjdGA7CiAgICAgICAgY2FsbGJhY2tzPy5vbkV2ZW50KHsKICAgICAgICAgICAga2luZDogJ3dhcm5pbmcnLAogICAgICAgICAgICB1cmw6IGlkLAogICAgICAgICAgICBub2RlSWQ6IGlkLAogICAgICAgICAgICBtZXNzYWdlLAogICAgICAgICAgICBvYmplY3QKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gW107CiAgICB9CiAgICBjb25zdCBydCA9IFtdOwogICAgY29uc3QgZmV0Y2hlZCA9IG5ldyBTZXQoKTsKICAgIGlmICh0eXBlb2YgcmVwbGllcyA9PT0gJ3N0cmluZycpIHsKICAgICAgICBjb25zdCBvYmogPSBhd2FpdCBmaW5kT3JGZXRjaEFjdGl2aXR5UHViT2JqZWN0KHJlcGxpZXMsIHVwZGF0ZVRpbWUsIGZldGNoZXIsIGNhY2hlKTsKICAgICAgICBpZiAob2JqLnR5cGUgPT09ICdPcmRlcmVkQ29sbGVjdGlvbicpIHsKICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGNvbGxlY3RSZXBsaWVzRnJvbU9yZGVyZWRDb2xsZWN0aW9uKG9iaiwgdXBkYXRlVGltZSwgaWQsIGZldGNoZXIsIGNhY2hlLCBjYWxsYmFja3MsIGZldGNoZWQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJ3JlcGxpZXMnIHRvIHBvaW50IHRvIGFuIE9yZGVyZWRDb2xsZWN0aW9uLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KG9iail9YCk7CiAgICAgICAgfQogICAgfSBlbHNlIGlmIChyZXBsaWVzLmZpcnN0KSB7CiAgICAgICAgaWYgKHR5cGVvZiByZXBsaWVzLmZpcnN0ID09PSAnb2JqZWN0JyAmJiByZXBsaWVzLmZpcnN0LnR5cGUgPT09ICdDb2xsZWN0aW9uUGFnZScpIHsKICAgICAgICAgICAgaWYgKCFyZXBsaWVzLmZpcnN0Lml0ZW1zICYmICFyZXBsaWVzLmZpcnN0Lm5leHQpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJ3JlcGxpZXMuZmlyc3QuaXRlbXMnIG9yICdyZXBsaWVzLmZpcnN0Lm5leHQnIHRvIGJlIHByZXNlbnQsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkocmVwbGllcy5maXJzdCl9YCk7CiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcGxpZXMuZmlyc3QuaXRlbXMpICYmIHJlcGxpZXMuZmlyc3QuaXRlbXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgY29sbGVjdFJlcGxpZXNGcm9tSXRlbXMocmVwbGllcy5maXJzdC5pdGVtcywgcnQsIGlkLCBpZCwgY2FsbGJhY2tzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmVwbGllcy5maXJzdC5uZXh0KSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlcGxpZXMuZmlyc3QubmV4dCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICBydC5wdXNoKC4uLmF3YWl0IGNvbGxlY3RSZXBsaWVzRnJvbVBhZ2VzKHJlcGxpZXMuZmlyc3QubmV4dCwgdXBkYXRlVGltZSwgaWQsIGZldGNoZXIsIGNhY2hlLCBjYWxsYmFja3MsIGZldGNoZWQpKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAncmVwbGllcy5maXJzdC5uZXh0JyB0byBiZSBhIHN0cmluZywgZm91bmQgJHtKU09OLnN0cmluZ2lmeShyZXBsaWVzLmZpcnN0Lm5leHQpfWApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBydDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICdyZXBsaWVzLmZpcnN0Lml0ZW1zJyBhcnJheSwgb3IgJ3JlcGxpZXMuZmlyc3QubmV4dCcgc3RyaW5nLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHJlcGxpZXMuZmlyc3QpfWApOwogICAgICAgIH0KICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXBsaWVzKSkgewogICAgICAgIGlmIChyZXBsaWVzLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJ3JlcGxpZXMnIGFycmF5IHRvIGJlIGVtcHR5LCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHJlcGxpZXMpfWApOwogICAgICAgIHJldHVybiBbXTsKICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXBsaWVzLml0ZW1zKSkgewogICAgICAgIGNvbGxlY3RSZXBsaWVzRnJvbUl0ZW1zKHJlcGxpZXMuaXRlbXMsIHJ0LCBpZCwgaWQsIGNhbGxiYWNrcyk7CiAgICAgICAgcmV0dXJuIHJ0OwogICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICdyZXBsaWVzJyB0byBiZSBhIHN0cmluZywgYXJyYXkgb3Igb2JqZWN0IHdpdGggJ2ZpcnN0JyBvciAnaXRlbXMnLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHJlcGxpZXMpfWApOwogICAgfQp9CmFzeW5jIGZ1bmN0aW9uIGNvbGxlY3RSZXBsaWVzRnJvbU9yZGVyZWRDb2xsZWN0aW9uKG9yZGVyZWRDb2xsZWN0aW9uLCBhZnRlciwgbm9kZUlkLCBmZXRjaGVyLCBjYWNoZSwgY2FsbGJhY2tzLCBmZXRjaGVkKSB7CiAgICBpZiAoKG9yZGVyZWRDb2xsZWN0aW9uLml0ZW1zPy5sZW5ndGggfHwgMCkgPiAwIHx8IChvcmRlcmVkQ29sbGVjdGlvbi5vcmRlcmVkSXRlbXM/Lmxlbmd0aCB8fCAwKSA+IDApIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIE9yZGVyZWRDb2xsZWN0aW9uICdpdGVtcycvJ29yZGVyZWRJdGVtcycgdG8gYmUgZW1wdHksIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkob3JkZXJlZENvbGxlY3Rpb24pfWApOwogICAgfQogICAgaWYgKG9yZGVyZWRDb2xsZWN0aW9uLmZpcnN0ID09PSB1bmRlZmluZWQgJiYgb3JkZXJlZENvbGxlY3Rpb24udG90YWxJdGVtcyA9PT0gMCkgewogICAgICAgIHJldHVybiBbXTsKICAgIH0gZWxzZSBpZiAodHlwZW9mIG9yZGVyZWRDb2xsZWN0aW9uLmZpcnN0ID09PSAnc3RyaW5nJykgewogICAgICAgIHJldHVybiBhd2FpdCBjb2xsZWN0UmVwbGllc0Zyb21QYWdlcyhvcmRlcmVkQ29sbGVjdGlvbi5maXJzdCwgYWZ0ZXIsIG5vZGVJZCwgZmV0Y2hlciwgY2FjaGUsIGNhbGxiYWNrcywgZmV0Y2hlZCk7CiAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgT3JkZXJlZENvbGxlY3Rpb24gJ2ZpcnN0JyB0byBiZSBhIHN0cmluZywgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvcmRlcmVkQ29sbGVjdGlvbil9YCk7CiAgICB9Cn0KYXN5bmMgZnVuY3Rpb24gY29sbGVjdFJlcGxpZXNGcm9tUGFnZXModXJsLCBhZnRlciwgbm9kZUlkLCBmZXRjaGVyLCBjYWNoZSwgY2FsbGJhY2tzLCBmZXRjaGVkKSB7CiAgICBjb25zdCByZXBsaWVzID0gW107CiAgICBsZXQgcGFnZSA9IGF3YWl0IGZpbmRPckZldGNoQWN0aXZpdHlQdWJPYmplY3QodXJsLCBhZnRlciwgZmV0Y2hlciwgY2FjaGUpOwogICAgd2hpbGUodHJ1ZSl7CiAgICAgICAgaWYgKHBhZ2UudHlwZSAhPT0gJ0NvbGxlY3Rpb25QYWdlJyAmJiBwYWdlLnR5cGUgIT09ICdPcmRlcmVkQ29sbGVjdGlvblBhZ2UnKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgcGFnZSAndHlwZScgb2YgQ29sbGVjdGlvblBhZ2Ugb3IgT3JkZXJlZENvbGxlY3Rpb25QYWdlLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHBhZ2UpfWApOwogICAgICAgIH0KICAgICAgICBpZiAocGFnZS5pdGVtcykgewogICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocGFnZS5pdGVtcykpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgcGFnZSAnaXRlbXMnIHRvIGJlIGFuIGFycmF5LCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHBhZ2UpfWApOwogICAgICAgICAgICBjb2xsZWN0UmVwbGllc0Zyb21JdGVtcyhwYWdlLml0ZW1zLCByZXBsaWVzLCBub2RlSWQsIHVybCwgY2FsbGJhY2tzKTsKICAgICAgICB9CiAgICAgICAgaWYgKHBhZ2UudHlwZSA9PT0gJ09yZGVyZWRDb2xsZWN0aW9uUGFnZScgJiYgcGFnZS5vcmRlcmVkSXRlbXMpIHsKICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHBhZ2Uub3JkZXJlZEl0ZW1zKSkgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBwYWdlICdvcmRlcmVkSXRlbXMnIHRvIGJlIGFuIGFycmF5LCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHBhZ2UpfWApOwogICAgICAgICAgICBjb2xsZWN0UmVwbGllc0Zyb21JdGVtcyhwYWdlLm9yZGVyZWRJdGVtcywgcmVwbGllcywgbm9kZUlkLCB1cmwsIGNhbGxiYWNrcyk7CiAgICAgICAgfQogICAgICAgIGlmIChwYWdlLm5leHQpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBwYWdlLm5leHQgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHBhZ2UgJ25leHQnIHRvIGJlIGEgc3RyaW5nLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHBhZ2UpfWApOwogICAgICAgICAgICBpZiAoZmV0Y2hlZC5oYXMocGFnZS5uZXh0KSkgcmV0dXJuIHJlcGxpZXM7CiAgICAgICAgICAgIHBhZ2UgPSBhd2FpdCBmaW5kT3JGZXRjaEFjdGl2aXR5UHViT2JqZWN0KHBhZ2UubmV4dCwgYWZ0ZXIsIGZldGNoZXIsIGNhY2hlKTsKICAgICAgICAgICAgZmV0Y2hlZC5hZGQocGFnZS5uZXh0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gcmVwbGllczsKICAgICAgICB9CiAgICB9Cn0KZnVuY3Rpb24gbWFrZUZldGNoZXJXaXRoVXNlckFnZW50KGZldGNoZXIsIHVzZXJBZ2VudCkgewogICAgdXNlckFnZW50ID0gdXNlckFnZW50LnRyaW0oKTsKICAgIGlmICh1c2VyQWdlbnQubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIG5vbi1ibGFuayB1c2VyLWFnZW50YCk7CiAgICByZXR1cm4gYXN5bmMgKHVybCwgb3B0cyk9PnsKICAgICAgICBjb25zdCBoZWFkZXJzID0gewogICAgICAgICAgICAuLi5vcHRzPy5oZWFkZXJzIHx8IHt9LAogICAgICAgICAgICAndXNlci1hZ2VudCc6IHVzZXJBZ2VudAogICAgICAgIH07CiAgICAgICAgcmV0dXJuIGF3YWl0IGZldGNoZXIodXJsLCB7CiAgICAgICAgICAgIGhlYWRlcnMKICAgICAgICB9KTsKICAgIH07Cn0KZnVuY3Rpb24gdW53cmFwQWN0aXZpdHlJZk5lY2Vzc2FyeShvYmplY3QsIGlkLCBjYWxsYmFja3MpIHsKICAgIGlmIChvYmplY3QudHlwZSA9PT0gJ0NyZWF0ZScgJiYgaXNTdHJpbmdSZWNvcmQxKG9iamVjdC5vYmplY3QpKSB7CiAgICAgICAgY2FsbGJhY2tzPy5vbkV2ZW50KHsKICAgICAgICAgICAga2luZDogJ3dhcm5pbmcnLAogICAgICAgICAgICB1cmw6IGlkLAogICAgICAgICAgICBub2RlSWQ6IGlkLAogICAgICAgICAgICBtZXNzYWdlOiAnVW53cmFwcGluZyBhIENyZWF0ZSBhY3Rpdml0eSB3aGVyZSBhbiBvYmplY3Qgd2FzIGV4cGVjdGVkJywKICAgICAgICAgICAgb2JqZWN0CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIG9iamVjdC5vYmplY3Q7CiAgICB9CiAgICByZXR1cm4gb2JqZWN0Owp9CmZ1bmN0aW9uIGNvbGxlY3RSZXBsaWVzRnJvbUl0ZW1zKGl0ZW1zLCBvdXRSZXBsaWVzLCBub2RlSWQsIHVybCwgY2FsbGJhY2tzKSB7CiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpewogICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycgJiYgIWl0ZW0uc3RhcnRzV2l0aCgneycpKSB7CiAgICAgICAgICAgIG91dFJlcGxpZXMucHVzaChpdGVtKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zdCBpdGVtT2JqID0gdHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZShpdGVtKSA6IGl0ZW07CiAgICAgICAgICAgIGNvbnN0IHsgaWQgIH0gPSBpdGVtT2JqOwogICAgICAgICAgICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBpdGVtICdpZCcgdG8gYmUgYSBzdHJpbmcsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkoaXRlbU9iail9YCk7CiAgICAgICAgICAgIG91dFJlcGxpZXMucHVzaChpZCk7CiAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrcz8ub25FdmVudCh7CiAgICAgICAgICAgICAgICAgICAga2luZDogJ3dhcm5pbmcnLAogICAgICAgICAgICAgICAgICAgIG5vZGVJZCwKICAgICAgICAgICAgICAgICAgICB1cmwsCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ZvdW5kIGl0ZW0gaW5jb3JyZWN0bHkgZG91YmxlIGVuY29kZWQgYXMgYSBqc29uIHN0cmluZycsCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiBpdGVtT2JqCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQpmdW5jdGlvbiBjb21wdXRlQ29tbWVudChvYmplY3QsIGlkLCBjYWxsYmFja3MpIHsKICAgIG9iamVjdCA9IHVud3JhcEFjdGl2aXR5SWZOZWNlc3Nhcnkob2JqZWN0LCBpZCwgY2FsbGJhY2tzKTsKICAgIGNvbnN0IGNvbnRlbnQgPSBjb21wdXRlQ29udGVudChvYmplY3QpOwogICAgY29uc3QgYXR0YWNobWVudHMgPSBjb21wdXRlQXR0YWNobWVudHMob2JqZWN0KTsKICAgIGNvbnN0IHVybCA9IGNvbXB1dGVVcmwob2JqZWN0LnVybCkgfHwgaWQ7CiAgICBjb25zdCB7IHB1Ymxpc2hlZCAgfSA9IG9iamVjdDsKICAgIGNvbnN0IGF0dHJpYnV0ZWRUbyA9IGNvbXB1dGVBdHRyaWJ1dGVkVG8ob2JqZWN0LmF0dHJpYnV0ZWRUbyk7CiAgICBpZiAodHlwZW9mIHB1Ymxpc2hlZCAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJ3B1Ymxpc2hlZCcgdG8gYmUgYSBzdHJpbmcsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkocHVibGlzaGVkKX1gKTsKICAgIHJldHVybiB7CiAgICAgICAgdXJsLAogICAgICAgIHB1Ymxpc2hlZCwKICAgICAgICBhdHRhY2htZW50cywKICAgICAgICBjb250ZW50LAogICAgICAgIGF0dHJpYnV0ZWRUbwogICAgfTsKfQpmdW5jdGlvbiBjb21wdXRlVXJsKHVybCkgewogICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkIHx8IHVybCA9PT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDsKICAgIGlmICh0eXBlb2YgdXJsID09PSAnc3RyaW5nJykgcmV0dXJuIHVybDsKICAgIGlmIChBcnJheS5pc0FycmF5KHVybCkpIHsKICAgICAgICBjb25zdCB2MSA9IHVybC5maW5kKCh2KT0+di50eXBlID09PSAnTGluaycgJiYgdi5tZWRpYVR5cGUgPT09ICd0ZXh0L2h0bWwnICYmIHR5cGVvZiB2LmhyZWYgPT09ICdzdHJpbmcnCiAgICAgICAgKTsKICAgICAgICBpZiAodjEpIHJldHVybiB2MS5ocmVmOwogICAgfQogICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAndXJsJyB0byBiZSBhIHN0cmluZywgZm91bmQgJHtKU09OLnN0cmluZ2lmeSh1cmwpfWApOwp9CmZ1bmN0aW9uIGNvbXB1dGVBdHRyaWJ1dGVkVG8oYXR0cmlidXRlZFRvKSB7CiAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZWRUbyA9PT0gJ3N0cmluZycpIHJldHVybiBhdHRyaWJ1dGVkVG87CiAgICBpZiAoQXJyYXkuaXNBcnJheShhdHRyaWJ1dGVkVG8pICYmIGF0dHJpYnV0ZWRUby5sZW5ndGggPiAwKSB7CiAgICAgICAgaWYgKGF0dHJpYnV0ZWRUby5ldmVyeSgodik9PnR5cGVvZiB2ID09PSAnc3RyaW5nJwogICAgICAgICkpIHJldHVybiBhdHRyaWJ1dGVkVG9bMF07CiAgICAgICAgaWYgKGF0dHJpYnV0ZWRUby5ldmVyeSgodik9PmlzU3RyaW5nUmVjb3JkMSh2KQogICAgICAgICkpIHsKICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGF0dHJpYnV0ZWRUbyl7CiAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnUGVyc29uJyAmJiB0eXBlb2YgaXRlbS5pZCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICdhdHRyaWJ1dGVkVG8nIG9iamVjdCBhcnJheSB0byBoYXZlIGEgUGVyc29uIHdpdGggYW4gJ2lkJywgZm91bmQgJHtKU09OLnN0cmluZ2lmeShhdHRyaWJ1dGVkVG8pfWApOwogICAgICAgIH0KICAgIH0KICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJ2F0dHJpYnV0ZWRUbycgdG8gYmUgYSBzdHJpbmcgb3Igbm9uLWVtcHR5IHN0cmluZy9vYmplY3QgYXJyYXksIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkoYXR0cmlidXRlZFRvKX1gKTsKfQpmdW5jdGlvbiBjb21wdXRlQ29udGVudChvYmopIHsKICAgIGlmIChvYmoudHlwZSA9PT0gJ1BvZGNhc3RFcGlzb2RlJyAmJiBpc1N0cmluZ1JlY29yZDEob2JqLmRlc2NyaXB0aW9uKSAmJiBvYmouZGVzY3JpcHRpb24udHlwZSA9PT0gJ05vdGUnKSBvYmogPSBvYmouZGVzY3JpcHRpb247CiAgICBjb25zdCB7IGNvbnRlbnQgLCBjb250ZW50TWFwICB9ID0gb2JqOwogICAgaWYgKGNvbnRlbnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJ2NvbnRlbnQnIHRvIGJlIGEgc3RyaW5nLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KGNvbnRlbnQpfWApOwogICAgaWYgKGNvbnRlbnRNYXAgIT09IHVuZGVmaW5lZCAmJiAhaXNTdHJpbmdSZWNvcmQxKGNvbnRlbnRNYXApKSB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICdjb250ZW50TWFwJyB0byBiZSBhIHN0cmluZyByZWNvcmQsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkoY29udGVudE1hcCl9YCk7CiAgICBpZiAoY29udGVudE1hcCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gY29udGVudE1hcDsKICAgIGlmIChjb250ZW50ICE9PSB1bmRlZmluZWQpIHJldHVybiB7CiAgICAgICAgdW5kOiBjb250ZW50CiAgICB9OwogICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBlaXRoZXIgJ2NvbnRlbnRNYXAnIG9yICdjb250ZW50JyB0byBiZSBwcmVzZW50ICR7SlNPTi5zdHJpbmdpZnkob2JqKX1gKTsKfQpmdW5jdGlvbiBjb21wdXRlQXR0YWNobWVudHMob2JqZWN0KSB7CiAgICBjb25zdCBydCA9IFtdOwogICAgaWYgKCFvYmplY3QuYXR0YWNobWVudCkgcmV0dXJuIHJ0OwogICAgY29uc3QgYXR0YWNobWVudHMgPSBpc1JlYWRvbmx5QXJyYXkxKG9iamVjdC5hdHRhY2htZW50KSA/IG9iamVjdC5hdHRhY2htZW50IDogWwogICAgICAgIG9iamVjdC5hdHRhY2htZW50CiAgICBdOwogICAgZm9yIChjb25zdCBhdHRhY2htZW50IG9mIGF0dGFjaG1lbnRzKXsKICAgICAgICBydC5wdXNoKGNvbXB1dGVBdHRhY2htZW50KGF0dGFjaG1lbnQpKTsKICAgIH0KICAgIHJldHVybiBydDsKfQpmdW5jdGlvbiBjb21wdXRlQXR0YWNobWVudChvYmplY3QpIHsKICAgIGlmICh0eXBlb2Ygb2JqZWN0ICE9PSAnb2JqZWN0JyB8fCBvYmplY3QudHlwZSAhPT0gJ0RvY3VtZW50JyAmJiBvYmplY3QudHlwZSAhPT0gJ0ltYWdlJykgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdHRhY2htZW50ICd0eXBlJyBvZiBEb2N1bWVudCBvciBJbWFnZSwgZm91bmQgJHtKU09OLnN0cmluZ2lmeShvYmplY3QudHlwZSl9YCk7CiAgICBjb25zdCB7IG1lZGlhVHlwZSAsIHdpZHRoICwgaGVpZ2h0ICwgdXJsICB9ID0gb2JqZWN0OwogICAgaWYgKHR5cGVvZiBtZWRpYVR5cGUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0dGFjaG1lbnQgJ21lZGlhVHlwZScgdG8gYmUgYSBzdHJpbmcsIGZvdW5kICR7SlNPTi5zdHJpbmdpZnkobWVkaWFUeXBlKX1gKTsKICAgIGlmICh3aWR0aCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aWR0aCAhPT0gJ251bWJlcicpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXR0YWNobWVudCAnd2lkdGgnIHRvIGJlIGEgbnVtYmVyLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KHdpZHRoKX1gKTsKICAgIGlmIChoZWlnaHQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgaGVpZ2h0ICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdHRhY2htZW50ICdoZWlnaHQnIHRvIGJlIGEgbnVtYmVyLCBmb3VuZCAke0pTT04uc3RyaW5naWZ5KGhlaWdodCl9YCk7CiAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXR0YWNobWVudCAndXJsJyB0byBiZSBhIHN0cmluZywgZm91bmQgJHtKU09OLnN0cmluZ2lmeSh1cmwpfWApOwogICAgcmV0dXJuIHsKICAgICAgICBtZWRpYVR5cGUsCiAgICAgICAgd2lkdGgsCiAgICAgICAgaGVpZ2h0LAogICAgICAgIHVybAogICAgfTsKfQpmdW5jdGlvbiBjb21wdXRlQ29tbWVudGVyKHBlcnNvbiwgYXNvZikgewogICAgbGV0IGljb24xOwogICAgaWYgKHBlcnNvbi5pY29uKSB7CiAgICAgICAgaWYgKHR5cGVvZiBwZXJzb24uaWNvbiAhPT0gJ29iamVjdCcgfHwgaXNSZWFkb25seUFycmF5MShwZXJzb24uaWNvbikgfHwgcGVyc29uLmljb24udHlwZSAhPT0gJ0ltYWdlJykgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBwZXJzb24gJ2ljb24nIHRvIGJlIGFuIG9iamVjdCwgZm91bmQ6ICR7SlNPTi5zdHJpbmdpZnkocGVyc29uLmljb24pfWApOwogICAgICAgIGljb24xID0gY29tcHV0ZUljb24ocGVyc29uLmljb24pOwogICAgfQogICAgY29uc3QgeyBuYW1lICwgcHJlZmVycmVkVXNlcm5hbWUgLCB1cmw6IGFwVXJsICwgaWQgIH0gPSBwZXJzb247CiAgICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBwZXJzb24gJ25hbWUnIHRvIGJlIGEgc3RyaW5nLCBmb3VuZDogJHtKU09OLnN0cmluZ2lmeShwZXJzb24pfWApOwogICAgaWYgKHByZWZlcnJlZFVzZXJuYW1lICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHByZWZlcnJlZFVzZXJuYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBwZXJzb24gJ3ByZWZlcnJlZFVzZXJuYW1lJyB0byBiZSBhIHN0cmluZywgZm91bmQ6ICR7SlNPTi5zdHJpbmdpZnkocGVyc29uKX1gKTsKICAgIGNvbnN0IG5hbWVPclByZWZlcnJlZFVzZXJuYW1lID0gbmFtZSB8fCBwcmVmZXJyZWRVc2VybmFtZTsKICAgIGlmICghbmFtZU9yUHJlZmVycmVkVXNlcm5hbWUpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgcGVyc29uICduYW1lJyBvciAncHJlZmVycmVkVXNlcm5hbWUnLCBmb3VuZDogJHtKU09OLnN0cmluZ2lmeShwZXJzb24pfWApOwogICAgaWYgKGFwVXJsICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGFwVXJsICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBwZXJzb24gJ3VybCcgdG8gYmUgYSBzdHJpbmcsIGZvdW5kOiAke0pTT04uc3RyaW5naWZ5KGFwVXJsKX1gKTsKICAgIGNvbnN0IHVybCA9IGFwVXJsIHx8IGlkOwogICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHBlcnNvbiAndXJsJyBvciAnaWQnIHRvIGJlIGEgc3RyaW5nLCBmb3VuZDogJHtKU09OLnN0cmluZ2lmeSh1cmwpfWApOwogICAgY29uc3QgZnFVc2VybmFtZSA9IGNvbXB1dGVGcVVzZXJuYW1lKHVybCwgcGVyc29uLnByZWZlcnJlZFVzZXJuYW1lKTsKICAgIHJldHVybiB7CiAgICAgICAgaWNvbjogaWNvbjEsCiAgICAgICAgbmFtZTogbmFtZU9yUHJlZmVycmVkVXNlcm5hbWUsCiAgICAgICAgdXJsLAogICAgICAgIGZxVXNlcm5hbWUsCiAgICAgICAgYXNvZgogICAgfTsKfQpmdW5jdGlvbiBjb21wdXRlSWNvbihpbWFnZSkgewogICAgY29uc3QgeyB1cmwgLCBtZWRpYVR5cGUgIH0gPSBpbWFnZTsKICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBpY29uICd1cmwnIHRvIGJlIGEgc3RyaW5nLCBmb3VuZDogJHtKU09OLnN0cmluZ2lmeSh1cmwpfWApOwogICAgaWYgKG1lZGlhVHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBtZWRpYVR5cGUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGljb24gJ21lZGlhVHlwZScgdG8gYmUgYSBzdHJpbmcsIGZvdW5kOiAke0pTT04uc3RyaW5naWZ5KG1lZGlhVHlwZSl9YCk7CiAgICByZXR1cm4gewogICAgICAgIHVybCwKICAgICAgICBtZWRpYVR5cGUKICAgIH07Cn0KZnVuY3Rpb24gY29tcHV0ZUZxVXNlcm5hbWUodXJsLCBwcmVmZXJyZWRVc2VybmFtZSkgewogICAgY29uc3QgdSA9IG5ldyBVUkwodXJsKTsKICAgIGNvbnN0IG0gPSAvXlwvKEBbXlwvXSspJC8uZXhlYyh1LnBhdGhuYW1lKTsKICAgIGNvbnN0IHVzZXJuYW1lID0gbSA/IG1bMV0gOiBwcmVmZXJyZWRVc2VybmFtZTsKICAgIGlmICghdXNlcm5hbWUpIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGNvbXB1dGUgdXNlcm5hbWUgZnJvbSB1cmw6ICR7dXJsfWApOwogICAgcmV0dXJuIGAke3VzZXJuYW1lfUAke3UuaG9zdG5hbWV9YDsKfQpmdW5jdGlvbiB0cnlQYXJzZUludCh2YWx1ZSkgewogICAgdHJ5IHsKICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUpOwogICAgfSBjYXRjaCAgewogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9Cn0KZnVuY3Rpb24gdHJ5UGFyc2VJc284NjAxKHZhbHVlKSB7CiAgICByZXR1cm4gaXNWYWxpZElzbzg2MDEodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7Cn0KZnVuY3Rpb24gc2xlZXAobXMpIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PnNldFRpbWVvdXQocmVzb2x2ZSwgbXMpCiAgICApOwp9CmNsYXNzIFZhbGlkYXRpb25Kb2JWTSB7CiAgICBmZXRjaGVyczsKICAgIHBpU2VhcmNoRmV0Y2hlcjsKICAgIHRocmVhZGNhcFVzZXJBZ2VudDsKICAgIG5leHRKb2JJZCA9IDE7CiAgICBjdXJyZW50Sm9iOwogICAgZ2V0IHZhbGlkYXRpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEpvYiAhPT0gdW5kZWZpbmVkICYmICF0aGlzLmN1cnJlbnRKb2IuZG9uZTsKICAgIH0KICAgIGdldCBkb25lKCkgewogICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRKb2IgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmN1cnJlbnRKb2IuZG9uZTsKICAgIH0KICAgIGdldCBtZXNzYWdlcygpIHsKICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50Sm9iID8gdGhpcy5jdXJyZW50Sm9iLm1lc3NhZ2VzIDogW107CiAgICB9CiAgICBnZXQgaXNTZWFyY2goKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEpvYiAhPT0gdW5kZWZpbmVkICYmIHRoaXMuY3VycmVudEpvYi5zZWFyY2g7CiAgICB9CiAgICBnZXQgc2VhcmNoUmVzdWx0cygpIHsKICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50Sm9iID8gdGhpcy5jdXJyZW50Sm9iLnNlYXJjaFJlc3VsdHMgOiBbXTsKICAgIH0KICAgIGdldCB4bWwoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEpvYj8ueG1sOwogICAgfQogICAgZ2V0IHhtbFN1bW1hcnlUZXh0KCkgewogICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRKb2I/LnhtbFN1bW1hcnlUZXh0OwogICAgfQogICAgZ2V0IGNvbW1lbnRzUmVzdWx0KCkgewogICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRKb2I/LmNvbW1lbnRzUmVzdWx0OwogICAgfQogICAgY29uc3RydWN0b3Iob3B0cyl7CiAgICAgICAgY29uc3QgeyBsb2NhbEZldGNoZXI6IGxvY2FsRmV0Y2hlcjEgLCByZW1vdGVGZXRjaGVyOiByZW1vdGVGZXRjaGVyMSAsIHBpU2VhcmNoRmV0Y2hlcjogcGlTZWFyY2hGZXRjaGVyMSAsIHRocmVhZGNhcFVzZXJBZ2VudDogdGhyZWFkY2FwVXNlckFnZW50MSAgfSA9IG9wdHM7CiAgICAgICAgdGhpcy5mZXRjaGVycyA9IHsKICAgICAgICAgICAgbG9jYWxGZXRjaGVyOiBsb2NhbEZldGNoZXIxLAogICAgICAgICAgICByZW1vdGVGZXRjaGVyOiByZW1vdGVGZXRjaGVyMQogICAgICAgIH07CiAgICAgICAgdGhpcy5waVNlYXJjaEZldGNoZXIgPSBwaVNlYXJjaEZldGNoZXIxOwogICAgICAgIHRoaXMudGhyZWFkY2FwVXNlckFnZW50ID0gdGhyZWFkY2FwVXNlckFnZW50MTsKICAgIH0KICAgIG9uQ2hhbmdlID0gKCk9Pnt9OwogICAgY29udGludWVXaXRoKHVybCkgewogICAgICAgIGNvbnN0IHsgY3VycmVudEpvYiAgfSA9IHRoaXM7CiAgICAgICAgaWYgKGN1cnJlbnRKb2IpIHsKICAgICAgICAgICAgY3VycmVudEpvYi5kb25lID0gZmFsc2U7CiAgICAgICAgICAgIGN1cnJlbnRKb2Iuc2VhcmNoID0gZmFsc2U7CiAgICAgICAgICAgIGN1cnJlbnRKb2Iuc2VhcmNoUmVzdWx0cy5zcGxpY2UoMCk7CiAgICAgICAgICAgIGN1cnJlbnRKb2IubWVzc2FnZXNbMF0gPSB7CiAgICAgICAgICAgICAgICB0eXBlOiAncnVubmluZycsCiAgICAgICAgICAgICAgICB0ZXh0OiAnVmFsaWRhdGluZycKICAgICAgICAgICAgfTsKICAgICAgICAgICAgY3VycmVudEpvYi5tZXNzYWdlcy5wdXNoKHsKICAgICAgICAgICAgICAgIHR5cGU6ICdpbmZvJywKICAgICAgICAgICAgICAgIHRleHQ6ICdDb250aW51aW5nIHdpdGggZmVlZCBmcm9tIHNlYXJjaCcsCiAgICAgICAgICAgICAgICB1cmwKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUFzeW5jKHVybCwgY3VycmVudEpvYik7CiAgICAgICAgfQogICAgfQogICAgc3RhcnRWYWxpZGF0aW9uKGlucHV0LCBvcHRpb25zKSB7CiAgICAgICAgY29uc3Qgam9iID0gewogICAgICAgICAgICBpZDogdGhpcy5uZXh0Sm9iSWQrKywKICAgICAgICAgICAgbWVzc2FnZXM6IFtdLAogICAgICAgICAgICBzZWFyY2hSZXN1bHRzOiBbXSwKICAgICAgICAgICAgdGltZXM6IHt9LAogICAgICAgICAgICBvcHRpb25zLAogICAgICAgICAgICBzZWFyY2g6IGZhbHNlLAogICAgICAgICAgICBkb25lOiBmYWxzZSwKICAgICAgICAgICAgY2FuY2VsbGVkOiBmYWxzZQogICAgICAgIH07CiAgICAgICAgdGhpcy5jdXJyZW50Sm9iID0gam9iOwogICAgICAgIGpvYi5tZXNzYWdlcy5wdXNoKHsKICAgICAgICAgICAgdHlwZTogJ3J1bm5pbmcnLAogICAgICAgICAgICB0ZXh0OiAnVmFsaWRhdGluZycKICAgICAgICB9KTsKICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7CiAgICAgICAgdGhpcy52YWxpZGF0ZUFzeW5jKGlucHV0LCBqb2IpOwogICAgfQogICAgY2FuY2VsVmFsaWRhdGlvbigpIHsKICAgICAgICBpZiAodGhpcy5jdXJyZW50Sm9iICYmICF0aGlzLmN1cnJlbnRKb2IuZG9uZSkgewogICAgICAgICAgICB0aGlzLmN1cnJlbnRKb2IuY2FuY2VsbGVkID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy5jdXJyZW50Sm9iLmRvbmUgPSB0cnVlOwogICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7CiAgICAgICAgfQogICAgfQogICAgYXN5bmMgZmV0Y2godXJsLCBvcHRzKSB7CiAgICAgICAgY29uc3QgeyBoZWFkZXJzICB9ID0gb3B0czsKICAgICAgICBjb25zdCB7IGZldGNoZXJzICB9ID0gdGhpczsKICAgICAgICByZXR1cm4gYXdhaXQgbG9jYWxPclJlbW90ZUZldGNoKHVybCwgewogICAgICAgICAgICBmZXRjaGVycywKICAgICAgICAgICAgaGVhZGVycwogICAgICAgIH0pOwogICAgfQogICAgYXN5bmMgdmFsaWRhdGVBc3luYyhpbnB1dCwgam9iKSB7CiAgICAgICAgaW5wdXQgPSBub3JtYWxpemVJbnB1dChpbnB1dCk7CiAgICAgICAgY29uc3QgeyBtZXNzYWdlcyAgfSA9IGpvYjsKICAgICAgICBjb25zdCBzZXRTdGF0dXMgPSAodGV4dCwgb3B0cyA9IHt9KT0+ewogICAgICAgICAgICBjb25zdCB7IHVybCAsIHR5cGUgIH0gPSBvcHRzOwogICAgICAgICAgICBtZXNzYWdlc1swXSA9IHsKICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUgfHwgbWVzc2FnZXNbMF0udHlwZSwKICAgICAgICAgICAgICAgIHRleHQsCiAgICAgICAgICAgICAgICB1cmwKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgICAgIH07CiAgICAgICAgY29uc3QgYWRkTWVzc2FnZSA9ICh0eXBlLCB0ZXh0LCBvcHRzID0ge30pPT57CiAgICAgICAgICAgIGNvbnN0IHsgdXJsICwgdGFnICwgY29tbWVudCAsIHJlZmVyZW5jZSAgfSA9IG9wdHM7CiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goewogICAgICAgICAgICAgICAgdHlwZSwKICAgICAgICAgICAgICAgIHRleHQsCiAgICAgICAgICAgICAgICB0YWcsCiAgICAgICAgICAgICAgICB1cmwsCiAgICAgICAgICAgICAgICBjb21tZW50LAogICAgICAgICAgICAgICAgcmVmZXJlbmNlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7CiAgICAgICAgfTsKICAgICAgICBsZXQgYWN0aXZpdHlQdWI7CiAgICAgICAgY29uc3QgaGVhZGVycyA9IHsKICAgICAgICAgICAgJ0FjY2VwdC1FbmNvZGluZyc6ICdnemlwJywKICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBqb2Iub3B0aW9ucy51c2VyQWdlbnQsCiAgICAgICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLXN0b3JlJwogICAgICAgIH07CiAgICAgICAgbGV0IGNvbnRpbnVlV2l0aFVybDsKICAgICAgICBjb25zdCBqb2JTdGFydCA9IERhdGUubm93KCk7CiAgICAgICAgY29uc3QgeyBmZXRjaGVycyAsIHBpU2VhcmNoRmV0Y2hlcjogcGlTZWFyY2hGZXRjaGVyMiAgfSA9IHRoaXM7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC50cmltKCk7CiAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gJycpIHRocm93IG5ldyBFcnJvcihgTm8gaW5wdXRgKTsKICAgICAgICAgICAgaWYgKC9eaHR0cHM/OlwvXC8uKy9pLnRlc3QoaW5wdXQpKSB7CiAgICAgICAgICAgICAgICBjb25zdCBpbnB1dFVybCA9IHRyeVBhcnNlVXJsMShpbnB1dCk7CiAgICAgICAgICAgICAgICBpZiAoIWlucHV0VXJsKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCB1cmw6ICR7aW5wdXR9YCk7CiAgICAgICAgICAgICAgICBjaGVja01hdGNoZXMoJ2lucHV0VXJsLnByb3RvY29sJywgaW5wdXRVcmwucHJvdG9jb2wsIC9eaHR0cHM/OiQvKTsKICAgICAgICAgICAgICAgIGlucHV0VXJsLnNlYXJjaFBhcmFtcy5zZXQoJ190JywgRGF0ZS5ub3coKS50b1N0cmluZygpKTsKICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVzcG9uc2U6IHJlc3BvbnNlMSAsIHNpZGU6IHNpZGUxICwgZmV0Y2hUaW1lICB9ID0gYXdhaXQgbG9jYWxPclJlbW90ZUZldGNoKGlucHV0VXJsLnRvU3RyaW5nKCksIHsKICAgICAgICAgICAgICAgICAgICBmZXRjaGVycywKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChqb2IuZG9uZSkgcmV0dXJuOwogICAgICAgICAgICAgICAgam9iLnRpbWVzLmZldGNoVGltZSA9IGZldGNoVGltZTsKICAgICAgICAgICAgICAgIGlmIChzaWRlMSA9PT0gJ2xvY2FsJykgewogICAgICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ2dvb2QnLCBgTG9jYWwgZmV0Y2ggc3VjY2VlZGVkIChDT1JTIGVuYWJsZWQpYCwgewogICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGlucHV0CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjaGVja0VxdWFsKGAke2lucHV0VXJsLmhvc3R9IHJlc3BvbnNlIHN0YXR1c2AsIHJlc3BvbnNlMS5zdGF0dXMsIDIwMCk7CiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlMS5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJyk7CiAgICAgICAgICAgICAgICBsZXQgdmFsaWRhdGVGZWVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5pbmNsdWRlcygnL2h0bWwnKSkgewogICAgICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ2luZm8nLCAnRm91bmQgaHRtbCwgd2lsbCB0cnkgYWdhaW4gYXMgQWN0aXZpdHlQdWInKTsKICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUZlZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVB1YiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpbnB1dCwKICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdDogJ2lucHV0IHVybCcKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ2FwcGxpY2F0aW9uL2FjdGl2aXR5K2pzb24nKSkgewogICAgICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ2luZm8nLCAnRm91bmQgQWN0aXZpdHlQdWIganNvbicpOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IGF3YWl0IHJlc3BvbnNlMS5qc29uKCk7CiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVGZWVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlQdWIgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaW5wdXQsCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3Q6ICdpbnB1dCB1cmwnLAogICAgICAgICAgICAgICAgICAgICAgICBvYmoKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRlRmVlZCkgewogICAgICAgICAgICAgICAgICAgIGxldCBzdGFydCA9IERhdGUubm93KCk7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlc3BvbnNlMS50ZXh0KCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGpvYi5kb25lKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgam9iLnRpbWVzLnJlYWRUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0OwogICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTsKICAgICAgICAgICAgICAgICAgICBsZXQgeG1sOwogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbCA9IHBhcnNlWG1sKHRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh4bWwpOwogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHR5cGVvZiBlLm1lc3NhZ2UgPT09ICdzdHJpbmcnID8gZS5tZXNzYWdlIDogJyc7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtub3duSW52YWxpZCA9IG1lc3NhZ2UgPT09IGBDYW5ub3QgcmVhZCBwcm9wZXJ0aWVzIG9mIHVuZGVmaW5lZCAocmVhZGluZyAncGFyZW50JylgOwogICAgICAgICAgICAgICAgICAgICAgICBhZGRNZXNzYWdlKCdlcnJvcicsIGBYbWwgcGFyc2UgZmFpbGVkOiAke2tub3duSW52YWxpZCA/ICdJbnZhbGlkIHhtbCcgOiBlLm1lc3NhZ2V9YCk7CiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5ewogICAgICAgICAgICAgICAgICAgICAgICBqb2IudGltZXMucGFyc2VUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoeG1sKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb25NZXNzYWdlID0gKHR5cGUsIG5vZGUsIG1lc3NhZ2UsIG9wdHMpPT57CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRNZXNzYWdlKHR5cGUsIG1lc3NhZ2UsIG9wdHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHM/LnRhZyA9PT0gJ3NvY2lhbC1pbnRlcmFjdCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS52YWwgJiYgbm9kZS52YWwgIT09ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb21wdXRlQXR0cmlidXRlTWFwKG5vZGUuYXR0cnNNYXApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5nZXQoJ3BsYXRmb3JtJyk/LnRvTG93ZXJDYXNlKCkgPT09ICdhY3Rpdml0eXB1YicgfHwgYXR0cmlidXRlcy5nZXQoJ3Byb3RvY29sJyk/LnRvTG93ZXJDYXNlKCkgPT09ICdhY3Rpdml0eXB1YicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVwaXNvZGVUaXRsZSA9IGZpbmRFcGlzb2RlVGl0bGUobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVB1YiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG5vZGUudmFsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3Q6IGVwaXNvZGVUaXRsZSA/IGDigJwke2VwaXNvZGVUaXRsZX3igJ1gIDogJ2VwaXNvZGUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrbm93blBpVGFncyA9IG5ldyBTZXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5rbm93blBpVGFncyA9IG5ldyBTZXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGlOYW1lc3BhY2VVcmlzID0gbmV3IFNldCgpOwogICAgICAgICAgICAgICAgICAgICAgICBsZXQgcnNzSXRlbUluZm87CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uR29vZDogKG5vZGUsIG1lc3NhZ2UsIG9wdHMpPT57CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTWVzc2FnZSgnZ29vZCcsIG5vZGUsIG1lc3NhZ2UsIG9wdHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3I6IChub2RlLCBtZXNzYWdlLCBvcHRzKT0+ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25NZXNzYWdlKCdlcnJvcicsIG5vZGUsIG1lc3NhZ2UsIG9wdHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uV2FybmluZzogKG5vZGUsIG1lc3NhZ2UsIG9wdHMpPT57CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTWVzc2FnZSgnd2FybmluZycsIG5vZGUsIG1lc3NhZ2UsIG9wdHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uSW5mbzogKG5vZGUsIG1lc3NhZ2UsIG9wdHMpPT57CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTWVzc2FnZSgnaW5mbycsIG5vZGUsIG1lc3NhZ2UsIG9wdHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUG9kY2FzdEluZGV4VGFnTmFtZXNGb3VuZDogKGtub3duLCB1bmtub3duLCBuYW1lc3BhY2VVcmlzKT0+ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtub3duLmZvckVhY2goKHYpPT5rbm93blBpVGFncy5hZGQodikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVua25vd24uZm9yRWFjaCgodik9PnVua25vd25QaVRhZ3MuYWRkKHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2VVcmlzLmZvckVhY2goKHYpPT5waU5hbWVzcGFjZVVyaXMuYWRkKHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblJzc0l0ZW1zRm91bmQ6IChpdGVtc0NvdW50LCBpdGVtc1dpdGhFbmNsb3N1cmVzQ291bnQpPT57CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnNzSXRlbUluZm8gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zQ291bnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zV2l0aEVuY2xvc3VyZXNDb3VudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4bWxTdW1tYXJ5VGV4dCA9ICdYbWwgc3RydWN0dXJlJzsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVGZWVkWG1sKHhtbCwgY2FsbGJhY2tzKTsKICAgICAgICAgICAgICAgICAgICAgICAgam9iLnRpbWVzLnZhbGlkYXRlVGltZSA9IERhdGUubm93KCkgLSBzdGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJzc0l0ZW1JbmZvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGl0ZW1zQ291bnQgLCBpdGVtc1dpdGhFbmNsb3N1cmVzQ291bnQgIH0gPSByc3NJdGVtSW5mbzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1zV2l0aG91dEVuY2xvc3VyZXNDb3VudCA9IGl0ZW1zQ291bnQgLSBpdGVtc1dpdGhFbmNsb3N1cmVzQ291bnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwaWVjZXMgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYEZvdW5kICR7dW5pdFN0cmluZyhpdGVtc1dpdGhFbmNsb3N1cmVzQ291bnQsICdlcGlzb2RlJyl9YAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtc1dpdGhvdXRFbmNsb3N1cmVzQ291bnQgPiAwKSBwaWVjZXMucHVzaChgYW5kICR7dW5pdFN0cmluZyhpdGVtc1dpdGhvdXRFbmNsb3N1cmVzQ291bnQsICdpdGVtJyl9IHdpdGhvdXQgZW5jbG9zdXJlc2ApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goYGluIGEgJHtmb3JtYXRCeXRlcyh0ZXh0Lmxlbmd0aCl9IGZlZWRgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ2luZm8nLCBwaWVjZXMuam9pbignICcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbFN1bW1hcnlUZXh0ID0gYCR7aXRlbXNXaXRoRW5jbG9zdXJlc0NvdW50ID4gMSA/ICdQb2RjYXN0IGZlZWQnIDogJ0ZlZWQnfSBzdHJ1Y3R1cmVgOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBpUmVmZXJlbmNlID0gcG9kY2FzdEluZGV4UmVmZXJlbmNlKCdodHRwczovL2dpdGh1Yi5jb20vUG9kY2FzdGluZGV4LW9yZy9wb2RjYXN0LW5hbWVzcGFjZS9ibG9iL21haW4vZG9jcy8xLjAubWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFnU3RyaW5nID0gKHNldCk9PlsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0ubWFwKCh2KT0+YDxwb2RjYXN0OiR7dn0+YAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5qb2luKCcsICcpCiAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtub3duUGlUYWdzLnNpemUgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRNZXNzYWdlKCdnb29kJywgYEZvdW5kICR7dW5pdFN0cmluZyhrbm93blBpVGFncy5zaXplLCAncG9kY2FzdCBuYW1lc3BhY2UgdGFnJyl9OiAke3RhZ1N0cmluZyhrbm93blBpVGFncyl9YCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogcGlSZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmtub3duUGlUYWdzLnNpemUgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRNZXNzYWdlKCd3YXJuaW5nJywgYEZvdW5kICR7dW5pdFN0cmluZyh1bmtub3duUGlUYWdzLnNpemUsICd1bmtub3duIHBvZGNhc3QgbmFtZXNwYWNlIHRhZycpfTogJHt0YWdTdHJpbmcodW5rbm93blBpVGFncyl9YCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogcGlSZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pc3NwZWxsZWROYW1lc3BhY2VzID0gc2V0SW50ZXJzZWN0KHBpTmFtZXNwYWNlVXJpcywgbmV3IFNldChRbmFtZXMuUG9kY2FzdEluZGV4LktOT1dOX01JU1NQRUxMRURfTkFNRVNQQUNFUykpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWlzc3BlbGxlZE5hbWVzcGFjZXMuc2l6ZSA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9IHBvZGNhc3RJbmRleFJlZmVyZW5jZSgnaHR0cHM6Ly9naXRodWIuY29tL1BvZGNhc3RpbmRleC1vcmcvcG9kY2FzdC1uYW1lc3BhY2UvYmxvYi9tYWluL2RvY3MvMS4wLm1kI3Jzcy1uYW1lc3BhY2UtZXh0ZW5zaW9uLWZvci1wb2RjYXN0aW5nLXRhZy1zcGVjaWZpY2F0aW9uJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRNZXNzYWdlKCd3YXJuaW5nJywgYEZvdW5kICR7dW5pdFN0cmluZyhtaXNzcGVsbGVkTmFtZXNwYWNlcy5zaXplLCAnbWlzc3BlbGxlZCBwb2RjYXN0IG5hbWVzcGFjZSB1cmknKX06ICR7WwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLm1pc3NwZWxsZWROYW1lc3BhY2VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJywgJyl9YCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhtbCAmJiBPYmplY3Qua2V5cyh4bWwpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYi54bWwgPSB4bWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2IueG1sU3VtbWFyeVRleHQgPSB4bWxTdW1tYXJ5VGV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRlQ29tbWVudHMgPSBqb2Iub3B0aW9ucy52YWxpZGF0ZUNvbW1lbnRzICE9PSB1bmRlZmluZWQgPyBqb2Iub3B0aW9ucy52YWxpZGF0ZUNvbW1lbnRzIDogdHJ1ZTsKICAgICAgICAgICAgICAgIGlmIChhY3Rpdml0eVB1YiAmJiAhdmFsaWRhdGVDb21tZW50cykgewogICAgICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ2luZm8nLCAnQ29tbWVudHMgdmFsaWRhdGlvbiBkaXNhYmxlZCwgbm90IGZldGNoaW5nIEFjdGl2aXR5UHViJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGl2aXR5UHViKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0U3RhdHVzKGBWYWxpZGF0aW5nIEFjdGl2aXR5UHViIGZvciAke2FjdGl2aXR5UHViLnN1YmplY3R9YCwgewogICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGFjdGl2aXR5UHViLnVybAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ2luZm8nLCAnRmV0Y2hpbmcgQWN0aXZpdHlQdWIgY29tbWVudHMnLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYWN0aXZpdHlQdWIudXJsCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2VlcEdvaW5nID0gKCk9PiFqb2IuZG9uZQogICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1vdGVPbmx5T3JpZ2lucyA9IG5ldyBTZXQoKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wdXRlVXNlU2lkZSA9ICh1cmwpPT57CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZW1vdGVPbmx5T3JpZ2lucy5oYXMobmV3IFVSTCh1cmwpLm9yaWdpbikgPyAncmVtb3RlJyA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGxldCBhY3Rpdml0eVB1YkNhbGxzID0gMDsKICAgICAgICAgICAgICAgICAgICBjb25zdCBmZXRjaEFjdGl2aXR5UHViID0gYXN5bmMgKHVybCk9PnsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHsgcmVzcG9uc2UgLCBzaWRlICB9ID0gYXdhaXQgbG9jYWxPclJlbW90ZUZldGNoRmV0Y2hBY3Rpdml0eVB1Yih1cmwsIGZldGNoZXJzLCBjb21wdXRlVXNlU2lkZSh1cmwpLCAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iaiA9IGF3YWl0IHJlc3BvbnNlLmNsb25lKCkuanNvbigpOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShvYmosIHVuZGVmaW5lZCwgMikpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodXJsLmluY2x1ZGVzKCcvYXBpL3YxL3N0YXR1c2VzJykgJiYgdHlwZW9mIG9iai51cmkgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBvYmoudXJpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyByZXNwb25zZTogcmVzcG9uc2UyICwgc2lkZTogc2lkZTIgIH0gPSBhd2FpdCBsb2NhbE9yUmVtb3RlRmV0Y2hGZXRjaEFjdGl2aXR5UHViKHVybCwgZmV0Y2hlcnMsIGNvbXB1dGVVc2VTaWRlKHVybCksIDApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXNwb25zZTIuY2xvbmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iaiA9IGF3YWl0IHJlc3BvbnNlMi5qc29uKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlID0gc2lkZTI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShvYmosIHVuZGVmaW5lZCwgMikpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaWRlID09PSAncmVtb3RlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luID0gbmV3IFVSTCh1cmwpLm9yaWdpbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVtb3RlT25seU9yaWdpbnMuaGFzKG9yaWdpbikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRNZXNzYWdlKCd3YXJuaW5nJywgYExvY2FsIEFjdGl2aXR5UHViIGZldGNoIGZhaWxlZCAoQ09SUyBkaXNhYmxlZD8pYCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogJ2NvcnMnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlT25seU9yaWdpbnMuYWRkKG9yaWdpbik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlQdWJDYWxscysrOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gewogICAgICAgICAgICAgICAgICAgICAgICBvbkV2ZW50OiAoZXZlbnQpPT57CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2luZCA9PT0gJ3dhcm5pbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBtZXNzYWdlICwgdXJsICB9ID0gZXZlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkTWVzc2FnZSgnd2FybmluZycsIG1lc3NhZ2UsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtpbmQgPT09ICdub2RlLXByb2Nlc3NlZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2IuY29tbWVudHNSZXN1bHQgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocmVhZGNhcCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdDogYWN0aXZpdHlQdWIuc3ViamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2FsbGJhY2tzLmV2ZW50JywgZXZlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBmZXRjaGVyID0gbWFrZVJhdGVMaW1pdGVkRmV0Y2hlcihmZXRjaEFjdGl2aXR5UHViLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IEluTWVtb3J5Q2FjaGUoKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VyQWdlbnQgPSB0aGlzLnRocmVhZGNhcFVzZXJBZ2VudDsKICAgICAgICAgICAgICAgICAgICBjb25zdCB0aHJlYWRjYXAgPSBhd2FpdCBtYWtlVGhyZWFkY2FwKGFjdGl2aXR5UHViLnVybCwgewogICAgICAgICAgICAgICAgICAgICAgICB1c2VyQWdlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgam9iLmNvbW1lbnRzUmVzdWx0ID0gewogICAgICAgICAgICAgICAgICAgICAgICB0aHJlYWRjYXAsCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3Q6IGFjdGl2aXR5UHViLnN1YmplY3QKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVUaW1lID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpOwogICAgICAgICAgICAgICAgICAgIGF3YWl0IHVwZGF0ZVRocmVhZGNhcCh0aHJlYWRjYXAsIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZSwKICAgICAgICAgICAgICAgICAgICAgICAga2VlcEdvaW5nLAogICAgICAgICAgICAgICAgICAgICAgICB1c2VyQWdlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBqb2IudGltZXMuY29tbWVudHNUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0OwogICAgICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ2luZm8nLCBgRm91bmQgJHt1bml0U3RyaW5nKE9iamVjdC52YWx1ZXModGhyZWFkY2FwLm5vZGVzKS5maWx0ZXIoKHYpPT52LmNvbW1lbnQKICAgICAgICAgICAgICAgICAgICApLmxlbmd0aCwgJ2NvbW1lbnQnKX0gYW5kICR7dW5pdFN0cmluZyhPYmplY3Qua2V5cyh0aHJlYWRjYXAuY29tbWVudGVycykubGVuZ3RoLCAncGFydGljaXBhbnQnKX0sIG1hZGUgJHt1bml0U3RyaW5nKGFjdGl2aXR5UHViQ2FsbHMsICdBY3Rpdml0eVB1YiBjYWxsJyl9YCk7CiAgICAgICAgICAgICAgICAgICAgam9iLmNvbW1lbnRzUmVzdWx0ID0gewogICAgICAgICAgICAgICAgICAgICAgICB0aHJlYWRjYXAsCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3Q6IGFjdGl2aXR5UHViLnN1YmplY3QKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGpvYi5zZWFyY2ggPSB0cnVlOwogICAgICAgICAgICAgICAgc2V0U3RhdHVzKCdTZWFyY2hpbmcnKTsKICAgICAgICAgICAgICAgIGNvbnN0IHNlYXJjaFJlc3BvbnNlID0gYXdhaXQgcGlTZWFyY2hGZXRjaGVyMihpbnB1dCwgaGVhZGVycyk7CiAgICAgICAgICAgICAgICBjaGVja0VxdWFsKCdzZWFyY2hSZXNwb25zZS5zdGF0dXMnLCBzZWFyY2hSZXNwb25zZS5zdGF0dXMsIDIwMCk7CiAgICAgICAgICAgICAgICBjb25zdCBzZWFyY2hSZXN1bHQgPSBhd2FpdCBzZWFyY2hSZXNwb25zZS5qc29uKCk7CiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoUmVzdWx0LnBpU2VhcmNoUmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWFyY2hSZXN1bHQucGlTZWFyY2hSZXN1bHQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ2Vycm9yJywgc2VhcmNoUmVzdWx0LnBpU2VhcmNoUmVzdWx0KTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBqb2Iuc2VhcmNoUmVzdWx0cy5wdXNoKC4uLnNlYXJjaFJlc3VsdC5waVNlYXJjaFJlc3VsdC5mZWVkcy5zbGljZSgwLCAyMCkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VhcmNoUmVzdWx0LnBpSWRSZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlYXJjaFJlc3VsdC5waUlkUmVzdWx0ID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgICAgICBhZGRNZXNzYWdlKCdlcnJvcicsIHNlYXJjaFJlc3VsdC5waUlkUmVzdWx0KTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVhZG9ubHlBcnJheShzZWFyY2hSZXN1bHQucGlJZFJlc3VsdC5mZWVkKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVXaXRoVXJsID0gc2VhcmNoUmVzdWx0LnBpSWRSZXN1bHQuZmVlZC51cmw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ2Vycm9yJywgZS5tZXNzYWdlKTsKICAgICAgICB9IGZpbmFsbHl7CiAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ2luZm8nLCBgJHtqb2Iuc2VhcmNoID8gJ1NlYXJjaCB0b29rJyA6ICdUb29rJ30gJHtmb3JtYXRUaW1lKERhdGUubm93KCkgLSBqb2JTdGFydCl9JHtjb21wdXRlSm9iVGltZXNTdHJpbmdTdWZmaXgoam9iLnRpbWVzKX1gKTsKICAgICAgICAgICAgaWYgKGNvbnRpbnVlV2l0aFVybCkgewogICAgICAgICAgICAgICAgdGhpcy5jb250aW51ZVdpdGgoY29udGludWVXaXRoVXJsKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGpvYi5kb25lID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IGpvYi5jYW5jZWxsZWQgPyAnQ2FuY2VsbGVkJyA6IGpvYi5zZWFyY2ggJiYgam9iLnNlYXJjaFJlc3VsdHMubGVuZ3RoID09PSAwID8gJ0ZvdW5kIG5vIHBvZGNhc3RzJyA6IGpvYi5zZWFyY2ggJiYgam9iLnNlYXJjaFJlc3VsdHMubGVuZ3RoID09PSAxID8gJ0ZvdW5kIG9uZSBwb2RjYXN0LCBzZWxlY3QgdG8gY29udGludWUnIDogam9iLnNlYXJjaCA/IGBGb3VuZCAke2pvYi5zZWFyY2hSZXN1bHRzLmxlbmd0aH0gcG9kY2FzdHMsIHNlbGVjdCBvbmUgdG8gY29udGludWVgIDogJ0RvbmUnOwogICAgICAgICAgICAgICAgc2V0U3RhdHVzKHN0YXR1cywgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkb25lJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KZnVuY3Rpb24gZm9ybWF0VGltZShtaWxsaXMpIHsKICAgIGlmIChtaWxsaXMgPCAxMDAwKSByZXR1cm4gYCR7bWlsbGlzfW1zYDsKICAgIHJldHVybiBgJHtNYXRoLnJvdW5kKG1pbGxpcyAvIDEwMDAgKiAxMDApIC8gMTAwfXNgOwp9CmZ1bmN0aW9uIGNvbXB1dGVKb2JUaW1lc1N0cmluZ1N1ZmZpeCh0aW1lcykgewogICAgY29uc3QgcnQgPSBbCiAgICAgICAgWwogICAgICAgICAgICAnZmV0Y2gnLAogICAgICAgICAgICB0aW1lcy5mZXRjaFRpbWUKICAgICAgICBdLAogICAgICAgIFsKICAgICAgICAgICAgJ3JlYWQnLAogICAgICAgICAgICB0aW1lcy5yZWFkVGltZQogICAgICAgIF0sCiAgICAgICAgWwogICAgICAgICAgICAncGFyc2UnLAogICAgICAgICAgICB0aW1lcy5wYXJzZVRpbWUKICAgICAgICBdLAogICAgICAgIFsKICAgICAgICAgICAgJ3ZhbGlkYXRlJywKICAgICAgICAgICAgdGltZXMudmFsaWRhdGVUaW1lCiAgICAgICAgXSwKICAgICAgICBbCiAgICAgICAgICAgICdjb21tZW50cycsCiAgICAgICAgICAgIHRpbWVzLmNvbW1lbnRzVGltZQogICAgICAgIF0KICAgIF0uZmlsdGVyKCh2KT0+dlsxXSAhPT0gdW5kZWZpbmVkCiAgICApLm1hcCgodik9PmAke3ZbMF19PSR7Zm9ybWF0VGltZSh2WzFdKX1gCiAgICApLmpvaW4oJywgJyk7CiAgICByZXR1cm4gcnQgPT09ICcnID8gJycgOiBgICgke3J0fSlgOwp9CmZ1bmN0aW9uIGZvcm1hdEJ5dGVzKGJ5dGVzKSB7CiAgICBsZXQgYW1vdW50ID0gYnl0ZXM7CiAgICBpZiAoYW1vdW50IDwgMTAyNCkgcmV0dXJuIGAke2Ftb3VudH0tYnl0ZWA7CiAgICBhbW91bnQgPSBhbW91bnQgLyAxMDI0OwogICAgaWYgKGFtb3VudCA8IDEwMjQpIHJldHVybiBgJHtNYXRoLnJvdW5kKGFtb3VudCAqIDEwMCkgLyAxMDB9a2JgOwogICAgYW1vdW50ID0gYW1vdW50IC8gMTAyNDsKICAgIHJldHVybiBgJHtNYXRoLnJvdW5kKGFtb3VudCAqIDEwMCkgLyAxMDB9bWJgOwp9CmZ1bmN0aW9uIHVuaXRTdHJpbmcoYW1vdW50LCB1bml0KSB7CiAgICByZXR1cm4gYCR7YW1vdW50ID09PSAwID8gJ25vJyA6IGFtb3VudCA9PT0gMSA/ICdvbmUnIDogbmV3IEludGwuTnVtYmVyRm9ybWF0KCkuZm9ybWF0KGFtb3VudCl9ICR7dW5pdH0ke2Ftb3VudCA9PT0gMSA/ICcnIDogJ3MnfWA7Cn0KZnVuY3Rpb24gbm9ybWFsaXplSW5wdXQoaW5wdXQpIHsKICAgIGlucHV0ID0gaW5wdXQudHJpbSgpOwogICAgY29uc3QgbSA9IC9eaHR0cHM6XC9cL3BvZGNhc3RzXC5hcHBsZVwuY29tXC8uKj8oaWRcZCspJC8uZXhlYyhpbnB1dCk7CiAgICBpZiAobSkgcmV0dXJuIG1bMV07CiAgICByZXR1cm4gaW5wdXQ7Cn0KZnVuY3Rpb24gdHJ5UGFyc2VVcmwxKHVybCkgewogICAgdHJ5IHsKICAgICAgICByZXR1cm4gbmV3IFVSTCh1cmwpOwogICAgfSBjYXRjaCAgewogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9Cn0KZnVuY3Rpb24gc2xlZXAxKG1zKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpPT5zZXRUaW1lb3V0KHJlc29sdmUsIG1zKQogICAgKTsKfQphc3luYyBmdW5jdGlvbiBsb2NhbE9yUmVtb3RlRmV0Y2hGZXRjaEFjdGl2aXR5UHViKHVybCwgZmV0Y2hlcnMsIHVzZVNpZGUsIHNsZWVwTWlsbGlzQmV0d2VlbkNhbGxzKSB7CiAgICBpZiAoc2xlZXBNaWxsaXNCZXR3ZWVuQ2FsbHMgPiAwKSBhd2FpdCBzbGVlcDEoc2xlZXBNaWxsaXNCZXR3ZWVuQ2FsbHMpOwogICAgY29uc3QgeyByZXNwb25zZSAsIHNpZGUgIH0gPSBhd2FpdCBsb2NhbE9yUmVtb3RlRmV0Y2godXJsLCB7CiAgICAgICAgZmV0Y2hlcnMsCiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2FjdGl2aXR5K2pzb24nCiAgICAgICAgfSwKICAgICAgICB1c2VTaWRlCiAgICB9KTsKICAgIGNoZWNrRXF1YWwoJ3Jlcy5zdGF0dXMnLCByZXNwb25zZS5zdGF0dXMsIDIwMCk7CiAgICBjb25zb2xlLmxvZyhbCiAgICAgICAgLi4ucmVzcG9uc2UuaGVhZGVycwogICAgXS5tYXAoKHYpPT52LmpvaW4oJzogJykKICAgICkpOwogICAgY29uc3QgY29udGVudFR5cGUgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJyk7CiAgICBpZiAoIShjb250ZW50VHlwZSB8fCAnJykuaW5jbHVkZXMoJ2pzb24nKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgaHRtbCwgbm90IEFjdGl2aXR5UHViJyk7CiAgICB9CiAgICByZXR1cm4gewogICAgICAgIHJlc3BvbnNlLAogICAgICAgIHNpZGUKICAgIH07Cn0KYXN5bmMgZnVuY3Rpb24gbG9jYWxPclJlbW90ZUZldGNoKHVybCwgb3B0cykgewogICAgY29uc3QgeyBmZXRjaGVycyAsIGhlYWRlcnMgLCB1c2VTaWRlICB9ID0gb3B0czsKICAgIGlmICh1c2VTaWRlICE9PSAncmVtb3RlJykgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBsb2NhbCBmZXRjaDogJHt1cmx9YCk7CiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTsKICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaGVycy5sb2NhbEZldGNoZXIodXJsLCBoZWFkZXJzKTsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGZldGNoVGltZTogRGF0ZS5ub3coKSAtIHN0YXJ0LAogICAgICAgICAgICAgICAgc2lkZTogJ2xvY2FsJywKICAgICAgICAgICAgICAgIHJlc3BvbnNlCiAgICAgICAgICAgIH07CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGxvY2FsIGZldGNoLCB0cnlpbmcgcmVtb3RlJywgZSk7CiAgICAgICAgfQogICAgfQogICAgY29uc29sZS5sb2coYHJlbW90ZSBmZXRjaDogJHt1cmx9YCk7CiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7CiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoZXJzLnJlbW90ZUZldGNoZXIodXJsLCBoZWFkZXJzKTsKICAgIHJldHVybiB7CiAgICAgICAgZmV0Y2hUaW1lOiBEYXRlLm5vdygpIC0gc3RhcnQsCiAgICAgICAgc2lkZTogJ3JlbW90ZScsCiAgICAgICAgcmVzcG9uc2UKICAgIH07Cn0KZnVuY3Rpb24gZmluZEVwaXNvZGVUaXRsZShzb2NpYWxJbnRlcmFjdCkgewogICAgY29uc3QgaXRlbSA9IHNvY2lhbEludGVyYWN0LnBhcmVudDsKICAgIGlmIChpdGVtKSB7CiAgICAgICAgY29uc3QgdGl0bGUgPSBpdGVtLmNoaWxkWyd0aXRsZSddOwogICAgICAgIGlmICh0aXRsZS5sZW5ndGggPiAwICYmIHRpdGxlWzBdLnZhbCkgewogICAgICAgICAgICBjb25zdCB2YWwgPSB0aXRsZVswXS52YWwudHJpbSgpOwogICAgICAgICAgICBpZiAodmFsLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiB2YWw7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdW5kZWZpbmVkOwp9CmZ1bmN0aW9uIGlzT2F1dGhPYnRhaW5Ub2tlblJlc3BvbnNlKG9iaikgewogICAgcmV0dXJuIGlzU3RyaW5nUmVjb3JkKG9iaikgJiYgdHlwZW9mIG9iai5hY2Nlc3NfdG9rZW4gPT09ICdzdHJpbmcnICYmIHR5cGVvZiBvYmoudG9rZW5fdHlwZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIG9iai5zY29wZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIG9iai5jcmVhdGVkX2F0ID09PSAnbnVtYmVyJzsKfQpjb25zdCBBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGOCA9ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JzsKYXN5bmMgZnVuY3Rpb24gdmVyaWZ5SnNvblJlc3BvbnNlKHJlcywgYm9keVZlcmlmaWVyKSB7CiAgICBpZiAocmVzLnN0YXR1cyAhPT0gMjAwKSB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgaHR0cCByZXNwb25zZSBzdGF0dXM6ICR7cmVzLnN0YXR1c30sIGV4cGVjdGVkIDIwMCwgYm9keT0ke2F3YWl0IHJlcy50ZXh0KCl9YCk7CiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJyk7CiAgICBpZiAoY29udGVudFR5cGUgIT09IEFQUExJQ0FUSU9OX0pTT05fQ0hBUlNFVF9VVEY4KSB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgaHR0cCByZXNwb25zZSBzdGF0dXM6ICR7Y29udGVudFR5cGV9LCBleHBlY3RlZCAke0FQUExJQ0FUSU9OX0pTT05fQ0hBUlNFVF9VVEY4fSwgYm9keT0ke2F3YWl0IHJlcy50ZXh0KCl9YCk7CiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVzLmpzb24oKTsKICAgIGlmICghYm9keVZlcmlmaWVyKGJvZHkpKSB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgYm9keTogJHtKU09OLnN0cmluZ2lmeShib2R5LCB1bmRlZmluZWQsIDIpfWApOwogICAgcmV0dXJuIGJvZHk7Cn0KYXN5bmMgZnVuY3Rpb24gc3RhdHVzZXNQdWJsaXNoKGFwaUJhc2UsIGFjY2Vzc1Rva2VuLCBvcHRzKSB7CiAgICBjb25zdCB7IGlkZW1wb3RlbmN5S2V5ICwgc3RhdHVzICwgaW5fcmVwbHlfdG9faWQgIH0gPSBvcHRzOwogICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthY2Nlc3NUb2tlbn1gKTsKICAgIGlmIChpZGVtcG90ZW5jeUtleSkgaGVhZGVycy5zZXQoJ0lkZW1wb3RlbmN5LUtleScsIGlkZW1wb3RlbmN5S2V5KTsKICAgIGNvbnN0IGRhdGEgPSBuZXcgRm9ybURhdGEoKTsKICAgIGRhdGEuc2V0KCdzdGF0dXMnLCBzdGF0dXMpOwogICAgaWYgKGluX3JlcGx5X3RvX2lkKSBkYXRhLnNldCgnaW5fcmVwbHlfdG9faWQnLCBpbl9yZXBseV90b19pZCk7CiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHthcGlCYXNlfS9hcGkvdjEvc3RhdHVzZXNgLCB7CiAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgYm9keTogZGF0YSwKICAgICAgICBoZWFkZXJzCiAgICB9KTsKICAgIHJldHVybiB2ZXJpZnlKc29uUmVzcG9uc2UocmVzLCBpc1N0YXR1cyk7Cn0KZnVuY3Rpb24gaXNTdGF0dXMob2JqKSB7CiAgICByZXR1cm4gaXNTdHJpbmdSZWNvcmQob2JqKSAmJiB0eXBlb2Ygb2JqLmlkID09PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb2JqLnVyaSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIG9iai5jcmVhdGVkX2F0ID09PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb2JqLmNvbnRlbnQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBvYmoudmlzaWJpbGl0eSA9PT0gJ3N0cmluZycgJiYgKG9iai51cmwgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygb2JqLnVybCA9PT0gJ3N0cmluZycpICYmIChvYmouaW5fcmVwbHlfdG9faWQgPT09IHVuZGVmaW5lZCB8fCBvYmouaW5fcmVwbHlfdG9faWQgPT09IG51bGwgfHwgdHlwZW9mIG9iai5pbl9yZXBseV90b19pZCA9PT0gJ3N0cmluZycpOwp9CmNsYXNzIFZhbGlkYXRvckFwcFZNIHsKICAgIGpvYjsKICAgIGdldCB2YWxpZGF0aW5nKCkgewogICAgICAgIHJldHVybiB0aGlzLmpvYi52YWxpZGF0aW5nOwogICAgfQogICAgZ2V0IG1lc3NhZ2VzKCkgewogICAgICAgIHJldHVybiB0aGlzLmpvYi5tZXNzYWdlczsKICAgIH0KICAgIGdldCBpc1NlYXJjaCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5qb2IuaXNTZWFyY2g7CiAgICB9CiAgICBnZXQgc2VhcmNoUmVzdWx0cygpIHsKICAgICAgICByZXR1cm4gdGhpcy5qb2Iuc2VhcmNoUmVzdWx0czsKICAgIH0KICAgIGdldCB4bWwoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuam9iLnhtbDsKICAgIH0KICAgIGdldCB4bWxTdW1tYXJ5VGV4dCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5qb2IueG1sU3VtbWFyeVRleHQ7CiAgICB9CiAgICBnZXQgY29tbWVudHNSZXN1bHQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuam9iLmNvbW1lbnRzUmVzdWx0OwogICAgfQogICAgY29uc3RydWN0b3Iob3B0cyl7CiAgICAgICAgdGhpcy5qb2IgPSBuZXcgVmFsaWRhdGlvbkpvYlZNKG9wdHMpOwogICAgICAgIHRoaXMuam9iLm9uQ2hhbmdlID0gKCk9PnRoaXMub25DaGFuZ2UoKQogICAgICAgIDsKICAgIH0KICAgIG9uQ2hhbmdlID0gKCk9Pnt9OwogICAgc3RhcnQoKSB7fQogICAgY29udGludWVXaXRoKHVybCkgewogICAgICAgIHRoaXMuam9iLmNvbnRpbnVlV2l0aCh1cmwpOwogICAgfQogICAgc3RhcnRWYWxpZGF0aW9uKGlucHV0LCBvcHRpb25zKSB7CiAgICAgICAgdGhpcy5qb2Iuc3RhcnRWYWxpZGF0aW9uKGlucHV0LCBvcHRpb25zKTsKICAgIH0KICAgIGNhbmNlbFZhbGlkYXRpb24oKSB7CiAgICAgICAgdGhpcy5qb2IuY2FuY2VsVmFsaWRhdGlvbigpOwogICAgfQogICAgaXNMb2dnZWRJbihvcmlnaW4pIHsKICAgICAgICBjb25zdCBpbmZvID0gbG9hZExvZ2luSW5mbyhvcmlnaW4pOwogICAgICAgIHJldHVybiBpbmZvICE9PSB1bmRlZmluZWQgJiYgIWNvbXB1dGVFeHBpcmVkKGluZm8udG9rZW5SZXNwb25zZSk7CiAgICB9CiAgICBhY2NlcHRMb2dpbihvcmlnaW4sIHRva2VuUmVzcG9uc2UpIHsKICAgICAgICBjaGVja0VxdWFsKCd0b2tlbl90eXBlJywgdG9rZW5SZXNwb25zZS50b2tlbl90eXBlLnRvTG93ZXJDYXNlKCksICdiZWFyZXInKTsKICAgICAgICBjaGVja1RydWUoJ2NyZWF0ZWRfYXQsIGV4cGlyZXNfaW4nLCBbCiAgICAgICAgICAgIHRva2VuUmVzcG9uc2UuY3JlYXRlZF9hdCwKICAgICAgICAgICAgdG9rZW5SZXNwb25zZS5leHBpcmVzX2luCiAgICAgICAgXS5qb2luKCcsICcpLCAhY29tcHV0ZUV4cGlyZWQodG9rZW5SZXNwb25zZSkpOwogICAgICAgIHNhdmVMb2dpbkluZm8oewogICAgICAgICAgICBvcmlnaW4sCiAgICAgICAgICAgIHRva2VuUmVzcG9uc2UKICAgICAgICB9KTsKICAgIH0KICAgIGV4cGlyZUxvZ2luKG9yaWdpbikgewogICAgICAgIGRlbGV0ZUxvZ2luSW5mbyhvcmlnaW4pOwogICAgfQogICAgYXN5bmMgc2VuZFJlcGx5KHJlcGx5LCByZXBseVRvVXJsKSB7CiAgICAgICAgcmVwbHkgPSByZXBseS50cmltKCk7CiAgICAgICAgaWYgKHJlcGx5ID09PSAnJykgdGhyb3cgbmV3IEVycm9yKCdCYWQgcmVwbHk6IDxlbXB0eT4nKTsKICAgICAgICBjb25zdCB7IG9yaWdpbiAgfSA9IG5ldyBVUkwocmVwbHlUb1VybCk7CiAgICAgICAgY29uc3QgaW5mbyA9IGxvYWRMb2dpbkluZm8ob3JpZ2luKTsKICAgICAgICBpZiAoIWluZm8pIHRocm93IG5ldyBFcnJvcihgTm8gbG9naW4gZm9yICR7b3JpZ2lufWApOwogICAgICAgIGlmIChjb21wdXRlRXhwaXJlZChpbmZvLnRva2VuUmVzcG9uc2UpKSB0aHJvdyBuZXcgRXJyb3IoYExvZ2luIGV4cGlyZWQgZm9yICR7b3JpZ2lufWApOwogICAgICAgIGNvbnNvbGUubG9nKGByZXBseVRvVXJsYCwgcmVwbHlUb1VybCk7CiAgICAgICAgY29uc3QgbWFzdG9kb25JZCA9IGF3YWl0IGNvbXB1dGVNYXN0b2RvbklkRm9yVXJsKHJlcGx5VG9VcmwsIGFzeW5jICh1cmwsIGhlYWRlcnMpPT57CiAgICAgICAgICAgIGNvbnN0IHsgcmVzcG9uc2UgIH0gPSBhd2FpdCB0aGlzLmpvYi5mZXRjaCh1cmwsIHsKICAgICAgICAgICAgICAgIGhlYWRlcnMKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAgICB9KTsKICAgICAgICBjb25zb2xlLmxvZyhgbWFzdG9kb25JZGAsIG1hc3RvZG9uSWQpOwogICAgICAgIGNvbnN0IHsgdXJsOiB1cmwxICB9ID0gYXdhaXQgc3RhdHVzZXNQdWJsaXNoKG9yaWdpbiwgaW5mby50b2tlblJlc3BvbnNlLmFjY2Vzc190b2tlbiwgewogICAgICAgICAgICBzdGF0dXM6IHJlcGx5LAogICAgICAgICAgICBpbl9yZXBseV90b19pZDogbWFzdG9kb25JZAogICAgICAgIH0pOwogICAgICAgIHJldHVybiB1cmwxOwogICAgfQp9CmZ1bmN0aW9uIGNvbXB1dGVFeHBpcmVkKHRva2VuUmVzcG9uc2UpIHsKICAgIHJldHVybiB0eXBlb2YgdG9rZW5SZXNwb25zZS5leHBpcmVzX2luID09PSAnbnVtYmVyJyAmJiAodG9rZW5SZXNwb25zZS5jcmVhdGVkX2F0ICsgdG9rZW5SZXNwb25zZS5leHBpcmVzX2luKSAqIDEwMDAgPD0gRGF0ZS5ub3coKTsKfQpmdW5jdGlvbiBjb21wdXRlTG9naW5JbmZvTG9jYWxTdG9yYWdlS2V5KG9yaWdpbikgewogICAgcmV0dXJuIGBsb2dpbjoke29yaWdpbn1gOwp9CmZ1bmN0aW9uIGxvYWRMb2dpbkluZm8ob3JpZ2luKSB7CiAgICBjb25zdCBzdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShjb21wdXRlTG9naW5JbmZvTG9jYWxTdG9yYWdlS2V5KG9yaWdpbikpOwogICAgY29uc3Qgb2JqID0gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKHN0cikgOiB1bmRlZmluZWQ7CiAgICByZXR1cm4gaXNMb2dpbkluZm8ob2JqKSA/IG9iaiA6IHVuZGVmaW5lZDsKfQpmdW5jdGlvbiBzYXZlTG9naW5JbmZvKGluZm8pIHsKICAgIGNvbnN0IHsgb3JpZ2luICB9ID0gaW5mbzsKICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGNvbXB1dGVMb2dpbkluZm9Mb2NhbFN0b3JhZ2VLZXkob3JpZ2luKSwgSlNPTi5zdHJpbmdpZnkoaW5mbykpOwp9CmZ1bmN0aW9uIGRlbGV0ZUxvZ2luSW5mbyhvcmlnaW4pIHsKICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGNvbXB1dGVMb2dpbkluZm9Mb2NhbFN0b3JhZ2VLZXkob3JpZ2luKSk7Cn0KYXN5bmMgZnVuY3Rpb24gY29tcHV0ZU1hc3RvZG9uSWRGb3JVcmwocmVwbHlUb1VybCwgZmV0Y2hlcikgewogICAgY29uc3QgeyBwYXRobmFtZSAgfSA9IG5ldyBVUkwocmVwbHlUb1VybCk7CiAgICBjb25zdCBtID0gL15cLy4qP1wvKFxkKykkLy5leGVjKHBhdGhuYW1lKTsKICAgIGlmIChtKSByZXR1cm4gbVsxXTsKICAgIGlmICgvXi4qP1wvb2JqZWN0c1wvWzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17MTJ9JC8udGVzdChuZXcgVVJMKHJlcGx5VG9VcmwpLnBhdGhuYW1lKSkgewogICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoZXIocmVwbHlUb1VybCwgewogICAgICAgICAgICBhY2NlcHQ6ICd0ZXh0L2h0bWwnCiAgICAgICAgfSk7CiAgICAgICAgaWYgKHJlcy5zdGF0dXMgIT09IDIwMCkgdGhyb3cgbmV3IEVycm9yKGBCYWQgc3RhdHVzICR7cmVzLnN0YXR1c30sIGV4cGVjdGVkIDIwMCBmb3IgJHtyZXBseVRvVXJsfWApOwogICAgICAgIGNvbnN0IG0yID0gL15cLy4qP1wvKFthLXpBLVowLTldKykkLy5leGVjKG5ldyBVUkwocmVzLnVybCkucGF0aG5hbWUpOwogICAgICAgIGlmIChtMikgcmV0dXJuIG0yWzFdOwogICAgfQogICAgdGhyb3cgbmV3IEVycm9yKGBjb21wdXRlTWFzdG9kb25JZEZvclVybDogdW5hYmxlIHRvIGNvbXB1dGUgZm9yICR7cmVwbHlUb1VybH1gKTsKfQpmdW5jdGlvbiBpc0xvZ2luSW5mbyhvYmopIHsKICAgIHJldHVybiBpc1N0cmluZ1JlY29yZChvYmopICYmIHR5cGVvZiBvYmoub3JpZ2luID09PSAnc3RyaW5nJyAmJiBpc09hdXRoT2J0YWluVG9rZW5SZXNwb25zZShvYmoudG9rZW5SZXNwb25zZSk7Cn0KY29uc3QgQ0lSQ1VMQVJfUFJPR1JFU1NfQ1NTID0gY3NzYAoucHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhciB7CiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7CiAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7CiAgICBhcHBlYXJhbmNlOiBub25lOwogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIGJvcmRlcjogbm9uZTsKICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgIHBhZGRpbmc6IDAuMjVlbTsKICAgIHdpZHRoOiAzZW07CiAgICBoZWlnaHQ6IDNlbTsKICAgIGNvbG9yOiB2YXIoLS1wdXJlLW1hdGVyaWFsLXByaW1hcnktcmdiLCByZ2IoMzMsIDE1MCwgMjQzKSk7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIG92ZXJmbG93OiBoaWRkZW47Cn0KCi5wdXJlLW1hdGVyaWFsLXByb2dyZXNzLWNpcmN1bGFyOjotd2Via2l0LXByb2dyZXNzLWJhciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKfQoKLyogSW5kZXRlcm1pbmF0ZSAqLwoucHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhcjppbmRldGVybWluYXRlIHsKICAgIC13ZWJraXQtbWFzay1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRyYW5zcGFyZW50IDUwJSwgYmxhY2sgNTAlKSwgbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCB0cmFuc3BhcmVudCA1MCUsIGJsYWNrIDUwJSk7CiAgICBtYXNrLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodHJhbnNwYXJlbnQgNTAlLCBibGFjayA1MCUpLCBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHRyYW5zcGFyZW50IDUwJSwgYmxhY2sgNTAlKTsKICAgIGFuaW1hdGlvbjogcHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhciA2cyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoMC4zLCAwLjYsIDEsIDEpOwp9Cgo6LW1zLWxhbmcoeCksIC5wdXJlLW1hdGVyaWFsLXByb2dyZXNzLWNpcmN1bGFyOmluZGV0ZXJtaW5hdGUgewogICAgYW5pbWF0aW9uOiBub25lOwp9CgoucHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhcjppbmRldGVybWluYXRlOjpiZWZvcmUsCi5wdXJlLW1hdGVyaWFsLXByb2dyZXNzLWNpcmN1bGFyOmluZGV0ZXJtaW5hdGU6Oi13ZWJraXQtcHJvZ3Jlc3MtdmFsdWUgewogICAgY29udGVudDogIiI7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICBtYXJnaW4tYm90dG9tOiAwLjI1ZW07CiAgICBib3JkZXI6IHNvbGlkIDAuMjVlbSB0cmFuc3BhcmVudDsKICAgIGJvcmRlci10b3AtY29sb3I6IGN1cnJlbnRDb2xvcjsKICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIGFuaW1hdGlvbjogcHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhci1wc2V1ZG8gMC43NXMgaW5maW5pdGUgbGluZWFyIGFsdGVybmF0ZTsKfQoKLnB1cmUtbWF0ZXJpYWwtcHJvZ3Jlc3MtY2lyY3VsYXI6aW5kZXRlcm1pbmF0ZTo6LW1vei1wcm9ncmVzcy1iYXIgewogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIGJvcmRlcjogc29saWQgMC4yNWVtIHRyYW5zcGFyZW50OwogICAgYm9yZGVyLXRvcC1jb2xvcjogY3VycmVudENvbG9yOwogICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIGFuaW1hdGlvbjogcHVyZS1tYXRlcmlhbC1wcm9ncmVzcy1jaXJjdWxhci1wc2V1ZG8gMC43NXMgaW5maW5pdGUgbGluZWFyIGFsdGVybmF0ZTsKfQoKLnB1cmUtbWF0ZXJpYWwtcHJvZ3Jlc3MtY2lyY3VsYXI6aW5kZXRlcm1pbmF0ZTo6LW1zLWZpbGwgewogICAgYW5pbWF0aW9uLW5hbWU6IC1tcy1yaW5nOwp9CgpAa2V5ZnJhbWVzIHB1cmUtbWF0ZXJpYWwtcHJvZ3Jlc3MtY2lyY3VsYXIgewogICAgMCUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOwogICAgfQogICAgMTIuNSUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7CiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwogICAgfQogICAgMjUlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg2MzBkZWcpOwogICAgfQogICAgMzcuNSUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDgxMGRlZyk7CiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwogICAgfQogICAgNTAlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMjYwZGVnKTsKICAgIH0KICAgIDYyLjUlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxNDQwZGVnKTsKICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7CiAgICB9CiAgICA3NSUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4OTBkZWcpOwogICAgfQogICAgODcuNSUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDIwNzBkZWcpOwogICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjsKICAgIH0KICAgIDEwMCUgewogICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDI1MjBkZWcpOwogICAgfQp9CgpAa2V5ZnJhbWVzIHB1cmUtbWF0ZXJpYWwtcHJvZ3Jlc3MtY2lyY3VsYXItcHNldWRvIHsKICAgIDAlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMzBkZWcpOwogICAgfQogICAgMjkuNCUgewogICAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIH0KICAgIDI5LjQxJSB7CiAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IGN1cnJlbnRDb2xvcjsKICAgIH0KICAgIDY0LjclIHsKICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgIH0KICAgIDY0LjcxJSB7CiAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogY3VycmVudENvbG9yOwogICAgfQogICAgMTAwJSB7CiAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IGN1cnJlbnRDb2xvcjsKICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiBjdXJyZW50Q29sb3I7CiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMjI1ZGVnKTsKICAgIH0KfQpgOwpjb25zdCBJTkZPX0lDT04gPSBzdmdgPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGhlaWdodD0iMjRweCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjRweCIgZmlsbD0iI0ZGRkZGRiI+PHBhdGggZD0iTTAgMGgyNHYyNEgwVjB6IiBmaWxsPSJub25lIi8+PHBhdGggZD0iTTExIDdoMnYyaC0yem0wIDRoMnY2aC0yem0xLTlDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTAgMThjLTQuNDEgMC04LTMuNTktOC04czMuNTktOCA4LTggOCAzLjU5IDggOC0zLjU5IDgtOCA4eiIvPjwvc3ZnPmA7CmNvbnN0IFdBUk5JTkdfSUNPTiA9IHN2Z2A8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgaGVpZ2h0PSIyNHB4IiB2aWV3Qm94PSIwIDAgMjQgMjQiIHdpZHRoPSIyNHB4IiBmaWxsPSIjRkZGRkZGIj48cGF0aCBkPSJNMTIgNS45OUwxOS41MyAxOUg0LjQ3TDEyIDUuOTlNMi43NCAxOGMtLjc3IDEuMzMuMTkgMyAxLjczIDNoMTUuMDZjMS41NCAwIDIuNS0xLjY3IDEuNzMtM0wxMy43MyA0Ljk5Yy0uNzctMS4zMy0yLjY5LTEuMzMtMy40NiAwTDIuNzQgMTh6TTExIDExdjJjMCAuNTUuNDUgMSAxIDFzMS0uNDUgMS0xdi0yYzAtLjU1LS40NS0xLTEtMXMtMSAuNDUtMSAxem0wIDVoMnYyaC0yeiIvPjwvc3ZnPmA7CmNvbnN0IEVSUk9SX0lDT04gPSBzdmdgPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGhlaWdodD0iMjRweCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjRweCIgZmlsbD0iI0ZGRkZGRiI+PHBhdGggZD0iTTAgMGgyNHYyNEgwVjB6IiBmaWxsPSJub25lIi8+PHBhdGggZD0iTTIwLjcxIDcuOThMMTYuMDMgMy4zYy0uMTktLjE5LS40NS0uMy0uNzEtLjNIOC42OGMtLjI2IDAtLjUyLjExLS43LjI5TDMuMjkgNy45OGMtLjE4LjE4LS4yOS40NC0uMjkuN3Y2LjYzYzAgLjI3LjExLjUyLjI5LjcxbDQuNjggNC42OGMuMTkuMTkuNDUuMy43MS4zaDYuNjNjLjI3IDAgLjUyLS4xMS43MS0uMjlsNC42OC00LjY4Yy4xOS0uMTkuMjktLjQ0LjI5LS43MVY4LjY4Yy4wMS0uMjYtLjEtLjUyLS4yOC0uN3pNMTkgMTQuOUwxNC45IDE5SDkuMUw1IDE0LjlWOS4xTDkuMSA1aDUuOEwxOSA5LjF2NS44eiIvPjxjaXJjbGUgY3g9IjEyIiBjeT0iMTYiIHI9IjEiLz48cGF0aCBkPSJNMTIgN2MtLjU1IDAtMSAuNDUtMSAxdjVjMCAuNTUuNDUgMSAxIDFzMS0uNDUgMS0xVjhjMC0uNTUtLjQ1LTEtMS0xeiIvPjwvc3ZnPmA7CmNvbnN0IENIRUNLX0lDT04gPSBzdmdgPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGhlaWdodD0iMjRweCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjRweCIgZmlsbD0iI0ZGRkZGRiI+PHBhdGggZD0iTTAgMGgyNHYyNEgwVjB6IiBmaWxsPSJub25lIi8+PHBhdGggZD0iTTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTAgMThjLTQuNDEgMC04LTMuNTktOC04czMuNTktOCA4LTggOCAzLjU5IDggOC0zLjU5IDgtOCA4em0zLjg4LTExLjcxTDEwIDE0LjE3bC0xLjg4LTEuODhjLS4zOS0uMzktMS4wMi0uMzktMS40MSAwLS4zOS4zOS0uMzkgMS4wMiAwIDEuNDFsMi41OSAyLjU5Yy4zOS4zOSAxLjAyLjM5IDEuNDEgMEwxNy4zIDkuN2MuMzktLjM5LjM5LTEuMDIgMC0xLjQxLS4zOS0uMzktMS4wMy0uMzktMS40MiAweiIvPjwvc3ZnPmA7CmNvbnN0IENIRUNLTElTVF9JQ09OID0gc3ZnYDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBlbmFibGUtYmFja2dyb3VuZD0ibmV3IDAgMCAyNCAyNCIgaGVpZ2h0PSIyNHB4IiB2aWV3Qm94PSIwIDAgMjQgMjQiIHdpZHRoPSIyNHB4IiBmaWxsPSIjRkZGRkZGIj48Zz48cmVjdCBmaWxsPSJub25lIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiLz48L2c+PGc+PGc+PHBhdGggZD0iTTUsNWgydjFjMCwxLjEsMC45LDIsMiwyaDZjMS4xLDAsMi0wLjksMi0yVjVoMnY1aDJWNWMwLTEuMS0wLjktMi0yLTJoLTQuMThDMTQuNCwxLjg0LDEzLjMsMSwxMiwxUzkuNiwxLjg0LDkuMTgsM0g1IEMzLjksMywzLDMuOSwzLDV2MTRjMCwxLjEsMC45LDIsMiwyaDZ2LTJINVY1eiBNMTIsM2MwLjU1LDAsMSwwLjQ1LDEsMXMtMC40NSwxLTEsMXMtMS0wLjQ1LTEtMVMxMS40NSwzLDEyLDN6Ii8+PHBhdGggZD0iTTIxLjc1LDEyLjI1Yy0wLjQxLTAuNDEtMS4wOS0wLjQxLTEuNSwwTDE1LjUxLDE3bC0yLjI2LTIuMjVjLTAuNDEtMC40MS0xLjA4LTAuNDEtMS41LDBsMCwwYy0wLjQxLDAuNDEtMC40MSwxLjA5LDAsMS41IGwzLjA1LDMuMDRjMC4zOSwwLjM5LDEuMDIsMC4zOSwxLjQxLDBsNS41My01LjU0QzIyLjE2LDEzLjM0LDIyLjE2LDEyLjY2LDIxLjc1LDEyLjI1eiIvPjwvZz48L2c+PC9zdmc+YDsKY29uc3QgU1FVQVJFX0lDT04gPSBzdmdgPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGVuYWJsZS1iYWNrZ3JvdW5kPSJuZXcgMCAwIDI0IDI0IiBoZWlnaHQ9IjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjI0cHgiIGZpbGw9IiNGRkZGRkYiPjxnPjxyZWN0IGZpbGw9Im5vbmUiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIvPjwvZz48Zz48Zz48cGF0aCBkPSJNMywzdjE4aDE4VjNIM3ogTTE5LDE5SDVWNWgxNFYxOXoiLz48L2c+PC9nPjwvc3ZnPmA7CmNvbnN0IFBFUlNPTl9JQ09OID0gc3ZnYDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBoZWlnaHQ9IjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjI0cHgiIGZpbGw9IiNGRkZGRkYiPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMFYweiIgZmlsbD0ibm9uZSIvPjxwYXRoIGQ9Ik0xMiAxMmMyLjIxIDAgNC0xLjc5IDQtNHMtMS43OS00LTQtNC00IDEuNzktNCA0IDEuNzkgNCA0IDR6bTAgMmMtMi42NyAwLTggMS4zNC04IDR2MWMwIC41NS40NSAxIDEgMWgxNGMuNTUgMCAxLS40NSAxLTF2LTFjMC0yLjY2LTUuMzMtNC04LTR6Ii8+PC9zdmc+YDsKZnVuY3Rpb24gZXh0ZXJuYWxpemVBbmNob3IoYW5jaG9yKSB7CiAgICBhbmNob3IudGFyZ2V0ID0gJ19ibGFuayc7CiAgICBhbmNob3IucmVsID0gJ25vcmVmZXJyZXIgbm9vcGVuZXIgbm9mb2xsb3cnOwp9CmNvbnN0IENPTU1FTlRTX0hUTUwgPSBodG1sYAo8ZGV0YWlscyBpZD0iY29tbWVudHMtZGV0YWlscyIgb3Blbj4KICAgIDxzdW1tYXJ5PkNvbW1lbnRzIGZvciA8c3BhbiBpZD0iY29tbWVudHMtc3ViamVjdCI+c3ViamVjdDwvc3Bhbj48L3N1bW1hcnk+CiAgICA8b3V0cHV0IGlkPSJjb21tZW50cyI+PC9vdXRwdXQ+CjwvZGV0YWlscz4KYDsKY29uc3QgQ09NTUVOVFNfQ1NTID0gY3NzYAoKI2NvbW1lbnRzLWRldGFpbHMgewogICAgZGlzcGxheTogbm9uZTsKICAgIGZvbnQtc2l6ZTogMC43NXJlbTsKICAgIGNvbG9yOiAke3Vuc2FmZUNTUyhUaGVtZS50ZXh0Q29sb3JIZXgpfTsKICAgIG1hcmdpbi1ib3R0b206IDFyZW07CiAgICBtYXgtd2lkdGg6IDEwMCU7CiAgICBvdmVyZmxvdzogaGlkZGVuOwp9CgouY29tbWVudCB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgbWF4LXdpZHRoOiA4MGNoOwogICAgbGluZS1oZWlnaHQ6IDEuNTsKfQoKLmNvbW1lbnQgLmljb24gewogICAgd2lkdGg6IDNlbTsKICAgIGhlaWdodDogM2VtOwogICAgYm9yZGVyLXJhZGl1czogMC41ZW07CiAgICBtYXJnaW46IDAuNzVlbSAxZW0gMWVtIDA7Cn0KCi5jb21tZW50IGRpdi5pY29uIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7Cn0KCi5jb21tZW50IGRpdi5pY29uIHN2ZyB7CiAgICB3aWR0aDogMjRweDsKICAgIGhlaWdodDogMjRweDsKfQoKLmNvbW1lbnQgZGl2LmVycm9yLmljb24gc3ZnIHsKICAgIGZpbGw6ICR7dW5zYWZlQ1NTKFRoZW1lLnRleHRDb2xvckVycm9ySGV4KX07Cn0KCi5jb21tZW50IGRpdi5kZWZhdWx0Lmljb24gc3ZnIHsKICAgIGZpbGw6ICR7dW5zYWZlQ1NTKFRoZW1lLnRleHRDb2xvclNlY29uZGFyeUhleCl9Owp9CgouY29tbWVudCAucmhzIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgbWFyZ2luOiAwLjc1ZW0gMWVtIDAgMDsKICAgIGZsZXgtZ3JvdzogMTsKfQoKLmNvbW1lbnQgLmhlYWRlciB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZ2FwOiAwLjVlbTsKICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTsKICAgIGNvbG9yOiAke3Vuc2FmZUNTUyhUaGVtZS50ZXh0Q29sb3JTZWNvbmRhcnlIZXgpfTsKfQoKLmNvbW1lbnQgLmhlYWRlciAudXJsIHsKICAgIGNvbG9yOiAke3Vuc2FmZUNTUyhUaGVtZS50ZXh0Q29sb3JTZWNvbmRhcnlIZXgpfTsKfQoKLmNvbW1lbnQgLnJocyBwIHsKICAgIG1hcmdpbi1ibG9jay1zdGFydDogMGVtOwogICAgbWFyZ2luLWJsb2NrLWVuZDogMGVtOwp9CgouY29tbWVudCBpbWcgewogICAgbWF4LXdpZHRoOiA4MGNoOwogICAgd2lkdGg6IGF1dG87CiAgICBoZWlnaHQ6IGF1dG87Cn0KCmRldGFpbHMuZXJyb3IgewogICAgY29sb3I6ICR7dW5zYWZlQ1NTKFRoZW1lLnRleHRDb2xvckVycm9ySGV4KX07Cn0KCi5yZXBseSBmaWVsZHNldCB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgIGJvcmRlcjogc29saWQgMXB4ICR7dW5zYWZlQ1NTKFRoZW1lLnRleHRDb2xvclNlY29uZGFyeUhleCl9Owp9IAoKLnJlcGx5IHRleHRhcmVhIHsKICAgIHdpZHRoOiAxMDAlOwogICAgY29sb3I6ICR7dW5zYWZlQ1NTKFRoZW1lLnRleHRDb2xvckhleCl9OwogICAgYmFja2dyb3VuZC1jb2xvcjogJHt1bnNhZmVDU1MoVGhlbWUuYmFja2dyb3VuZENvbG9ySGV4KX07CiAgICBtYXJnaW4tdG9wOiAwLjVyZW07Cn0KCi5yZXBseSBidXR0b24gewogICAgcGFkZGluZzogMC4yNXJlbSAycmVtOwogICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7CiAgICBtYXJnaW46IDAuNXJlbSAwOwp9CgpgOwpmdW5jdGlvbiBpbml0Q29tbWVudHMoZG9jdW1lbnQsIHZtMSkgewogICAgY29uc3QgY29tbWVudHNEZXRhaWxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbW1lbnRzLWRldGFpbHMnKTsKICAgIGNvbnN0IGNvbW1lbnRzU3ViamVjdFNwYW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tbWVudHMtc3ViamVjdCcpOwogICAgY29uc3QgY29tbWVudHNPdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tbWVudHMnKTsKICAgIHJldHVybiAoKT0+ewogICAgICAgIGNvbnN0IHJlc3VsdCA9IHZtMS5jb21tZW50c1Jlc3VsdDsKICAgICAgICBjb21tZW50c0RldGFpbHMuc3R5bGUuZGlzcGxheSA9IHJlc3VsdCA/ICdibG9jaycgOiAnbm9uZSc7CiAgICAgICAgY29tbWVudHNTdWJqZWN0U3Bhbi50ZXh0Q29udGVudCA9IHJlc3VsdD8uc3ViamVjdCB8fCAnc3ViamVjdCc7CiAgICAgICAgaWYgKHJlc3VsdCAhPT0gX3JlbmRlcmVkUmVzdWx0KSB7CiAgICAgICAgICAgIHJlbmRlckNvbW1lbnRzKHJlc3VsdCwgY29tbWVudHNPdXRwdXQsIHZtMSk7CiAgICAgICAgICAgIF9yZW5kZXJlZFJlc3VsdCA9IHJlc3VsdDsKICAgICAgICB9CiAgICB9Owp9CmxldCBfcmVuZGVyZWRSZXN1bHQ7CmZ1bmN0aW9uIHJlbmRlckNvbW1lbnRzKHJlc3VsdCwgY29tbWVudHNPdXRwdXQsIHZtMikgewogICAgd2hpbGUoY29tbWVudHNPdXRwdXQuZmlyc3RDaGlsZCljb21tZW50c091dHB1dC5yZW1vdmVDaGlsZChjb21tZW50c091dHB1dC5maXJzdENoaWxkKTsKICAgIGlmIChyZXN1bHQpIHJlbmRlck5vZGUocmVzdWx0LnRocmVhZGNhcC5yb290LCByZXN1bHQudGhyZWFkY2FwLCBjb21tZW50c091dHB1dCwgMCwgdm0yKTsKfQpmdW5jdGlvbiByZW5kZXJOb2RlKG5vZGVJZCwgdGhyZWFkY2FwLCBjb250YWluZXJFbGVtZW50LCBsZXZlbCwgdm0zKSB7CiAgICBjb25zdCBub2RlID0gdGhyZWFkY2FwLm5vZGVzW25vZGVJZF07CiAgICBpZiAoIW5vZGUpIHJldHVybjsKICAgIGNvbnN0IHsgY29tbWVudCAsIGNvbW1lbnRFcnJvciAgfSA9IG5vZGU7CiAgICBjb25zdCBjb21tZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBjb21tZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2NvbW1lbnQnKTsKICAgIGlmIChsZXZlbCA+IDApIGNvbW1lbnREaXYuc3R5bGUubWFyZ2luTGVmdCA9IGAke2xldmVsICogNH1lbWA7CiAgICBjb25zdCBjb21tZW50ZXIgPSBjb21tZW50ID8gdGhyZWFkY2FwLmNvbW1lbnRlcnNbY29tbWVudC5hdHRyaWJ1dGVkVG9dIDogdW5kZWZpbmVkOwogICAgaWYgKGNvbW1lbnQgJiYgY29tbWVudGVyPy5pY29uPy51cmwpIHsKICAgICAgICBjb25zdCBpY29uSW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7CiAgICAgICAgaWNvbkltZy5jbGFzc0xpc3QuYWRkKCdpY29uJyk7CiAgICAgICAgaWNvbkltZy5zcmMgPSBjb21tZW50ZXIuaWNvbi51cmw7CiAgICAgICAgY29tbWVudERpdi5hcHBlbmRDaGlsZChpY29uSW1nKTsKICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgaWNvbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIGljb25EaXYuY2xhc3NMaXN0LmFkZCgnaWNvbicsIGNvbW1lbnRFcnJvciA/ICdlcnJvcicgOiAnZGVmYXVsdCcpOwogICAgICAgIGljb25EaXYuaW5uZXJIVE1MID0gKGNvbW1lbnRFcnJvciA/IEVSUk9SX0lDT04gOiBQRVJTT05fSUNPTikuZ2V0SFRNTCgpOwogICAgICAgIGNvbW1lbnREaXYuYXBwZW5kQ2hpbGQoaWNvbkRpdik7CiAgICB9CiAgICBjb25zdCByaHNEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIHJoc0Rpdi5jbGFzc0xpc3QuYWRkKCdyaHMnKTsKICAgIGNvbnN0IGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgaGVhZGVyRGl2LmNsYXNzTGlzdC5hZGQoJ2hlYWRlcicpOwogICAgaWYgKGNvbW1lbnQpIHsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVkVG9EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICBhdHRyaWJ1dGVkVG9EaXYuY2xhc3NMaXN0LmFkZCgnYXR0cmlidXRlZC10bycpOwogICAgICAgIGlmIChjb21tZW50ZXIpIHsKICAgICAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgYS5ocmVmID0gY29tbWVudGVyLnVybDsKICAgICAgICAgICAgYS50YXJnZXQgPSAnX2JsYW5rJzsKICAgICAgICAgICAgYS50ZXh0Q29udGVudCA9IGNvbW1lbnRlci5uYW1lICsgJyAnICsgY29tbWVudGVyLmZxVXNlcm5hbWU7CiAgICAgICAgICAgIGF0dHJpYnV0ZWRUb0Rpdi5hcHBlbmRDaGlsZChhKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhdHRyaWJ1dGVkVG9EaXYuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29tbWVudC5hdHRyaWJ1dGVkVG8gfHwgJzx1bmtub3duPicpKTsKICAgICAgICB9CiAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGF0dHJpYnV0ZWRUb0Rpdik7CiAgICAgICAgY29uc3QgYWdlVGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvbW1lbnQucHVibGlzaGVkID8gY29tcHV0ZUFnZShuZXcgRGF0ZShjb21tZW50LnB1Ymxpc2hlZCkpIDogJycpOwogICAgICAgIGlmIChjb21tZW50LnVybCkgewogICAgICAgICAgICBjb25zdCBhZ2VBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgICAgIGFnZUFuY2hvci5jbGFzc0xpc3QuYWRkKCd1cmwnKTsKICAgICAgICAgICAgYWdlQW5jaG9yLmhyZWYgPSBjb21tZW50LnVybDsKICAgICAgICAgICAgZXh0ZXJuYWxpemVBbmNob3IoYWdlQW5jaG9yKTsKICAgICAgICAgICAgYWdlQW5jaG9yLmFwcGVuZENoaWxkKGFnZVRleHQpOwogICAgICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQoYWdlQW5jaG9yKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQoYWdlVGV4dCk7CiAgICAgICAgfQogICAgfSBlbHNlIGlmIChjb21tZW50RXJyb3IpIHsKICAgICAgICBjb25zdCBub2RlQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgIG5vZGVBbmNob3IuaHJlZiA9IG5vZGVJZDsKICAgICAgICBub2RlQW5jaG9yLmlubmVyVGV4dCA9IG5vZGVJZDsKICAgICAgICBleHRlcm5hbGl6ZUFuY2hvcihub2RlQW5jaG9yKTsKICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQobm9kZUFuY2hvcik7CiAgICB9CiAgICByaHNEaXYuYXBwZW5kQ2hpbGQoaGVhZGVyRGl2KTsKICAgIGlmIChjb21tZW50KSB7CiAgICAgICAgY29uc3QgY29udGVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIGNvbnRlbnREaXYuaW5uZXJIVE1MID0gT2JqZWN0LnZhbHVlcyhjb21tZW50LmNvbnRlbnQpWzBdOwogICAgICAgIGNvbnRlbnREaXYucXVlcnlTZWxlY3RvckFsbCgnYScpLmZvckVhY2goZXh0ZXJuYWxpemVBbmNob3IpOwogICAgICAgIHJoc0Rpdi5hcHBlbmRDaGlsZChjb250ZW50RGl2KTsKICAgICAgICBmb3IgKGNvbnN0IGF0dGFjaG1lbnQgb2YgY29tbWVudC5hdHRhY2htZW50cyl7CiAgICAgICAgICAgIGNvbnN0IGF0dGFjaG1lbnREZXRhaWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGV0YWlscycpOwogICAgICAgICAgICBjb25zdCBzdW1tYXJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3VtbWFyeScpOwogICAgICAgICAgICBzdW1tYXJ5LnRleHRDb250ZW50ID0gYEF0dGFjaG1lbnQgKCR7YXR0YWNobWVudC5tZWRpYVR5cGV9KWA7CiAgICAgICAgICAgIGF0dGFjaG1lbnREZXRhaWxzLmFwcGVuZENoaWxkKHN1bW1hcnkpOwogICAgICAgICAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsKICAgICAgICAgICAgaW1nLnNyYyA9IGF0dGFjaG1lbnQudXJsOwogICAgICAgICAgICBpZiAoYXR0YWNobWVudC53aWR0aCAmJiBhdHRhY2htZW50LmhlaWdodCkgewogICAgICAgICAgICAgICAgaW1nLndpZHRoID0gYXR0YWNobWVudC53aWR0aDsKICAgICAgICAgICAgICAgIGltZy5oZWlnaHQgPSBhdHRhY2htZW50LmhlaWdodDsKICAgICAgICAgICAgfQogICAgICAgICAgICBhdHRhY2htZW50RGV0YWlscy5hcHBlbmRDaGlsZChpbWcpOwogICAgICAgICAgICByaHNEaXYuYXBwZW5kQ2hpbGQoYXR0YWNobWVudERldGFpbHMpOwogICAgICAgIH0KICAgICAgICBpZiAoY29tbWVudC51cmwpIHsKICAgICAgICAgICAgY29uc3QgcmVwbHlUb1VybCA9IGNvbW1lbnQudXJsOwogICAgICAgICAgICBjb25zdCByZXBseURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICByZXBseURpdi5jbGFzc05hbWUgPSAncmVwbHknOwogICAgICAgICAgICBjb25zdCByZXBseUFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgcmVwbHlBbmNob3IudGV4dENvbnRlbnQgPSAiUmVwbHkg4oaSIjsKICAgICAgICAgICAgcmVwbHlBbmNob3IuaHJlZiA9ICcjJzsKICAgICAgICAgICAgcmVwbHlEaXYuYXBwZW5kQ2hpbGQocmVwbHlBbmNob3IpOwogICAgICAgICAgICBjb25zdCByZXBseUZpZWxkc2V0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgIHJlcGx5RGl2LmFwcGVuZENoaWxkKHJlcGx5RmllbGRzZXRDb250YWluZXIpOwogICAgICAgICAgICByZXBseUFuY2hvci5vbmNsaWNrID0gKGUpPT57CiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB0b2dnbGVSZXBseUJveChyZXBseUFuY2hvciwgcmVwbHlGaWVsZHNldENvbnRhaW5lciwgcmVwbHlUb1VybCwgdm0zKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmhzRGl2LmFwcGVuZENoaWxkKHJlcGx5RGl2KTsKICAgICAgICB9CiAgICB9IGVsc2UgaWYgKGNvbW1lbnRFcnJvcikgewogICAgICAgIGNvbnN0IGxpbmVzID0gY29tbWVudEVycm9yLnNwbGl0KCdcbicpOwogICAgICAgIGNvbnN0IHN1bW1hcnkgPSBsaW5lc1swXTsKICAgICAgICBjb25zdCBlcnJvckRldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkZXRhaWxzJyk7CiAgICAgICAgZXJyb3JEZXRhaWxzLmNsYXNzTGlzdC5hZGQoJ2Vycm9yJyk7CiAgICAgICAgY29uc3QgZXJyb3JTdW1tYXJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3VtbWFyeScpOwogICAgICAgIGVycm9yU3VtbWFyeS50ZXh0Q29udGVudCA9IHN1bW1hcnk7CiAgICAgICAgZXJyb3JEZXRhaWxzLmFwcGVuZENoaWxkKGVycm9yU3VtbWFyeSk7CiAgICAgICAgZXJyb3JEZXRhaWxzLmFwcGVuZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsaW5lcy5zbGljZSgxKS5qb2luKCdcbicpKSk7CiAgICAgICAgcmhzRGl2LmFwcGVuZENoaWxkKGVycm9yRGV0YWlscyk7CiAgICB9CiAgICBjb21tZW50RGl2LmFwcGVuZENoaWxkKHJoc0Rpdik7CiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGNvbW1lbnREaXYpOwogICAgZm9yIChjb25zdCByZXBseSBvZiBub2RlLnJlcGxpZXMgfHwgW10pewogICAgICAgIHJlbmRlck5vZGUocmVwbHksIHRocmVhZGNhcCwgY29udGFpbmVyRWxlbWVudCwgbGV2ZWwgKyAxLCB2bTMpOwogICAgfQp9CmZ1bmN0aW9uIGNvbXB1dGVBZ2UoZGF0ZSkgewogICAgY29uc3QgbWlsbGlzID0gRGF0ZS5ub3coKSAtIGRhdGUuZ2V0VGltZSgpOwogICAgY29uc3Qgc2Vjb25kcyA9IG1pbGxpcyAvIDEwMDA7CiAgICBjb25zdCBtaW51dGVzID0gc2Vjb25kcyAvIDYwOwogICAgaWYgKG1pbnV0ZXMgPCA2MCkgcmV0dXJuIGAke01hdGgubWF4KE1hdGguZmxvb3IobWludXRlcyksIDEpfW1gOwogICAgY29uc3QgaG91cnMgPSBtaW51dGVzIC8gNjA7CiAgICBpZiAoaG91cnMgPCAyNCkgcmV0dXJuIGAke01hdGguZmxvb3IoaG91cnMpfWhgOwogICAgY29uc3QgZGF5cyA9IGhvdXJzIC8gMjQ7CiAgICByZXR1cm4gYCR7TWF0aC5mbG9vcihkYXlzKX1kYDsKfQpmdW5jdGlvbiB0b2dnbGVSZXBseUJveChhbmNob3IsIGZpZWxkc2V0Q29udGFpbmVyLCByZXBseVRvVXJsLCB2bTQpIHsKICAgIGlmIChhbmNob3IudGV4dENvbnRlbnQ/LnN0YXJ0c1dpdGgoJ1JlcGx5JykpIHsKICAgICAgICBhbmNob3IudGV4dENvbnRlbnQgPSAnQ2FuY2VsIOKFuSc7CiAgICAgICAgTGl0RWxlbWVudC5yZW5kZXIoUkVQTFlfQk9YLCBmaWVsZHNldENvbnRhaW5lcik7CiAgICAgICAgY29uc3QgbG9naW5BbmNob3IgPSBmaWVsZHNldENvbnRhaW5lci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpWzBdOwogICAgICAgIGNvbnN0IHRleHRhcmVhID0gZmllbGRzZXRDb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RleHRhcmVhJylbMF07CiAgICAgICAgY29uc3QgYnV0dG9uID0gZmllbGRzZXRDb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpWzBdOwogICAgICAgIGNvbnN0IG91dHB1dCA9IGZpZWxkc2V0Q29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvdXRwdXQnKVswXTsKICAgICAgICBjb25zdCBvdXRwdXRBbmNob3IgPSBvdXRwdXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXTsKICAgICAgICBjb25zdCBvcmlnaW4gPSBuZXcgVVJMKHJlcGx5VG9VcmwpLm9yaWdpbjsKICAgICAgICBvdXRwdXRBbmNob3IudGV4dENvbnRlbnQgPSBvcmlnaW47CiAgICAgICAgbGV0IHNlbnQgPSBmYWxzZTsKICAgICAgICBsZXQgbmV3UmVwbHlVcmw7CiAgICAgICAgY29uc3QgdXBkYXRlID0gKCk9PnsKICAgICAgICAgICAgY29uc3QgbG9nZ2VkSW4gPSB2bTQuaXNMb2dnZWRJbihvcmlnaW4pOwogICAgICAgICAgICBsb2dpbkFuY2hvci50ZXh0Q29udGVudCA9IGxvZ2dlZEluID8gYFNpZ24gb3V0IG9mICR7b3JpZ2lufWAgOiBgU2lnbiBpbiBhdCAke29yaWdpbn0uLi5gOwogICAgICAgICAgICBsb2dpbkFuY2hvci5zdHlsZS5kaXNwbGF5ID0gIXNlbnQgPyAnYmxvY2snIDogJ25vbmUnOwogICAgICAgICAgICB0ZXh0YXJlYS5zdHlsZS5kaXNwbGF5ID0gYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBsb2dnZWRJbiAmJiAhc2VudCA/ICdibG9jaycgOiAnbm9uZSc7CiAgICAgICAgICAgIG91dHB1dC5zdHlsZS5kaXNwbGF5ID0gc2VudCA/ICdibG9jaycgOiAnbm9uZSc7CiAgICAgICAgICAgIG91dHB1dEFuY2hvci5ocmVmID0gbmV3UmVwbHlVcmwgfHwgb3JpZ2luOwogICAgICAgIH07CiAgICAgICAgbG9naW5BbmNob3Iub25jbGljayA9IChlMSk9PnsKICAgICAgICAgICAgZTEucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgY29uc3QgbG9nZ2VkSW4gPSB2bTQuaXNMb2dnZWRJbihvcmlnaW4pOwogICAgICAgICAgICBpZiAobG9nZ2VkSW4pIHsKICAgICAgICAgICAgICAgIHZtNC5leHBpcmVMb2dpbihvcmlnaW4pOwogICAgICAgICAgICAgICAgdXBkYXRlKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb25zdCB3ID0gd2luZG93Lm9wZW4oYC9sb2dpbj9vcmlnaW49JHtlbmNvZGVVUklDb21wb25lbnQob3JpZ2luKX1gLCAnbG9naW4nKTsKICAgICAgICAgICAgICAgIGlmICh3KSB7CiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5vbm1lc3NhZ2UgPSAoZSk9PnsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhICB9ID0gZTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29ubWVzc2FnZScsIGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEub3JpZ2luID09PSAnc3RyaW5nJyAmJiBpc09hdXRoT2J0YWluVG9rZW5SZXNwb25zZShkYXRhLnRva2VuUmVzcG9uc2UpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bTQuYWNjZXB0TG9naW4oZGF0YS5vcmlnaW4sIGRhdGEudG9rZW5SZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcuY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKGUpPT57CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgbmV3UmVwbHlVcmwgPSBhd2FpdCB2bTQuc2VuZFJlcGx5KHRleHRhcmVhLnZhbHVlLnRyaW0oKSwgcmVwbHlUb1VybCk7CiAgICAgICAgICAgIHNlbnQgPSB0cnVlOwogICAgICAgICAgICBhbmNob3IudGV4dENvbnRlbnQgPSAnQ2xvc2Ug4oW5JzsKICAgICAgICAgICAgdXBkYXRlKCk7CiAgICAgICAgfTsKICAgICAgICB1cGRhdGUoKTsKICAgICAgICB0ZXh0YXJlYS5mb2N1cygpOwogICAgfSBlbHNlIHsKICAgICAgICBMaXRFbGVtZW50LnJlbmRlcih1bmRlZmluZWQsIGZpZWxkc2V0Q29udGFpbmVyKTsKICAgICAgICBhbmNob3IudGV4dENvbnRlbnQgPSAiUmVwbHkg4oaSIjsKICAgIH0KfQpjb25zdCBSRVBMWV9CT1ggPSBodG1sYAo8ZmllbGRzZXQ+CiAgICA8bGVnZW5kPlJlcGx5PC9sZWdlbmQ+CiAgICA8YSBocmVmPSIjIj5Mb2dpbiB0byAuLi48L2E+CiAgICA8dGV4dGFyZWEgdHlwZT0idGV4dCIgbmFtZT0iY29udGVudCIgcm93cz0iNCIgcGxhY2Vob2xkZXI9IllvdXIgcmVwbHkuLi4iPjwvdGV4dGFyZWE+CiAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCI+U2VuZDwvYnV0dG9uPgogICAgPG91dHB1dD5SZXBseSBzZW50ISBJdCBtYXkgdGFrZSBhIHdoaWxlIHRvIGFwcGVhciBoZXJlLCBidXQgeW91IGNhbiB2aWV3IGl0IG92ZXIgYXQgPGEgaHJlZj0iIyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9yZWZlcnJlciBub29wZW5lciBub2ZvbGxvdyI+KG9yaWdpbik8L2E+PC9vdXRwdXQ+CjwvZmllbGRzZXQ+CmA7CmNvbnN0IEZPUk1fSFRNTCA9IGh0bWxgCjxoZWFkZXI+JHtDSEVDS0xJU1RfSUNPTn08aDE+TGl2ZXdpcmUgUG9kY2FzdCBWYWxpZGF0b3IgPHNwYW4gaWQ9InZlcnNpb24iPnYwLjI8L3NwYW4+PC9oMT48L2hlYWRlcj4KPGZvcm0gaWQ9ImZvcm0iPgogICAgPGlucHV0IGlkPSJ0ZXh0LWlucHV0IiB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iUG9kY2FzdCBmZWVkIHVybCwgQWN0aXZpdHlQdWIgdXJsLCBBcHBsZSBQb2RjYXN0cyB1cmwsIG9yIHNlYXJjaCB0ZXh0IiBhdXRvY29tcGxldGU9InVybCIgcmVxdWlyZWQ+CiAgICA8YnV0dG9uIGlkPSJzdWJtaXQiIHR5cGU9InN1Ym1pdCI+VmFsaWRhdGU8L2J1dHRvbj4KPC9mb3JtPgpgOwpjb25zdCBGT1JNX0NTUyA9IGNzc2AKCmhlYWRlciB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIGdhcDogMXJlbTsKICAgIGNvbG9yOiAke3Vuc2FmZUNTUyhUaGVtZS50ZXh0Q29sb3JIZXgpfTsKICAgIG1hcmdpbi1ib3R0b206IDFyZW07CiAgICBvcGFjaXR5OiAwLjc1Owp9CgpoZWFkZXIgaDEgewogICAgbWFyZ2luOiAwOwp9CgpoZWFkZXIgc3ZnIHsKICAgIHRyYW5zZm9ybTogc2NhbGUoMS41KTsKICAgIGZpbGw6IGN1cnJlbnRDb2xvcjsKfQoKI3ZlcnNpb24gewogICAgb3BhY2l0eTogMC4yNTsKfQoKI2Zvcm0gewogICAgZGlzcGxheTogZmxleDsKICAgIGdhcDogMXJlbTsKICAgIG1hcmdpbi1ib3R0b206IDFyZW07Cn0KCi8qKiBpb3MgcmVzZXRzICovCkBzdXBwb3J0cyAoLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lKSB7CiAgICBpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiB7CiAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDA7CiAgICB9CgogICAgYnV0dG9uIHsKICAgICAgICBib3JkZXI6IHNvbGlkIDFweCB3aGl0ZTsKICAgIH0KCn0KCkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjUwcHgpIHsKCiAgICBoZWFkZXIgewogICAgICAgIGZvbnQtc2l6ZTogNjYlOwogICAgICAgIGdhcDogMC41cmVtOwogICAgfQoKICAgIGhlYWRlciBzdmcgewogICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wKTsKICAgIH0KCiAgICAjZm9ybSB7CiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgIH0KCn0KCkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTAwcHgpIHsKCiAgICAjdmVyc2lvbiB7CiAgICAgICAgZGlzcGxheTogbm9uZTsKICAgIH0KCn0KCiN0ZXh0LWlucHV0IHsKICAgIGZvbnQtc2l6ZTogMXJlbTsKICAgIGZsZXgtZ3JvdzogMTsKICAgIHBhZGRpbmc6IDAuNXJlbSAwLjVyZW07CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0OwogICAgYm9yZGVyOiBzb2xpZCAxcHggd2hpdGU7CiAgICBvdXRsaW5lOiBub25lOwogICAgY29sb3I6ICR7dW5zYWZlQ1NTKFRoZW1lLnRleHRDb2xvckhleCl9Owp9CgojdGV4dC1pbnB1dDpyZWFkLW9ubHkgewogICAgb3BhY2l0eTogMC41OyAKfQoKaW5wdXQ6LXdlYmtpdC1hdXRvZmlsbCwgaW5wdXQ6LXdlYmtpdC1hdXRvZmlsbDpmb2N1cyB7CiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDYwMDAwMHMgMHMsIGNvbG9yIDYwMDAwMHMgMHM7Cn0KCiNmb3JtIGJ1dHRvbiB7CiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTsKICAgIG1pbi13aWR0aDogOHJlbTsKfQoKYDsKZnVuY3Rpb24gaW5pdEZvcm0oZG9jdW1lbnQsIHZtNSwgc3RhdGljRGF0YTEpIHsKICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9ybScpOwogICAgY29uc3QgdGV4dElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RleHQtaW5wdXQnKTsKICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJtaXQnKTsKICAgIGNvbnN0IHZlcnNpb25TcGFuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZlcnNpb24nKTsKICAgIGNvbnN0IHZlcnNpb24gPSBbCiAgICAgICAgc3RhdGljRGF0YTEudmVyc2lvbiwKICAgICAgICBzdGF0aWNEYXRhMS5wdXNoSWQKICAgIF0ubWFwKCh2KT0+KHYgfHwgJycpLnRyaW0oKQogICAgKS5maWx0ZXIoKHYpPT52Lmxlbmd0aCA+IDAKICAgICkuam9pbignLicpOwogICAgdmVyc2lvblNwYW4udGV4dENvbnRlbnQgPSBzdGF0aWNEYXRhMS52ZXJzaW9uID8gYHYke3ZlcnNpb259YCA6ICcnOwogICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgIH0gPSBuZXcgVVJMKGRvY3VtZW50LlVSTCk7CiAgICBjb25zdCB2YWxpZGF0ZTEgPSBzZWFyY2hQYXJhbXMuZ2V0KCd2YWxpZGF0ZScpIHx8IHVuZGVmaW5lZDsKICAgIGNvbnN0IGlucHV0ID0gc2VhcmNoUGFyYW1zLmdldCgnaW5wdXQnKSB8fCB1bmRlZmluZWQ7CiAgICBjb25zdCBub2NvbW1lbnRzID0gc2VhcmNoUGFyYW1zLmhhcygnbm9jb21tZW50cycpOwogICAgY29uc3Qgc3RhcnRWYWxpZGF0aW9uID0gKCk9PnZtNS5zdGFydFZhbGlkYXRpb24odGV4dElucHV0LnZhbHVlLCB7CiAgICAgICAgICAgIHZhbGlkYXRlQ29tbWVudHM6ICFub2NvbW1lbnRzLAogICAgICAgICAgICB1c2VyQWdlbnQ6IG5hdmlnYXRvci51c2VyQWdlbnQKICAgICAgICB9KQogICAgOwogICAgZm9ybS5vbnN1Ym1pdCA9IChlKT0+ewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICBpZiAodm01LnZhbGlkYXRpbmcpIHsKICAgICAgICAgICAgdm01LmNhbmNlbFZhbGlkYXRpb24oKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdGFydFZhbGlkYXRpb24oKTsKICAgICAgICB9CiAgICB9OwogICAgaWYgKHZhbGlkYXRlMSkgewogICAgICAgIHRleHRJbnB1dC52YWx1ZSA9IHZhbGlkYXRlMTsKICAgICAgICBzZXRUaW1lb3V0KHN0YXJ0VmFsaWRhdGlvbiwgMCk7CiAgICB9IGVsc2UgaWYgKGlucHV0KSB7CiAgICAgICAgdGV4dElucHV0LnZhbHVlID0gaW5wdXQ7CiAgICB9CiAgICB0ZXh0SW5wdXQuZm9jdXMoKTsKICAgIHJldHVybiAoKT0+ewogICAgICAgIGNvbnN0IHdhc0Rpc2FibGVkID0gdGV4dElucHV0LmRpc2FibGVkOwogICAgICAgIHRleHRJbnB1dC5kaXNhYmxlZCA9IHZtNS52YWxpZGF0aW5nOwogICAgICAgIHRleHRJbnB1dC5yZWFkT25seSA9IHZtNS52YWxpZGF0aW5nOwogICAgICAgIHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IHZtNS52YWxpZGF0aW5nID8gJ0NhbmNlbCcgOiAnVmFsaWRhdGUnOwogICAgICAgIGlmICh3YXNEaXNhYmxlZCAmJiAhdGV4dElucHV0LmRpc2FibGVkKSB7CiAgICAgICAgICAgIHRleHRJbnB1dC5mb2N1cygpOwogICAgICAgIH0KICAgIH07Cn0KY29uc3QgTUVTU0FHRVNfSFRNTCA9IGh0bWxgCjxvdXRwdXQgaWQ9Im1lc3NhZ2VzIj48L291dHB1dD4KYDsKY29uc3QgTUVTU0FHRVNfQ1NTID0gY3NzYAoKI21lc3NhZ2VzIHsKICAgIG1hcmdpbi1ib3R0b206IDFyZW07CiAgICBkaXNwbGF5OiBncmlkOwogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAycmVtIGF1dG87CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgZm9udC1zaXplOiAwLjc1cmVtOwp9CgojbWVzc2FnZXMgPiBkaXYsICNtZXNzYWdlcyA+IGEgewogICAgYW5pbWF0aW9uOiBmYWRlSW5BbmltYXRpb24gMC40czsKfQoKI21lc3NhZ2VzIHN2ZyB7CiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuNzUpOwogICAgZmlsbDogY3VycmVudENvbG9yOwp9CgojbWVzc2FnZXMgPiBkaXYuaW5mbyB7CiAgICBjb2xvcjogJHt1bnNhZmVDU1MoVGhlbWUudGV4dENvbG9yU2Vjb25kYXJ5SGV4KX07Cn0KCiNtZXNzYWdlcyA+IGRpdi5nb29kIHsKICAgIGNvbG9yOiAjNDNhMDQ3Owp9CiNtZXNzYWdlcyA+IGRpdi53YXJuaW5nIHsKICAgIGNvbG9yOiAjZTY1MTAwOwp9CgojbWVzc2FnZXMgPiBkaXYuZXJyb3IgewogICAgY29sb3I6ICR7dW5zYWZlQ1NTKFRoZW1lLnRleHRDb2xvckVycm9ySGV4KX07Cn0KCiNtZXNzYWdlcyA+IGRpdi5ydW5uaW5nLCAjbWVzc2FnZXMgPiBkaXYuZG9uZSB7CiAgICBjb2xvcjogJHt1bnNhZmVDU1MoVGhlbWUudGV4dENvbG9ySGV4KX07Cn0KCiNtZXNzYWdlcyAuaWNvbiB7CiAgICBncmlkLWNvbHVtbjogMTsKICAgIHdpZHRoOiAyNHB4OwogICAgaGVpZ2h0OiAyNHB4OwogICAgZGlzcGxheTogZmxleDsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKfQoKI21lc3NhZ2VzIC5tZXNzYWdlIHsKICAgIGdyaWQtY29sdW1uOiAyOwp9CgojbWVzc2FnZXMgLnVybCB7CiAgICBncmlkLWNvbHVtbjogMjsKICAgIG1hcmdpbi1ib3R0b206IDAuMjVyZW07CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7Cn0KCiNtZXNzYWdlcyBwcm9ncmVzcyB7CiAgICBmb250LXNpemU6IDAuMzVyZW07Cn0KCiNtZXNzYWdlcyAucmVmZXJlbmNlIHsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtOwp9CgpgOwpmdW5jdGlvbiBpbml0TWVzc2FnZXMoZG9jdW1lbnQsIHZtNikgewogICAgY29uc3QgbWVzc2FnZXNPdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZXMnKTsKICAgIHJldHVybiAoKT0+ewogICAgICAgIExpdEVsZW1lbnQucmVuZGVyKE1FU1NBR0VfSFRNTCh2bTYpLCBtZXNzYWdlc091dHB1dCk7CiAgICB9Owp9CmNvbnN0IE1FU1NBR0VfSFRNTCA9ICh2bTcpPT5odG1sYAogICAgJHt2bTcubWVzc2FnZXMuZmlsdGVyKGZpbHRlckR1cGxpY2F0ZXMoKSkubWFwKChtZXNzYWdlKT0+aHRtbGAKICAgICAgICA8ZGl2IGNsYXNzPSIke21lc3NhZ2UudHlwZX0gaWNvbiI+JHtpY29uKG1lc3NhZ2UudHlwZSl9PC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iJHttZXNzYWdlLnR5cGV9IG1lc3NhZ2UiPiR7bWVzc2FnZS50ZXh0fSR7UkVGRVJFTkNFX0hUTUwobWVzc2FnZS5yZWZlcmVuY2UpfTwvZGl2PgogICAgICAgICR7QU5DSE9SX0hUTUwobWVzc2FnZS51cmwpfWAKICAgICl9YAo7CmNvbnN0IFJFRkVSRU5DRV9IVE1MID0gKHJlZmVyZW5jZSk9PnJlZmVyZW5jZSA/IGh0bWxgPGEgY2xhc3M9InJlZmVyZW5jZSIgaHJlZj0ke3JlZmVyZW5jZS5ocmVmfSB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub3JlZmVycmVyIG5vb3BlbmVyIG5vZm9sbG93Ij5bJHtyZWZlcmVuY2UucnVsZXNldH1dPC9hPmAgOiB1bmRlZmluZWQKOwpjb25zdCBBTkNIT1JfSFRNTCA9ICh1cmwpPT51cmwgPyBodG1sYDxhIGhyZWY9JHt1cmx9IHRhcmdldD0iX2JsYW5rIiByZWw9Im5vcmVmZXJyZXIgbm9vcGVuZXIgbm9mb2xsb3ciIGNsYXNzPSJ1cmwiPiR7dXJsfTwvYT5gIDogdW5kZWZpbmVkCjsKZnVuY3Rpb24gaWNvbih0eXBlKSB7CiAgICByZXR1cm4gdHlwZSA9PT0gJ3J1bm5pbmcnID8gaHRtbGA8cHJvZ3Jlc3MgY2xhc3M9InB1cmUtbWF0ZXJpYWwtcHJvZ3Jlc3MtY2lyY3VsYXIiPjwvcHJvZ3Jlc3M+YCA6IHR5cGUgPT09ICdkb25lJyA/IENIRUNLX0lDT04gOiB0eXBlID09PSAnZXJyb3InID8gRVJST1JfSUNPTiA6IHR5cGUgPT09ICd3YXJuaW5nJyA/IFdBUk5JTkdfSUNPTiA6IHR5cGUgPT09ICdnb29kJyA/IENIRUNLX0lDT04gOiBJTkZPX0lDT047Cn0KZnVuY3Rpb24gZmlsdGVyRHVwbGljYXRlcygpIHsKICAgIGNvbnN0IHRhZ1VybHMgPSBuZXcgU2V0KCk7CiAgICByZXR1cm4gKG1lc3NhZ2UpPT57CiAgICAgICAgY29uc3QgeyB0YWcgLCB1cmwgIH0gPSBtZXNzYWdlOwogICAgICAgIGlmICh0YWcgJiYgdXJsKSB7CiAgICAgICAgICAgIGNvbnN0IHRhZ1VybCA9IGAke3RhZ318JHt1cmx9YDsKICAgICAgICAgICAgaWYgKHRhZ1VybHMuaGFzKHRhZ1VybCkpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgdGFnVXJscy5hZGQodGFnVXJsKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfTsKfQpjb25zdCBTRUFSQ0hfUkVTVUxUU19IVE1MID0gaHRtbGAKPG91dHB1dCBpZD0ic2VhcmNoLXJlc3VsdHMiPjwvb3V0cHV0PgpgOwpjb25zdCBTRUFSQ0hfUkVTVUxUU19DU1MgPSBjc3NgCgojc2VhcmNoLXJlc3VsdHMgewogICAgbWFyZ2luLWJvdHRvbTogMXJlbTsKICAgIGRpc3BsYXk6IG5vbmU7Cn0KCiNzZWFyY2gtcmVzdWx0cyA+IGRpdiB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZ2FwOiAwLjVyZW07CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgZm9udC1zaXplOiAwLjc1cmVtOwogICAgYW5pbWF0aW9uOiBmYWRlSW5BbmltYXRpb24gMC40czsKICAgIG1hcmdpbi1ib3R0b206IDAuNzVyZW07CiAgICBjdXJzb3I6IHBvaW50ZXI7Cn0KCiNzZWFyY2gtcmVzdWx0cyAuaWNvbiwgI3NlYXJjaC1yZXN1bHRzIGltZyB7CiAgICB3aWR0aDogMS41cmVtOwogICAgaGVpZ2h0OiAxLjVyZW07Cn0KCiNzZWFyY2gtcmVzdWx0cyAudGl0bGUgewogICAgY29sb3I6ICR7dW5zYWZlQ1NTKFRoZW1lLnRleHRDb2xvckhleCl9Owp9Cgojc2VhcmNoLXJlc3VsdHMgLmF1dGhvciB7CiAgICBjb2xvcjogJHt1bnNhZmVDU1MoVGhlbWUudGV4dENvbG9yU2Vjb25kYXJ5SGV4KX07Cn0KCmA7CmZ1bmN0aW9uIGluaXRTZWFyY2hSZXN1bHRzKGRvY3VtZW50LCB2bTgpIHsKICAgIGNvbnN0IHNlYXJjaFJlc3VsdHNPdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoLXJlc3VsdHMnKTsKICAgIHJldHVybiAoKT0+ewogICAgICAgIExpdEVsZW1lbnQucmVuZGVyKFJFU1VMVFNfSFRNTCh2bTgpLCBzZWFyY2hSZXN1bHRzT3V0cHV0KTsKICAgICAgICBzZWFyY2hSZXN1bHRzT3V0cHV0LnN0eWxlLmRpc3BsYXkgPSB2bTguaXNTZWFyY2ggPyAnYmxvY2snIDogJ25vbmUnOwogICAgfTsKfQpjb25zdCBSRVNVTFRTX0hUTUwgPSAodm05KT0+aHRtbGAKICAgICR7dm05LnNlYXJjaFJlc3VsdHMubWFwKChyZXN1bHQpPT5odG1sYDxkaXYgY2xhc3M9InNlYXJjaC1yZXN1bHQiIEBjbGljaz0iJHtzZWxlY3RSZXN1bHQodm05LCByZXN1bHQudXJsKX0iPjxkaXYgY2xhc3M9Imljb24iPiR7SU1BR0VfSFRNTChyZXN1bHQuYXJ0d29yayl9PC9kaXY+PGRpdiBjbGFzcz0idGl0bGUiPiR7cmVzdWx0LnRpdGxlfTwvZGl2PjxkaXYgY2xhc3M9ImF1dGhvciI+JHtyZXN1bHQuYXV0aG9yfTwvZGl2PjwvZGl2PmAKICAgICl9YAo7CmNvbnN0IElNQUdFX0hUTUwgPSAoYXJ0d29yayk9PmFydHdvcmsgPyBodG1sYDxpbWcgc3JjPSR7YXJ0d29ya30+YCA6IFNRVUFSRV9JQ09OCjsKZnVuY3Rpb24gc2VsZWN0UmVzdWx0KHZtMTAsIHVybCkgewogICAgcmV0dXJuICgpPT52bTEwLmNvbnRpbnVlV2l0aCh1cmwpCiAgICA7Cn0KY29uc3QgWE1MX0hUTUwgPSBodG1sYAo8b3V0cHV0IGlkPSJ4bWwiPjwvb3V0cHV0PgpgOwpjb25zdCBYTUxfQ1NTID0gY3NzYAojeG1sIHsKICAgIGZvbnQtZmFtaWx5OiAke3Vuc2FmZUNTUyhUaGVtZS5tb25vc3BhY2VGb250RmFtaWx5KX07CiAgICBmb250LXNpemU6IDAuNzVyZW07CiAgICBsaW5lLWhlaWdodDogMXJlbTsKICAgIGNvbG9yOiAke3Vuc2FmZUNTUyhUaGVtZS50ZXh0Q29sb3JTZWNvbmRhcnlIZXgpfTsKICAgIG92ZXJmbG93LXdyYXA6IGJyZWFrLXdvcmQ7CiAgICBsaW5lLWhlaWdodDogMS40Owp9CgojeG1sIC5yb290IHsKICAgIGZvbnQtZmFtaWx5OiAke3Vuc2FmZUNTUyhUaGVtZS5zYW5zU2VyaWZGb250RmFtaWx5KX07CiAgICBjb2xvcjogJHt1bnNhZmVDU1MoVGhlbWUudGV4dENvbG9ySGV4KX07CiAgICBsaW5lLWhlaWdodDogMjsKfQoKI3htbCAuY29udGVudCB7CiAgICBjb2xvcjogJHt1bnNhZmVDU1MoVGhlbWUudGV4dENvbG9ySGV4KX07Cn0KCiN4bWwgLnBvZGNhc3QgewogICAgY29sb3I6ICNhYjQ3YmM7Cn0KCiN4bWwgLmluZGVudCB7CiAgICBtYXJnaW4tbGVmdDogMC43NXJlbTsKfQoKI3htbCAuaW5kZW50MiB7CiAgICBtYXJnaW4tbGVmdDogMS41cmVtOwp9CgpzdW1tYXJ5LmVtcHR5IHsgbGlzdC1zdHlsZTogbm9uZTsgY3Vyc29yOiB0ZXh0OyB9CnN1bW1hcnkuZW1wdHk6Oi13ZWJraXQtZGV0YWlscy1tYXJrZXIgeyBkaXNwbGF5OiBub25lOyB9CgojeG1sIGF1ZGlvIHsKICAgIG1hcmdpbjogMC41cmVtIDFyZW07Cn0KYDsKZnVuY3Rpb24gaW5pdFhtbChkb2N1bWVudCwgdm0xMSkgewogICAgY29uc3QgeG1sT3V0cHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3htbCcpOwogICAgcmV0dXJuICgpPT57CiAgICAgICAgY29uc3QgeG1sID0gdm0xMS54bWw7CiAgICAgICAgaWYgKHhtbCAhPT0gX3JlbmRlcmVkWG1sKSB7CiAgICAgICAgICAgIHJlbmRlclhtbCh4bWwsIHhtbE91dHB1dCwgdm0xMS54bWxTdW1tYXJ5VGV4dCk7CiAgICAgICAgICAgIF9yZW5kZXJlZFhtbCA9IHhtbDsKICAgICAgICB9CiAgICB9Owp9CmxldCBfcmVuZGVyZWRYbWw7CmZ1bmN0aW9uIHJlbmRlclhtbCh4bWwsIHhtbE91dHB1dCwgeG1sU3VtbWFyeVRleHQpIHsKICAgIHdoaWxlKHhtbE91dHB1dC5maXJzdENoaWxkKXhtbE91dHB1dC5yZW1vdmVDaGlsZCh4bWxPdXRwdXQuZmlyc3RDaGlsZCk7CiAgICBpZiAoeG1sKSByZW5kZXJOb2RlMSh4bWwsIHhtbE91dHB1dCwgMCwgbmV3IFNldCgpLCB1bmRlZmluZWQsIHhtbFN1bW1hcnlUZXh0KTsKfQpmdW5jdGlvbiByZW5kZXJOb2RlMShub2RlLCBjb250YWluZXJFbGVtZW50LCBsZXZlbCwgY29udGV4dCwgaXRlbU51bWJlciwgeG1sU3VtbWFyeVRleHQpIHsKICAgIGNvbnN0IHsgYXR0cyAgfSA9IG5vZGU7CiAgICBjb25zdCBkZXRhaWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGV0YWlscycpOwogICAgY29uc3QgdGV4dCA9IG5vZGUudmFsIHx8ICcnOwogICAgZGV0YWlscy5vcGVuID0gIWNvbnRleHQuaGFzKCdmb3VuZC1pdGVtJykgfHwgdGV4dC5sZW5ndGggPiAwOwogICAgaWYgKGxldmVsID4gMCkgZGV0YWlscy5jbGFzc0xpc3QuYWRkKCdpbmRlbnQnKTsKICAgIGNvbnN0IHN1bW1hcnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdW1tYXJ5Jyk7CiAgICBpZiAobGV2ZWwgPT09IDApIHsKICAgICAgICByZW5kZXJUZXh0UGllY2VzKHN1bW1hcnksIHhtbFN1bW1hcnlUZXh0IHx8ICdYbWwnKTsKICAgICAgICBzdW1tYXJ5LmNsYXNzTGlzdC5hZGQoJ3Jvb3QnKTsKICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3Qgc3BhbkNsYXNzID0gUW5hbWVzLlBvZGNhc3RJbmRleC5OQU1FU1BBQ0VTLmluY2x1ZGVzKG5vZGUucW5hbWUubmFtZXNwYWNlVXJpIHx8ICcnKSA/ICdwb2RjYXN0JyA6IHVuZGVmaW5lZDsKICAgICAgICByZW5kZXJUZXh0UGllY2VzKHN1bW1hcnksICc8JywgewogICAgICAgICAgICB0ZXh0OiBub2RlLnRhZ25hbWUsCiAgICAgICAgICAgIHNwYW5DbGFzcwogICAgICAgIH0sIC4uLlsKICAgICAgICAgICAgLi4uYXR0cy5lbnRyaWVzKCkKICAgICAgICBdLmZsYXRNYXAoKHYpPT5bCiAgICAgICAgICAgICAgICBgICR7dlswXX09ImAsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdGV4dDogdlsxXSwKICAgICAgICAgICAgICAgICAgICBzcGFuQ2xhc3M6ICdjb250ZW50JwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICciJwogICAgICAgICAgICBdCiAgICAgICAgKSwgJz4nLCBpdGVtTnVtYmVyID8gYCAjJHtpdGVtTnVtYmVyfWAgOiAnJyk7CiAgICB9CiAgICBkZXRhaWxzLmFwcGVuZENoaWxkKHN1bW1hcnkpOwogICAgbGV0IGNoaWxkQ291bnQgPSAwOwogICAgaWYgKHRleHQubGVuZ3RoID4gMCkgewogICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdjb250ZW50Jyk7CiAgICAgICAgcmVuZGVyVGV4dFBpZWNlcyhkaXYsIHRleHQpOwogICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdpbmRlbnQyJyk7CiAgICAgICAgZGV0YWlscy5hcHBlbmRDaGlsZChkaXYpOwogICAgICAgIGNoaWxkQ291bnQrKzsKICAgIH0KICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhub2RlLmNoaWxkKSl7CiAgICAgICAgbGV0IGl0ZW1OdW1iZXIgPSAxOwogICAgICAgIGxldCBpdGVtc05vdFNob3duID0gMDsKICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHZhbHVlKXsKICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdpdGVtJyAmJiBpdGVtTnVtYmVyID4gMjApIHsKICAgICAgICAgICAgICAgIGl0ZW1zTm90U2hvd24rKzsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlbmRlck5vZGUxKGNoaWxkLCBkZXRhaWxzLCBsZXZlbCArIDEsIGNvbnRleHQsIHZhbHVlLmxlbmd0aCA+IDEgPyBpdGVtTnVtYmVyIDogdW5kZWZpbmVkKTsKICAgICAgICAgICAgY2hpbGRDb3VudCsrOwogICAgICAgICAgICBpdGVtTnVtYmVyKys7CiAgICAgICAgfQogICAgICAgIGlmIChpdGVtc05vdFNob3duID4gMCkgewogICAgICAgICAgICBjb25zdCBmYWtlTm9kZSA9IHsKICAgICAgICAgICAgICAgIHRhZ25hbWU6IGAuLi5hbmQgJHtuZXcgSW50bC5OdW1iZXJGb3JtYXQoKS5mb3JtYXQoaXRlbXNOb3RTaG93bil9IG1vcmUgaXRlbXNgLAogICAgICAgICAgICAgICAgYXR0czogbmV3IE1hcCgpLAogICAgICAgICAgICAgICAgcW5hbWU6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAnJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzTWFwOiB7fSwKICAgICAgICAgICAgICAgIGNoaWxkOiB7fQogICAgICAgICAgICB9OwogICAgICAgICAgICByZW5kZXJOb2RlMShmYWtlTm9kZSwgZGV0YWlscywgbGV2ZWwgLSAxLCBjb250ZXh0LCB1bmRlZmluZWQpOwogICAgICAgIH0KICAgIH0KICAgIGNvbnN0IGF1ZGlvVXJsID0gbm9kZS50YWduYW1lID09PSAnZW5jbG9zdXJlJyAmJiBhdHRzLmdldCgndXJsJykgfHwgbm9kZS5xbmFtZS5uYW1lc3BhY2VVcmkgJiYgcW5hbWVzSW5jbHVkZShRbmFtZXMuUG9kY2FzdEluZGV4LnNvdXJjZSwgbm9kZS5xbmFtZSkgJiYgYXR0cy5nZXQoJ3VyaScpIHx8IHFuYW1lRXEobm9kZS5xbmFtZSwgUW5hbWVzLk1lZGlhUnNzLmNvbnRlbnQpICYmIChhdHRzLmdldCgndHlwZScpIHx8ICcnKS5zdGFydHNXaXRoKCdhdWRpbycpICYmIGF0dHMuZ2V0KCd1cmwnKTsKICAgIGlmIChhdWRpb1VybCkgewogICAgICAgIGNvbnN0IGF1ZGlvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTsKICAgICAgICBhdWRpby5jb250cm9scyA9IHRydWU7CiAgICAgICAgYXVkaW8ucHJlbG9hZCA9ICdub25lJzsKICAgICAgICBhdWRpby5zcmMgPSBhdWRpb1VybDsKICAgICAgICBkZXRhaWxzLmFwcGVuZENoaWxkKGF1ZGlvKTsKICAgICAgICBjaGlsZENvdW50Kys7CiAgICB9CiAgICBpZiAoY2hpbGRDb3VudCA9PT0gMCkgc3VtbWFyeS5jbGFzc0xpc3QuYWRkKCdlbXB0eScsICdpbmRlbnQnKTsKICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZGV0YWlscyk7CiAgICBpZiAobm9kZS50YWduYW1lID09PSAnaXRlbScpIGNvbnRleHQuYWRkKCdmb3VuZC1pdGVtJyk7Cn0KZnVuY3Rpb24gcmVuZGVyVGV4dFBpZWNlcyhlbGVtZW50LCAuLi5waWVjZXMpIHsKICAgIGZvciAoY29uc3QgcGllY2Ugb2YgcGllY2VzKXsKICAgICAgICBjb25zdCB0ZXh0ID0gdHlwZW9mIHBpZWNlID09PSAnc3RyaW5nJyA/IHBpZWNlIDogcGllY2UudGV4dDsKICAgICAgICBjb25zdCBzcGFuQ2xhc3MgPSB0eXBlb2YgcGllY2UgPT09ICdvYmplY3QnID8gcGllY2Uuc3BhbkNsYXNzIDogdW5kZWZpbmVkOwogICAgICAgIGlmICgvXmh0dHBzPzpcL1wvW15ccyldKyQvLnRlc3QodGV4dCkpIHsKICAgICAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgYS5ocmVmID0gdGV4dDsKICAgICAgICAgICAgZXh0ZXJuYWxpemVBbmNob3IoYSk7CiAgICAgICAgICAgIGEuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCkpOwogICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnN0IHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCk7CiAgICAgICAgICAgIGlmIChzcGFuQ2xhc3MpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgICAgICAgICBzcGFuLmNsYXNzTGlzdC5hZGQoc3BhbkNsYXNzKTsKICAgICAgICAgICAgICAgIHNwYW4uYXBwZW5kQ2hpbGQodGV4dE5vZGUpOwogICAgICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChzcGFuKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGV4dE5vZGUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CmNvbnN0IGFwcE1vZHVsZVNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAtbW9kdWxlLXNjcmlwdCcpOwpmdW5jdGlvbiBzZXRBcHBTdGF0ZShhcHBTdGF0ZSkgewogICAgYXBwTW9kdWxlU2NyaXB0LmRhdGFzZXQuc3RhdGUgPSBhcHBTdGF0ZTsKfQpzZXRBcHBTdGF0ZSgnc3RhcnRpbmcnKTsKY29uc3QgYXBwQ3NzID0gY3NzYAoKYSB7CiAgICBjb2xvcjogJHt1bnNhZmVDU1MoVGhlbWUucHJpbWFyeUNvbG9yMzAwSGV4KX07CiAgICB0ZXh0LXVuZGVybGluZS1vZmZzZXQ6IDAuMnJlbTsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQoKQG1lZGlhIChob3ZlcjogaG92ZXIpIHsKICAgIGE6aG92ZXIgewogICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOwogICAgfQp9CgptYWluIHsKICAgIG1hcmdpbjogMnJlbTsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwp9CgpAa2V5ZnJhbWVzIGZhZGVJbkFuaW1hdGlvbiB7CiAgICAwJSB7CiAgICAgICAgb3BhY2l0eTogMDsKICAgIH0KICAgIDEwMCUgewogICAgICAgIG9wYWNpdHk6IDE7CiAgICB9Cn0KCnN1bW1hcnkgewogICAgY3Vyc29yOiBwb2ludGVyOwp9CgpgOwpjb25zdCBhcHBIdG1sID0gaHRtbGAKPG1haW4+CiR7Rk9STV9IVE1MfQoke01FU1NBR0VTX0hUTUx9CiR7U0VBUkNIX1JFU1VMVFNfSFRNTH0KJHtDT01NRU5UU19IVE1MfQoke1hNTF9IVE1MfQo8L21haW4+CmA7CmZ1bmN0aW9uIGFwcGVuZFN0eWxlc2hlZXRzKGNzc1RleHRzKSB7CiAgICBjb25zdCBzdHlsZVNoZWV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICAgIHN0eWxlU2hlZXQudHlwZSA9ICd0ZXh0L2Nzcyc7CiAgICBzdHlsZVNoZWV0LnRleHRDb250ZW50ID0gY3NzVGV4dHMuam9pbignXG5cbicpOwogICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZVNoZWV0KTsKfQphcHBlbmRTdHlsZXNoZWV0cyhbCiAgICBhcHBDc3MuY3NzVGV4dCwKICAgIEZPUk1fQ1NTLmNzc1RleHQsCiAgICBNRVNTQUdFU19DU1MuY3NzVGV4dCwKICAgIFNFQVJDSF9SRVNVTFRTX0NTUy5jc3NUZXh0LAogICAgQ09NTUVOVFNfQ1NTLmNzc1RleHQsCiAgICBYTUxfQ1NTLmNzc1RleHQsCiAgICBDSVJDVUxBUl9QUk9HUkVTU19DU1MuY3NzVGV4dCwgCl0pOwpMaXRFbGVtZW50LnJlbmRlcihhcHBIdG1sLCBkb2N1bWVudC5ib2R5KTsKZnVuY3Rpb24gcGFyc2VTdGF0aWNEYXRhKCkgewogICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRpYy1kYXRhLXNjcmlwdCcpOwogICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2Uoc2NyaXB0LnRleHQpOwogICAgY29uc3QgdmVyc2lvbiA9IHR5cGVvZiBkYXRhLnZlcnNpb24gPT09ICdzdHJpbmcnID8gZGF0YS52ZXJzaW9uIDogdW5kZWZpbmVkOwogICAgY29uc3QgZmxhZ3MgPSB0eXBlb2YgZGF0YS5mbGFncyA9PT0gJ3N0cmluZycgPyBkYXRhLmZsYWdzIDogdW5kZWZpbmVkOwogICAgY29uc3QgZGVidWcgPSB0eXBlb2YgZGF0YS5kZWJ1ZyA9PT0gJ29iamVjdCcgPyBkYXRhLmRlYnVnIDogdW5kZWZpbmVkOwogICAgY29uc3QgcHVzaElkID0gdHlwZW9mIGRhdGEucHVzaElkID09PSAnc3RyaW5nJyA/IGRhdGEucHVzaElkIDogdW5kZWZpbmVkOwogICAgcmV0dXJuIHsKICAgICAgICB2ZXJzaW9uLAogICAgICAgIGZsYWdzLAogICAgICAgIGRlYnVnLAogICAgICAgIHB1c2hJZAogICAgfTsKfQpjb25zdCBzdGF0aWNEYXRhID0gcGFyc2VTdGF0aWNEYXRhKCk7CmNvbnN0IGxvY2FsRmV0Y2hlciA9ICh1cmwsIGhlYWRlcnMpPT5mZXRjaCh1cmwsIHsKICAgICAgICBoZWFkZXJzCiAgICB9KQo7CmNvbnN0IHJlbW90ZUZldGNoZXIgPSAodXJsLCBoZWFkZXJzKT0+ZmV0Y2goYC9mLyR7dXJsLnJlcGxhY2VBbGwoL1teYS16QS1aMC05Ll0rL2csICdfJyl9YCwgewogICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgdXJsLAogICAgICAgICAgICBoZWFkZXJzCiAgICAgICAgfSkKICAgIH0pCjsKY29uc3QgcGlTZWFyY2hGZXRjaGVyID0gKGlucHV0LCBoZWFkZXJzKT0+ZmV0Y2goYC9zYCwgewogICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgaW5wdXQsCiAgICAgICAgICAgIGhlYWRlcnMKICAgICAgICB9KQogICAgfSkKOwpjb25zdCB0aHJlYWRjYXBVc2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50Owpjb25zdCB2bSA9IG5ldyBWYWxpZGF0b3JBcHBWTSh7CiAgICB0aHJlYWRjYXBVc2VyQWdlbnQsCiAgICBsb2NhbEZldGNoZXIsCiAgICByZW1vdGVGZXRjaGVyLAogICAgcGlTZWFyY2hGZXRjaGVyCn0pOwpjb25zdCB1cGRhdGVGb3JtID0gaW5pdEZvcm0oZG9jdW1lbnQsIHZtLCBzdGF0aWNEYXRhKTsKY29uc3QgdXBkYXRlTWVzc2FnZXMgPSBpbml0TWVzc2FnZXMoZG9jdW1lbnQsIHZtKTsKY29uc3QgdXBkYXRlU2VhcmNoUmVzdWx0cyA9IGluaXRTZWFyY2hSZXN1bHRzKGRvY3VtZW50LCB2bSk7CmNvbnN0IHVwZGF0ZUNvbW1lbnRzID0gaW5pdENvbW1lbnRzKGRvY3VtZW50LCB2bSk7CmNvbnN0IHVwZGF0ZVhtbCA9IGluaXRYbWwoZG9jdW1lbnQsIHZtKTsKdm0ub25DaGFuZ2UgPSAoKT0+ewogICAgdXBkYXRlRm9ybSgpOwogICAgdXBkYXRlTWVzc2FnZXMoKTsKICAgIHVwZGF0ZVNlYXJjaFJlc3VsdHMoKTsKICAgIHVwZGF0ZUNvbW1lbnRzKCk7CiAgICB1cGRhdGVYbWwoKTsKfTsKdm0uc3RhcnQoKTsKc2V0QXBwU3RhdGUoJ3N0YXJ0ZWQnKTsK';
